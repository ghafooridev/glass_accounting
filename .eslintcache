[{"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\index.js":"1","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\serviceWorker.js":"2","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\RTL.js":"3","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\App.js":"4","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\LayoutContext.js":"5","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\UserContext.js":"6","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\index.js":"7","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\store\\index.js":"8","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\constant.js":"9","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\services\\storage.js":"10","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\index.jsx":"11","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Alert\\index.jsx":"12","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\Login.js":"13","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\Error.js":"14","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\default.js":"15","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\index.js":"16","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\Modal.Style.js":"17","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\AlertAction.js":"18","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\index.js":"19","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\detail.js":"20","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\paymentReport.js":"21","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\accountNumber\\list.js":"22","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\traffic\\register.js":"23","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\log.js":"24","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\detail.js":"25","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\unitReducer.js":"26","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\index.js":"27","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\dialogReducer.js":"28","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\AlertReducer.js":"29","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\traffic\\index.js":"30","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\index.js":"31","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\index.js":"32","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\transaction.js":"33","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\dialogAction.jsx":"34","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\list.js":"35","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Skeleton\\index.js":"36","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\list.js":"37","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\style.js":"38","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\utils.js":"39","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\hooks\\useApi.js":"40","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableHead.js":"41","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TablePaging.js":"42","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableTop.js":"43","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableRowMenu.js":"44","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\detail.js":"45","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\style.js":"46","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\style.js":"47","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\style.js":"48","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\configs\\axios.js":"49","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\account.js":"50","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\logFilter.js":"51","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\style.js":"52","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\accountNumber\\detail.js":"53","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\accountNumber\\style.js":"54","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\paymentDetail.js":"55","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\style.js":"56","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\CircularProgress\\index.js":"57","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\icons\\index.js":"58","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\style.js":"59","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\detail.js":"60","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\detail.js":"61","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\detail.js":"62","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\detail.js":"63","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\detail.js":"64","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\detail.js":"65","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\index.js":"66","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\index.js":"67","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\index.js":"68","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\index.js":"69","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\index.js":"70","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\index.js":"71","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\prePayment.js":"72","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\personSelector.js":"73","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\unitAction.js":"74","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\amount.js":"75","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\product.js":"76","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\driver.js":"77","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\detail.js":"78","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\detail.js":"79","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\styles.js":"80","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\detail.js":"81","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\Header.js":"82","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\list.js":"83","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\Dashboard.js":"84","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\Sidebar.js":"85","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\list.js":"86","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\list.js":"87","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\list.js":"88","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\list.js":"89","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\list.js":"90","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\style.js":"91","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\paymnet.js":"92","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\index.js":"93","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\style.js":"94","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\index.js":"95","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\index.js":"96","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\index.js":"97","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\account.js":"98","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\account.js":"99","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\permission.js":"100","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\ChangePassword.js":"101","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\styles.js":"102","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\filter.js":"103","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\transfer.js":"104","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\styles.js":"105","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\styles.js":"106","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\amountBrif.js":"107","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\style.js":"108","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\Dot.js":"109","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"110","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\transfer.js":"111","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\filter.js":"112","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\amountBrif.js":"113","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\style.js":"114","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\spendCheque.js":"115","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\cashSelector.js":"116","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\style.js":"117","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\list.js":"118","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\styles.js":"119","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\list.js":"120","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\list.js":"121","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\styles.js":"122","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Wrappers\\Wrappers.js":"123","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\list.js":"124","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\Widget.js":"125","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Paper\\index.js":"126","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"127","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\filter.js":"128","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\filter.js":"129","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\filter.js":"130","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\style.js":"131","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\styles.js":"132","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\OtherPayments.js":"133"},{"size":1636,"mtime":1624537506140,"results":"134","hashOfConfig":"135"},{"size":5083,"mtime":1619356605618,"results":"136","hashOfConfig":"135"},{"size":339,"mtime":1619868731723,"results":"137","hashOfConfig":"135"},{"size":1756,"mtime":1624537506109,"results":"138","hashOfConfig":"135"},{"size":1444,"mtime":1619356605590,"results":"139","hashOfConfig":"135"},{"size":2553,"mtime":1624537506137,"results":"140","hashOfConfig":"135"},{"size":563,"mtime":1619360880461,"results":"141","hashOfConfig":"135"},{"size":227,"mtime":1619012872884,"results":"142","hashOfConfig":"135"},{"size":4413,"mtime":1624791278161,"results":"143","hashOfConfig":"135"},{"size":485,"mtime":1624537506265,"results":"144","hashOfConfig":"135"},{"size":1538,"mtime":1624537506121,"results":"145","hashOfConfig":"135"},{"size":780,"mtime":1619705528542,"results":"146","hashOfConfig":"135"},{"size":4390,"mtime":1624537506237,"results":"147","hashOfConfig":"135"},{"size":1626,"mtime":1619356605601,"results":"148","hashOfConfig":"135"},{"size":2763,"mtime":1624537506266,"results":"149","hashOfConfig":"135"},{"size":5135,"mtime":1624537506117,"results":"150","hashOfConfig":"135"},{"size":475,"mtime":1624537506118,"results":"151","hashOfConfig":"135"},{"size":285,"mtime":1619704498679,"results":"152","hashOfConfig":"135"},{"size":344,"mtime":1624537506263,"results":"153","hashOfConfig":"135"},{"size":3784,"mtime":1624537506234,"results":"154","hashOfConfig":"135"},{"size":7950,"mtime":1624537506148,"results":"155","hashOfConfig":"135"},{"size":7958,"mtime":1624537506143,"results":"156","hashOfConfig":"135"},{"size":10580,"mtime":1624537506256,"results":"157","hashOfConfig":"135"},{"size":14185,"mtime":1624537506225,"results":"158","hashOfConfig":"135"},{"size":20591,"mtime":1624537506180,"results":"159","hashOfConfig":"135"},{"size":470,"mtime":1624537506263,"results":"160","hashOfConfig":"135"},{"size":35,"mtime":1624537506234,"results":"161","hashOfConfig":"135"},{"size":610,"mtime":1624537506262,"results":"162","hashOfConfig":"135"},{"size":502,"mtime":1619704498679,"results":"163","hashOfConfig":"135"},{"size":39,"mtime":1624537506254,"results":"164","hashOfConfig":"135"},{"size":14919,"mtime":1624537506159,"results":"165","hashOfConfig":"135"},{"size":35,"mtime":1624537506251,"results":"166","hashOfConfig":"135"},{"size":8081,"mtime":1624537506173,"results":"167","hashOfConfig":"135"},{"size":287,"mtime":1622468275134,"results":"168","hashOfConfig":"135"},{"size":7168,"mtime":1624537506235,"results":"169","hashOfConfig":"135"},{"size":3558,"mtime":1624537506130,"results":"170","hashOfConfig":"135"},{"size":6273,"mtime":1624537506252,"results":"171","hashOfConfig":"135"},{"size":586,"mtime":1624537506172,"results":"172","hashOfConfig":"135"},{"size":1888,"mtime":1624540241329,"results":"173","hashOfConfig":"135"},{"size":1269,"mtime":1624537506140,"results":"174","hashOfConfig":"135"},{"size":1114,"mtime":1624537506131,"results":"175","hashOfConfig":"135"},{"size":838,"mtime":1624537506132,"results":"176","hashOfConfig":"135"},{"size":3193,"mtime":1624537506134,"results":"177","hashOfConfig":"135"},{"size":1379,"mtime":1624537506133,"results":"178","hashOfConfig":"135"},{"size":1168,"mtime":1624537506155,"results":"179","hashOfConfig":"135"},{"size":594,"mtime":1624537506160,"results":"180","hashOfConfig":"135"},{"size":250,"mtime":1624537506236,"results":"181","hashOfConfig":"135"},{"size":250,"mtime":1624537506252,"results":"182","hashOfConfig":"135"},{"size":1909,"mtime":1624537506136,"results":"183","hashOfConfig":"135"},{"size":5990,"mtime":1624537506179,"results":"184","hashOfConfig":"135"},{"size":2266,"mtime":1624537506225,"results":"185","hashOfConfig":"135"},{"size":937,"mtime":1624537506226,"results":"186","hashOfConfig":"135"},{"size":3784,"mtime":1624537506142,"results":"187","hashOfConfig":"135"},{"size":250,"mtime":1624537506144,"results":"188","hashOfConfig":"135"},{"size":4051,"mtime":1624537506147,"results":"189","hashOfConfig":"135"},{"size":250,"mtime":1624537506149,"results":"190","hashOfConfig":"135"},{"size":351,"mtime":1624537506112,"results":"191","hashOfConfig":"135"},{"size":461,"mtime":1624537506135,"results":"192","hashOfConfig":"135"},{"size":363,"mtime":1624537506183,"results":"193","hashOfConfig":"135"},{"size":13078,"mtime":1624537506145,"results":"194","hashOfConfig":"135"},{"size":7179,"mtime":1624537506177,"results":"195","hashOfConfig":"135"},{"size":12549,"mtime":1624687455967,"results":"196","hashOfConfig":"135"},{"size":8715,"mtime":1624792027399,"results":"197","hashOfConfig":"135"},{"size":13037,"mtime":1624537506162,"results":"198","hashOfConfig":"135"},{"size":24460,"mtime":1624792027647,"results":"199","hashOfConfig":"135"},{"size":35,"mtime":1624537506182,"results":"200","hashOfConfig":"135"},{"size":35,"mtime":1624537506145,"results":"201","hashOfConfig":"135"},{"size":35,"mtime":1624537506177,"results":"202","hashOfConfig":"135"},{"size":35,"mtime":1624537506247,"results":"203","hashOfConfig":"135"},{"size":35,"mtime":1624537506240,"results":"204","hashOfConfig":"135"},{"size":35,"mtime":1624537506163,"results":"205","hashOfConfig":"135"},{"size":18598,"mtime":1624537506244,"results":"206","hashOfConfig":"135"},{"size":4735,"mtime":1624792027311,"results":"207","hashOfConfig":"135"},{"size":634,"mtime":1624537506261,"results":"208","hashOfConfig":"135"},{"size":5422,"mtime":1624537506245,"results":"209","hashOfConfig":"135"},{"size":11443,"mtime":1624537506232,"results":"210","hashOfConfig":"135"},{"size":5610,"mtime":1624541006107,"results":"211","hashOfConfig":"135"},{"size":19438,"mtime":1624537506221,"results":"212","hashOfConfig":"135"},{"size":18686,"mtime":1624537506169,"results":"213","hashOfConfig":"135"},{"size":710,"mtime":1619356605574,"results":"214","hashOfConfig":"135"},{"size":12254,"mtime":1624537506258,"results":"215","hashOfConfig":"135"},{"size":7838,"mtime":1624537506113,"results":"216","hashOfConfig":"135"},{"size":7926,"mtime":1624541159061,"results":"217","hashOfConfig":"135"},{"size":22173,"mtime":1624791121928,"results":"218","hashOfConfig":"135"},{"size":7142,"mtime":1624537506125,"results":"219","hashOfConfig":"135"},{"size":8488,"mtime":1624537506146,"results":"220","hashOfConfig":"135"},{"size":7455,"mtime":1624537506178,"results":"221","hashOfConfig":"135"},{"size":9556,"mtime":1624537506248,"results":"222","hashOfConfig":"135"},{"size":10852,"mtime":1624537506241,"results":"223","hashOfConfig":"135"},{"size":12202,"mtime":1624537506164,"results":"224","hashOfConfig":"135"},{"size":877,"mtime":1624537506244,"results":"225","hashOfConfig":"135"},{"size":15872,"mtime":1624537506242,"results":"226","hashOfConfig":"135"},{"size":35,"mtime":1624537506230,"results":"227","hashOfConfig":"135"},{"size":1046,"mtime":1624537506233,"results":"228","hashOfConfig":"135"},{"size":35,"mtime":1624537506223,"results":"229","hashOfConfig":"135"},{"size":35,"mtime":1624537506170,"results":"230","hashOfConfig":"135"},{"size":35,"mtime":1619699462238,"results":"231","hashOfConfig":"135"},{"size":5990,"mtime":1624537506206,"results":"232","hashOfConfig":"135"},{"size":5990,"mtime":1624537506168,"results":"233","hashOfConfig":"135"},{"size":1698,"mtime":1624537506260,"results":"234","hashOfConfig":"135"},{"size":5061,"mtime":1624537506112,"results":"235","hashOfConfig":"135"},{"size":4471,"mtime":1624537506115,"results":"236","hashOfConfig":"135"},{"size":2193,"mtime":1624537506181,"results":"237","hashOfConfig":"135"},{"size":2367,"mtime":1624537506149,"results":"238","hashOfConfig":"135"},{"size":1363,"mtime":1619356605584,"results":"239","hashOfConfig":"135"},{"size":3109,"mtime":1624537506175,"results":"240","hashOfConfig":"135"},{"size":2520,"mtime":1624537506176,"results":"241","hashOfConfig":"135"},{"size":250,"mtime":1624537506178,"results":"242","hashOfConfig":"135"},{"size":912,"mtime":1624537506126,"results":"243","hashOfConfig":"135"},{"size":5964,"mtime":1624537506128,"results":"244","hashOfConfig":"135"},{"size":8771,"mtime":1624537506249,"results":"245","hashOfConfig":"135"},{"size":3467,"mtime":1624537506240,"results":"246","hashOfConfig":"135"},{"size":1650,"mtime":1624537506246,"results":"247","hashOfConfig":"135"},{"size":250,"mtime":1624537506248,"results":"248","hashOfConfig":"135"},{"size":3616,"mtime":1624537506165,"results":"249","hashOfConfig":"135"},{"size":4944,"mtime":1624537506161,"results":"250","hashOfConfig":"135"},{"size":802,"mtime":1624537506167,"results":"251","hashOfConfig":"135"},{"size":11172,"mtime":1624540510047,"results":"252","hashOfConfig":"135"},{"size":1395,"mtime":1619356605603,"results":"253","hashOfConfig":"135"},{"size":8053,"mtime":1624791460364,"results":"254","hashOfConfig":"135"},{"size":8557,"mtime":1624791548820,"results":"255","hashOfConfig":"135"},{"size":3462,"mtime":1624537506237,"results":"256","hashOfConfig":"135"},{"size":3971,"mtime":1619356605588,"results":"257","hashOfConfig":"135"},{"size":7317,"mtime":1624537506259,"results":"258","hashOfConfig":"135"},{"size":2581,"mtime":1619356605586,"results":"259","hashOfConfig":"135"},{"size":895,"mtime":1624537506123,"results":"260","hashOfConfig":"135"},{"size":1449,"mtime":1624537506129,"results":"261","hashOfConfig":"135"},{"size":3440,"mtime":1624537506230,"results":"262","hashOfConfig":"135"},{"size":1863,"mtime":1624537506222,"results":"263","hashOfConfig":"135"},{"size":1863,"mtime":1624537506169,"results":"264","hashOfConfig":"135"},{"size":250,"mtime":1624537506261,"results":"265","hashOfConfig":"135"},{"size":1015,"mtime":1619356605588,"results":"266","hashOfConfig":"135"},{"size":11443,"mtime":1624687285515,"results":"267","hashOfConfig":"135"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},"64texg",{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"270"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"270"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"270"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"270"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"270"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"270"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"270"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"270"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"270"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"270"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"270"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"270"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"270"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"270"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"270"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"270"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"270"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"270"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"270"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"270"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"270"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"270"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"270"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"270"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"270"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"270"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"270"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"270"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"270"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"270"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"270"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"270"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"270"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"270"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"270"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"270"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"270"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"270"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"270"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"270"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"270"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"270"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"270"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"270"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"270"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"270"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"270"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"270"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"270"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"270"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"270"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"270"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"270"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"270"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"561","messages":"562","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"270"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"270"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"270"},"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\index.js",[],["589","590"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\serviceWorker.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\RTL.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\App.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\LayoutContext.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\UserContext.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\store\\index.js",["591"],"import { createStore, applyMiddleware, compose } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nimport rootReducer from \"../reducers\"\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\constant.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\services\\storage.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\index.jsx",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Alert\\index.jsx",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\Login.js",["592"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  CircularProgress,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport useStyles from \"./styles\";\r\nimport logo from \"./logo.svg\";\r\nimport { useUserDispatch, loginUser } from \"../../context/UserContext\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport unitAcion from \"../../redux/actions/unitAction\";\r\n\r\nfunction Login(props) {\r\n  const classes = useStyles();\r\n  const userDispatch = useUserDispatch();\r\n  const loginRequest = useApi({\r\n    method: \"post\",\r\n    url: \"auth/login\",\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [usernameValue, setUsernameValue] = useState(\"\");\r\n  const [passwordValue, setPasswordValue] = useState(\"\");\r\n\r\n  const onPressEnter = function (event) {\r\n    if (event.which === 13 && passwordValue && usernameValue) {\r\n      loginUser(\r\n        loginRequest,\r\n        userDispatch,\r\n        usernameValue,\r\n        passwordValue,\r\n        props.history,\r\n        setIsLoading,\r\n        setError,\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    unitAcion.setProdcutUnit();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <div className={classes.logotypeContainer}>\r\n        <img src={logo} alt=\"logo\" className={classes.logotypeImage} />\r\n        <Typography className={classes.logotypeText}>\r\n          سیستم جامع حسابداری\r\n        </Typography>\r\n      </div>\r\n      <div className={classes.formContainer}>\r\n        <div className={classes.form}>\r\n          <React.Fragment>\r\n            <div className={classes.title}>\r\n              <Divider />\r\n              <Typography variant=\"h4\" className={classes.greeting}>\r\n                ورود به سیستم\r\n              </Typography>\r\n              <Divider />\r\n            </div>\r\n\r\n            <TextField\r\n              label=\"نام کاربری\"\r\n              variant=\"outlined\"\r\n              id=\"username\"\r\n              InputProps={{\r\n                classes: {\r\n                  input: classes.textField,\r\n                },\r\n              }}\r\n              value={usernameValue}\r\n              onChange={(e) => setUsernameValue(e.target.value)}\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"رمز عبور \"\r\n              variant=\"outlined\"\r\n              id=\"password\"\r\n              InputProps={{\r\n                classes: {\r\n                  input: classes.textField,\r\n                },\r\n              }}\r\n              value={passwordValue}\r\n              onChange={(e) => setPasswordValue(e.target.value)}\r\n              margin=\"normal\"\r\n              type=\"password\"\r\n              fullWidth\r\n              onKeyPress={onPressEnter}\r\n            />\r\n            <div className={classes.formButtons}>\r\n              {isLoading ? (\r\n                <CircularProgress size={26} className={classes.loginLoader} />\r\n              ) : (\r\n                <Button\r\n                  disabled={\r\n                    usernameValue.length === 0 || passwordValue.length === 0\r\n                  }\r\n                  onClick={() =>\r\n                    loginUser(\r\n                      loginRequest,\r\n                      userDispatch,\r\n                      usernameValue,\r\n                      passwordValue,\r\n                      props.history,\r\n                      setIsLoading,\r\n                      setError,\r\n                    )\r\n                  }\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                >\r\n                  ورود\r\n                </Button>\r\n              )}\r\n              <Button\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                className={classes.forgetButton}\r\n              >\r\n                بازیابی رمز عبور\r\n              </Button>\r\n            </div>\r\n          </React.Fragment>\r\n        </div>\r\n        <Typography color=\"primary\" className={classes.copyright}>\r\n          تمامی حقوق مادی و معنوی این اثر متعلق به شرکت المان می باشد\r\n        </Typography>\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\Error.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\default.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\index.js",["593"],"import React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\n\r\nimport useStyles from \"./styles\";\r\nimport Header from \"../Header/Header\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport Dashboard from \"../../pages/dashboard/Dashboard\";\r\nimport UserList from \"../../pages/users\";\r\nimport UserDetail from \"../../pages/users/detail\";\r\nimport CustomerList from \"../../pages/customers\";\r\nimport CustomerDetail from \"../../pages/customers/detail\";\r\nimport CustomerTransaction from \"../../pages/customers/transaction\";\r\nimport EmployeeList from \"../../pages/employee\";\r\nimport EmployeeDetail from \"../../pages/employee/detail\";\r\nimport InvoiceList from \"../../pages/invoice\";\r\nimport InvoiceDetail from \"../../pages/invoice/detail\";\r\nimport ChequeList from \"../../pages/cheque\";\r\nimport ChequeDetail from \"../../pages/cheque/detail\";\r\nimport PaymentList from \"../../pages/payment\";\r\nimport PaymentDetail from \"../../pages/payment/detail\";\r\nimport ProductList from \"../../pages/product\";\r\nimport ProductDetail from \"../../pages/product/detail\";\r\nimport DepotList from \"../../pages/depot\";\r\nimport DepotDetail from \"../../pages/depot/detail\";\r\nimport CashList from \"../../pages/cash\";\r\nimport CashDetail from \"../../pages/cash/detail\";\r\nimport DriverList from \"../../pages/driver\";\r\nimport DriverDetail from \"../../pages/driver/detail\";\r\nimport Setting from \"../../pages/setting\";\r\nimport Category from \"../../pages/category\";\r\nimport Traffic from \"../../pages/traffic\";\r\nimport TrafficDetail from \"../../pages/traffic/register\";\r\nimport { useLayoutState } from \"../../context/LayoutContext\";\r\nimport EmployeeLog from \"../../pages/employee/log\";\r\nimport AccountsNumber from \"../../pages/accountNumber/list\";\r\nimport CashPaymentReport from \"../../pages/cash/paymentReport\";\r\nimport LoanList from \"../../pages/loan\";\r\nimport LoanDetail from \"../../pages/loan/detail\";\r\n\r\nfunction Layout(props) {\r\n  var classes = useStyles();\r\n\r\n  var layoutState = useLayoutState();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <>\r\n        <Router>\r\n          <Header history={props.history} />\r\n          <Sidebar />\r\n          <div\r\n            className={classnames(classes.content, {\r\n              [classes.contentShift]: layoutState.isSidebarOpened,\r\n            })}\r\n          >\r\n            <div className={classes.fakeToolbar} />\r\n            <Switch>\r\n              <Route path=\"/app/dashboard\" component={Dashboard} />\r\n\r\n              <Route path=\"/app/user-list\" component={UserList} />\r\n              <Route path=\"/app/user-detail\" component={UserDetail} />\r\n\r\n              <Route path=\"/app/customer-list\" component={CustomerList} />\r\n              <Route path=\"/app/customer-detail\" component={CustomerDetail} />\r\n              <Route\r\n                path=\"/app/customer-transaction\"\r\n                component={CustomerTransaction}\r\n              />\r\n\r\n              <Route path=\"/app/employee-list\" component={EmployeeList} />\r\n              <Route path=\"/app/employee-detail\" component={EmployeeDetail} />\r\n              <Route path=\"/app/employee-log\" component={EmployeeLog} />\r\n\r\n              <Route path=\"/app/driver-list\" component={DriverList} />\r\n              <Route path=\"/app/driver-detail\" component={DriverDetail} />\r\n\r\n              <Route path=\"/app/cash-list\" component={CashList} />\r\n              <Route path=\"/app/cash-detail\" component={CashDetail} />\r\n              <Route\r\n                path=\"/app/cash-transaction\"\r\n                component={CashPaymentReport}\r\n              />\r\n\r\n              <Route path=\"/app/cheque-list\" component={ChequeList} />\r\n              <Route path=\"/app/cheque-detail\" component={ChequeDetail} />\r\n\r\n              <Route path=\"/app/cheque-list\" component={ChequeList} />\r\n              <Route path=\"/app/cheque-detail\" component={ChequeDetail} />\r\n\r\n              <Route path=\"/app/loan-list\" component={LoanList} />\r\n              <Route path=\"/app/loan-detail\" component={LoanDetail} />\r\n\r\n              <Route path=\"/app/invoice-list\" component={InvoiceList} />\r\n              <Route path=\"/app/invoice-detail\" component={InvoiceDetail} />\r\n\r\n              <Route path=\"/app/payment-list\" component={PaymentList} />\r\n              <Route path=\"/app/payment-detail\" component={PaymentDetail} />\r\n\r\n              <Route path=\"/app/product-list\" component={ProductList} />\r\n              <Route path=\"/app/product-detail\" component={ProductDetail} />\r\n\r\n              <Route path=\"/app/depot-list\" component={DepotList} />\r\n              <Route path=\"/app/depot-detail\" component={DepotDetail} />\r\n\r\n              <Route path=\"/app/setting\" component={Setting} />\r\n              <Route path=\"/app/category\" component={Category} />\r\n\r\n              <Route path=\"/app/traffic\" component={Traffic} />\r\n              <Route path=\"/app/traffic-detail\" component={TrafficDetail} />\r\n              <Route path=\"/app/accountNumber\" component={AccountsNumber} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\Modal.Style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\AlertAction.js",["594"],"import Constant from \"../../helpers/constant\";\r\nimport store from \"../store\";\r\n\r\nexport default {\r\n  show(option) {\r\n    store.dispatch({ type: Constant.ACTION_TYPES.SHOW_ALERT, option });\r\n  },\r\n\r\n  hide() {\r\n    store.dispatch({ type: Constant.ACTION_TYPES.HIDE_ALERT });\r\n  },\r\n};\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\detail.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\paymentReport.js",["595","596"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Tab,\r\n  Tabs,\r\n} from \"@material-ui/core\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  getQueryString,\r\n  convertParamsToQueryString,\r\n  hasPermission,\r\n  persianNumber,\r\n} from \"../../helpers/utils\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport PaymentDetail from \"./paymentDetail\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"date\",\r\n    label: \"تاریخ\",\r\n  },\r\n  {\r\n    id: \"name\",\r\n    label: \"نام شخص\",\r\n  },\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    label: \"مبلغ\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nconst types = {\r\n  CASH: \"نقد\",\r\n  CHEQUE: \"چک\",\r\n  BANK: \"بانک\",\r\n};\r\n\r\nconst PaymentReport = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"price\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const cashId = getQueryString(\"cashId\");\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n  const [type, setPerson] = useState(\"CASH\");\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getPaymentByCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `payment/cashdesk?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n      type,\r\n    })}`,\r\n  });\r\n\r\n  const onDismissDetail = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const handleDetail = (row) => {\r\n    console.log(row);\r\n    DialogActions.show({\r\n      title: `${\r\n        row.paymentType === \"INCOME\" ? \"جزییات دریافت\" : \"جزییات پرداخت\"\r\n      } `,\r\n      component: (\r\n        <PaymentDetail onDismiss={onDismissDetail} data={row} type={row.type} />\r\n      ),\r\n      size: \"sm\",\r\n      confirm: false,\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const getData = async () => {\r\n    const paymentList = await getPaymentByCashRequest.execute(null, cashId);\r\n    setList(paymentList.data);\r\n    setTotal(paymentList.total);\r\n  };\r\n\r\n  const onChangeTab = (e, value) => {\r\n    setPerson(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, type]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getPaymentByCashRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست حساب های بانکی\"\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <div className={classes.tab}>\r\n                    <Tabs\r\n                      value={type}\r\n                      onChange={onChangeTab}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      centered\r\n                      variant=\"fullWidth\"\r\n                    >\r\n                      <Tab label=\"نقدی\" value=\"CASH\" />\r\n                      <Tab label=\"بانکی\" value=\"BANK\" />\r\n                      <Tab label=\"چک\" value=\"CHEQUE\" />\r\n                    </Tabs>\r\n                  </div>\r\n\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  new Date(row.date).toLocaleDateString(\r\n                                    \"fa-IR\",\r\n                                  ),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\"> {row.name}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {types[row.type]}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  Number(row.price).toLocaleString(),\r\n                                )}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <i\r\n                                  className=\"material-icons-round\"\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  onClick={() => handleDetail(row)}\r\n                                >\r\n                                  feed\r\n                                </i>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getPaymentByCashRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentReport;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\accountNumber\\list.js",["597","598","599"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Tab,\r\n  Tabs,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString, hasPermission } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport Detail from \"./detail\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام شخص\",\r\n  },\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع\",\r\n  },\r\n  {\r\n    id: \"logo\",\r\n    label: \"بانک\",\r\n  },\r\n  { id: \"cardNumber\", label: \"شماره کارت\" },\r\n  { id: \"action\" },\r\n];\r\nconst PERSON_TYPE = {\r\n  EMPLOYEE: \"پرسنل\",\r\n  CUSTOMER: \"مشتری\",\r\n  DRIVER: \"راننده\",\r\n};\r\n\r\nconst AccountsNumber = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n  const [person, setPerson] = useState(\"ALL\");\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getCardRequest = useApi({\r\n    method: \"get\",\r\n    url: `account?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n      personType: person,\r\n    })}`,\r\n  });\r\n\r\n  const onDismissDetail = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const handleDetail = (row) => {\r\n    DialogActions.show({\r\n      title: `حساب های ${row.personName}`,\r\n      component: <Detail onDismiss={onDismissDetail} detail={row} />,\r\n      size: \"sm\",\r\n      confirm: false,\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const getData = async () => {\r\n    const cardList = await getCardRequest.execute();\r\n    setList(cardList.data);\r\n    setTotal(cardList.total);\r\n  };\r\n\r\n  const onChangeTab = (e, value) => {\r\n    setPerson(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, person]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getCardRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست حساب های بانکی\"\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <div className={classes.tab}>\r\n                    <Tabs\r\n                      value={person}\r\n                      onChange={onChangeTab}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      centered\r\n                      variant=\"fullWidth\"\r\n                    >\r\n                      <Tab label=\"کل اشخاص \" value=\"ALL\" />\r\n                      <Tab label=\"مشتریان\" value=\"CUSTOMER\" />\r\n                      <Tab label=\"پرسنل\" value=\"EMPLOYEE\" />\r\n                      <Tab label=\"رانندگان\" value=\"DRIVER\" />\r\n                    </Tabs>\r\n                  </div>\r\n\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {row.personName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {PERSON_TYPE[row.personType]}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.bank && (\r\n                                  <img\r\n                                    style={{ width: 30, height: 30 }}\r\n                                    alt={row.bank.name}\r\n                                    src={`${Constant.API_ADDRESS}/${row.bank.logo}`}\r\n                                  />\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.accountCardNumber}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <i\r\n                                  className=\"material-icons-round\"\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  onClick={() => handleDetail(row)}\r\n                                >\r\n                                  link\r\n                                </i>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getCardRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccountsNumber;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\traffic\\register.js",["600","601","602"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  TextField,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n    marginBottom: 10,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n  enter: {\r\n    color: \"#fff\",\r\n    backgroundColor: theme.palette.primary.main,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  exit: {\r\n    color: \"#fff\",\r\n    backgroundColor: theme.palette.error.main,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.error.main,\r\n    },\r\n  },\r\n  logedEnter: {\r\n    color: theme.palette.primary.main,\r\n    backgroundColor: theme.palette.gray.main,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.gray.main,\r\n    },\r\n  },\r\n  logedExit: {\r\n    color: theme.palette.error.main,\r\n    backgroundColor: theme.palette.gray.main,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.gray.main,\r\n    },\r\n  },\r\n  register: {\r\n    color: \"#fff\",\r\n    backgroundColor: theme.palette.success.main,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.success.dark,\r\n    },\r\n  },\r\n  dateTime: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  clockConatiner: {\r\n    background: theme.palette.primary.main,\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام و نام خانوادگی\",\r\n  },\r\n\r\n  { id: \"enter\", label: \"ورود\" },\r\n  {\r\n    id: \"exit\",\r\n    label: \"خروج\",\r\n  },\r\n  { id: \"enter\", label: \"ورود\" },\r\n  {\r\n    id: \"exit\",\r\n    label: \"خروج\",\r\n  },\r\n];\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [search, setSearch] = useState();\r\n  const [list, setList] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(moment());\r\n\r\n  const registerRequest = useApi({\r\n    method: \"post\",\r\n    url: `attendance`,\r\n  });\r\n\r\n  const getTrafficRequest = useApi({\r\n    method: \"get\",\r\n    url: decodeURIComponent(\r\n      `attendance?${convertParamsToQueryString({\r\n        search,\r\n        filter: `{date:${selectedDate._d.toISOString()}}`,\r\n      })}`,\r\n    ),\r\n  });\r\n\r\n  const onSubmit = async (row, type) => {\r\n    await registerRequest.execute({ employeeId: row.id, type });\r\n    getData();\r\n  };\r\n\r\n  const onChangeSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const userList = await getTrafficRequest.execute();\r\n    setList(userList.data);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const getTimesElement = (row) => {\r\n    if (row.times.length === 0) {\r\n      return (\r\n        <>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={\"ثبت ورود\"}\r\n              className={classes.enter}\r\n              onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\"></TableCell>\r\n          <TableCell padding=\"none\"></TableCell>\r\n          <TableCell padding=\"none\"></TableCell>\r\n        </>\r\n      );\r\n    }\r\n    if (row.times.length === 1) {\r\n      return (\r\n        <>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[0].date}\r\n              className={classes.logedEnter}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={\"ثبت خروج\"}\r\n              className={classes.exit}\r\n              onClick={() => onSubmit(row, \"EXIT\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\"></TableCell>\r\n          <TableCell padding=\"none\"></TableCell>\r\n        </>\r\n      );\r\n    }\r\n    if (row.times.length === 2) {\r\n      return (\r\n        <>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[0].date}\r\n              className={classes.logedEnter}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[1].date}\r\n              className={classes.logedExit}\r\n              // onClick={() => onSubmit(row, \"EXIT\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={\"ثبت ورود\"}\r\n              className={classes.enter}\r\n              onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\"></TableCell>\r\n        </>\r\n      );\r\n    }\r\n    if (row.times.length === 3) {\r\n      return (\r\n        <>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[0].date}\r\n              className={classes.logedEnter}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[1].date}\r\n              className={classes.logedExit}\r\n              // onClick={() => onSubmit(row, \"EXIT\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[2].date}\r\n              className={classes.logedEnter}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={\"ثبت خروج\"}\r\n              className={classes.exit}\r\n              onClick={() => onSubmit(row, \"EXIT\")}\r\n            />\r\n          </TableCell>\r\n        </>\r\n      );\r\n    }\r\n    if (row.times.length === 4) {\r\n      return (\r\n        <>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[0].date}\r\n              className={classes.logedEnter}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[1].date}\r\n              className={classes.logedExit}\r\n              // onClick={() => onSubmit(row, \"EXIT\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[2].date}\r\n              className={classes.logedEnter}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Chip\r\n              label={row.times[3].date}\r\n              className={classes.logedExit}\r\n              // onClick={() => onSubmit(row, \"ENTER\")}\r\n            />\r\n          </TableCell>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [search, selectedDate]);\r\n\r\n  return (\r\n    <Grid container spacing={3} style={{ alignItems: \"baseline\" }}>\r\n      <Grid item lg={3} sm={12} className={classes.dateTime}>\r\n        <Grid item lg={12} xs={12} className={classes.datePicker}>\r\n          <DatePicker\r\n            autoOk\r\n            orientation=\"landscape\"\r\n            variant=\"static\"\r\n            openTo=\"date\"\r\n            name=\"date\"\r\n            label=\"تاریخ شروع قرارداد\"\r\n            inputVariant=\"outlined\"\r\n            okLabel=\"تأیید\"\r\n            cancelLabel=\"لغو\"\r\n            labelFunc={(date) => (date ? date.format(\"jYYYY/jMM/jDD\") : \"\")}\r\n            value={selectedDate}\r\n            onChange={handleDateChange}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item lg={9} sm={12} className={classes.root}>\r\n        <Paper className={classes.paper}>\r\n          <Typography\r\n            className={classes.title}\r\n            variant=\"h6\"\r\n            id=\"tableTitle\"\r\n            component=\"div\"\r\n          >\r\n            ثبت حضور و غیاب\r\n          </Typography>\r\n\r\n          <Grid container spacing={3}>\r\n            <Grid item lg={12} xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\" جستجوی پرسنل\"\r\n                onChange={onChangeSearch}\r\n                value={search}\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        <div className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <TableContainer style={{ padding: \"0 10px\" }}>\r\n              <Table\r\n                className={classes.table}\r\n                size={\"medium\"}\r\n                style={{ paddingRight: 10 }}\r\n              >\r\n                <TableHeader classes={classes} headCells={headCells} />\r\n                <TableBody>\r\n                  {list.map((row) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        tabIndex={-1}\r\n                        key={row.id}\r\n                        style={{ paddingRight: 10 }}\r\n                      >\r\n                        <TableCell padding=\"none\">{row.name}</TableCell>\r\n                        {getTimesElement(row)}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                  {!list.length && !getTrafficRequest.pending && (\r\n                    <TableRow style={{ height: 53 }}>\r\n                      <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                        <Typography variant=\"h6\">\r\n                          داده ای برای نمایش وجود ندارد\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\log.js",["603","604","605","606"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Chip,\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  convertParamsToQueryString,\r\n  hasPermission,\r\n  getQueryString,\r\n} from \"../../helpers/utils\";\r\nimport styles from \"./style\";\r\nimport FilterComponent from \"./logFilter\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\nimport Transction from \"../customers/transaction\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"date\",\r\n    label: \"تاریخ\",\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"وضعیت\",\r\n  },\r\n  { id: \"firstEnter\", label: \"ورود اول\" },\r\n  {\r\n    id: \"firstExit\",\r\n    label: \"خروج اول\",\r\n  },\r\n  { id: \"secondEnter\", label: \"ورود دوم\" },\r\n  {\r\n    id: \"secondExit\",\r\n    label: \"خروج دوم\",\r\n  },\r\n  { id: \"log\", label: \"کارکرد روزانه\" },\r\n];\r\n\r\nexport default function EmployeeLog() {\r\n  const classes = styles();\r\n  const id = getQueryString(\"id\");\r\n  const name = getQueryString(\"name\");\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"firstName\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const history = useHistory();\r\n  const [filter, setFilter] = useState();\r\n  const [price, setPrice] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [detail, setDetail] = useState({\r\n    totalPay: \" \",\r\n    totalLogPay: \" \",\r\n    totalLog: \" \",\r\n    purePay: \" \",\r\n    SPH: \" \",\r\n  });\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/customer-list\");\r\n  };\r\n\r\n  const getEmployeeRequest = useApi({\r\n    method: \"get\",\r\n    url: `employee?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      filter,\r\n    })}`,\r\n  });\r\n\r\n  const onFilter = (data) => {\r\n    setFilter(data);\r\n  };\r\n\r\n  const onShowPayments = () => {\r\n    DialogActions.show({\r\n      title: \" حساب بانکی\",\r\n      component: (\r\n        <Transction\r\n        // onSubmit={onSubmitAccount}\r\n        // onDismiss={onDismissAccount}\r\n        // defaultValues={data}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const getData = async () => {\r\n    const employeeList = await getEmployeeRequest.execute();\r\n    setList(employeeList.data);\r\n  };\r\n\r\n  const getTitle = () => {\r\n    return `لیست تردد ${name}`;\r\n  };\r\n\r\n  const onSubmitNewPayment = () => {\r\n    //add new payment in today and type =\"outcome\"\r\n    console.log(price, id, description);\r\n  };\r\n\r\n  const onChange = (e, type) => {};\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, pageSize, filter]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getEmployeeRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <>\r\n                <Grid container spacing={3} className={classes.salary}>\r\n                  <Grid item xs={3}>\r\n                    <Paper className={classes.salaryPaperRight}>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            label=\"مجموع کارکرد\"\r\n                            name=\"totalLog\"\r\n                            value={detail.totalLog}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            label=\"دریافتی در ساعت\"\r\n                            name=\"totalLog\"\r\n                            value={detail.SPH}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            label=\"مبلغ قابل پرداخت\"\r\n                            name=\"totalLog\"\r\n                            value={detail.totalLogPay}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            label=\"مجموع دریافتی\"\r\n                            name=\"totalLog\"\r\n                            value={detail.totalPay}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            label=\"خالص دریافتی\"\r\n                            name=\"totalLog\"\r\n                            value={detail.purePay}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid\r\n                          item\r\n                          xs={12}\r\n                          style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={onShowPayments}\r\n                            fullWidth\r\n                          >\r\n                            لیست پرداختی ها\r\n                          </Button>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={9}>\r\n                    <Paper className={classes.salaryPaperLeft}>\r\n                      <TableTop\r\n                        title={getTitle()}\r\n                        FilterComponent={\r\n                          <FilterComponent onFilter={onFilter} />\r\n                        }\r\n                      />\r\n                      <TableContainer style={{ padding: \"0 10px\" }}>\r\n                        <Table\r\n                          className={classes.table}\r\n                          size={\"medium\"}\r\n                          style={{ paddingRight: 10 }}\r\n                        >\r\n                          <TableHeader\r\n                            classes={classes}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={list.length}\r\n                            headCells={headCells}\r\n                          />\r\n\r\n                          <TableBody>\r\n                            {list.map((row) => {\r\n                              return (\r\n                                <TableRow\r\n                                  hover\r\n                                  tabIndex={-1}\r\n                                  key={row.id}\r\n                                  style={{ paddingRight: 10 }}\r\n                                >\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.firstName}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.firstName}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.firstName}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.firstName}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.lastName}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.mobile}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    <Chip\r\n                                      label={\r\n                                        Constant.TRAFFIC_STATUS[row.status]\r\n                                      }\r\n                                      className={clsx(\r\n                                        classes.status,\r\n                                        classes[row.status],\r\n                                      )}\r\n                                    />\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              );\r\n                            })}\r\n                            {!list.length && !getEmployeeRequest.pending && (\r\n                              <TableRow style={{ height: 53 }}>\r\n                                <TableCell\r\n                                  colSpan={6}\r\n                                  style={{ textAlign: \"center\" }}\r\n                                >\r\n                                  <Typography variant=\"h6\">\r\n                                    داده ای برای نمایش وجود ندارد\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                      <TablePaging\r\n                        count={list.length}\r\n                        handleChangePage={handleChangePage}\r\n                        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        page={page}\r\n                        rowsPerPage={pageSize}\r\n                      />\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} className={classes.salary}>\r\n                  <Grid item xs={3}>\r\n                    <Paper className={classes.salaryPaperRight}>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"مبلغ\"\r\n                            name=\"price\"\r\n                            onChange={(e) => onChange(e, \"price\")}\r\n                            value={price}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            rows={3}\r\n                            multiline\r\n                            variant=\"outlined\"\r\n                            label=\"بابت\"\r\n                            name=\"description\"\r\n                            onChange={(e) => onChange(e, \"description\")}\r\n                            value={description}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-between\",\r\n                          marginTop: 10,\r\n                          flexDirection: \"column\",\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={onSubmitNewPayment}\r\n                          fullWidth\r\n                        >\r\n                          پرداخت\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"Secondary\"\r\n                          onClick={onReject}\r\n                          style={{ marginTop: 10 }}\r\n                          fullWidth\r\n                        >\r\n                          بازگشت\r\n                        </Button>\r\n                      </Grid>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\detail.js",["607","608"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  IconButton,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { DeleteIcon, EditIcon } from \"../../components/icons\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport Account from \"./account\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"Name\",\r\n    label: \"نام بانک\",\r\n  },\r\n  { id: \"accountNumber\", label: \"شماره حساب \" },\r\n  {\r\n    id: \"CardNumber\",\r\n    label: \"شماره کارت\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  const [driverCategory, setDriverCategory] = useState(1);\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addDriverRequest = useApi({\r\n    method: \"post\",\r\n    url: `driver`,\r\n  });\r\n  const editDriverRequest = useApi({\r\n    method: \"put\",\r\n    url: `driver/${id}`,\r\n  });\r\n  const detailDriverRequest = useApi({\r\n    method: \"get\",\r\n    url: `driver/${id}`,\r\n  });\r\n\r\n  const driverCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `driver/category`,\r\n  });\r\n\r\n  const deleteAccountRequest = useApi({\r\n    method: \"delete\",\r\n    url: `account`,\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    const newAccounts = [];\r\n    accounts.map((item) => {\r\n      const newData = {\r\n        bankId: item.bank.value,\r\n        accountCardNumber: item.accountCardNumber,\r\n        accountNumber: item.accountNumber,\r\n        accountShaba: item.accountShaba,\r\n        description: item.description,\r\n      };\r\n      newAccounts.push(newData);\r\n    });\r\n\r\n    const allData = {\r\n      ...data,\r\n      accounts: newAccounts,\r\n      categoryId: driverCategory,\r\n    };\r\n    if (id) {\r\n      return await editDriverRequest.execute(allData);\r\n    }\r\n    await addDriverRequest.execute(allData);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/driver-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailDriverRequest.execute();\r\n    setDetail(detail.data);\r\n    setDriverCategory(detail.data.driverCategory);\r\n    setAccounts(detail.data?.accounts || []);\r\n  };\r\n\r\n  const getDriverCategory = async () => {\r\n    const detail = await driverCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  const onSubmitAccount = (data) => {\r\n    if (data.isUpdate) {\r\n      const index = accounts.findIndex((item) => item.id === data.id);\r\n      const accounstTmp = [...accounts];\r\n      accounstTmp[index] = data;\r\n      setAccounts(accounstTmp);\r\n    } else {\r\n      setAccounts([...accounts, data]);\r\n    }\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onDismissAccount = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onShowDialog = (data) => {\r\n    DialogActions.show({\r\n      title: \" حساب بانکی\",\r\n      component: (\r\n        <Account\r\n          onSubmit={onSubmitAccount}\r\n          onDismiss={onDismissAccount}\r\n          defaultValues={data}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const onAddAccount = () => {\r\n    onShowDialog();\r\n  };\r\n\r\n  const handleEditAccount = (data) => {\r\n    onShowDialog(data);\r\n  };\r\n\r\n  const handleDeleteAccount = (id) => {\r\n    DialogActions.show({\r\n      confirm: true,\r\n      title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n      onAction: async () => {\r\n        await deleteAccountRequest.execute(null, id);\r\n        setAccounts(accounts.filter((item) => item.id !== id));\r\n        DialogActions.hide();\r\n      },\r\n      size: \"sm\",\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setDriverCategory(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDriverCategory();\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {!detailDriverRequest.pending ? (\r\n          <Grid item lg={6} sm={12} className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n              <Typography\r\n                className={classes.title}\r\n                variant=\"h6\"\r\n                id=\"tableTitle\"\r\n                component=\"div\"\r\n              >\r\n                {id ? \"ویرایش راننده\" : \"افزودن راننده\"}\r\n              </Typography>\r\n\r\n              <Grid container spacing={3}>\r\n                <Fragment>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.firstName}\r\n                            helperText={\r\n                              errors.firstName ? errors.firstName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"firstName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام خانوادگی\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.lastName}\r\n                            helperText={\r\n                              errors.lastName ? errors.lastName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"lastName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"تلفن\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.phone}\r\n                            helperText={\r\n                              errors.phone ? errors.phone.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"phone\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"موبایل\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.mobile}\r\n                            helperText={\r\n                              errors.mobile ? errors.mobile.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{\r\n                        minLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                        maxLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                      }}\r\n                      name=\"mobile\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"مانده از قبل\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.accountRemaining}\r\n                            helperText={\r\n                              errors.accountRemaining\r\n                                ? errors.accountRemaining.message\r\n                                : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"accountRemaining\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    {!!category.length && driverCategory && (\r\n                      <TextField\r\n                        select\r\n                        label=\"دسته بندی\"\r\n                        value={driverCategory}\r\n                        onChange={onChangeCategory}\r\n                        variant=\"outlined\"\r\n                        error={!!errors.driverCategory}\r\n                        helperText={\r\n                          errors.driverCategory\r\n                            ? errors.driverCategory.message\r\n                            : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      >\r\n                        {category.map((option) => (\r\n                          <MenuItem key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام خودرو\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.carName}\r\n                            helperText={\r\n                              errors.carName ? errors.carName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"carName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"پلاک خودرو\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.carPlaque}\r\n                            helperText={\r\n                              errors.carPlaque ? errors.carPlaque.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"carPlaque\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={onAddAccount}\r\n                    >\r\n                      افزودن حساب بانکی\r\n                    </Button>\r\n                  </Grid>\r\n                  {!!accounts.length && (\r\n                    <Grid item xs={12}>\r\n                      <Paper>\r\n                        <TableContainer style={{ padding: \"0 10px\" }}>\r\n                          <Table\r\n                            className={classes.table}\r\n                            size={\"medium\"}\r\n                            style={{ paddingRight: 10 }}\r\n                          >\r\n                            <TableHeader headCells={headCells} />\r\n\r\n                            <TableBody>\r\n                              {accounts.map((row) => {\r\n                                return (\r\n                                  <TableRow\r\n                                    hover\r\n                                    tabIndex={-1}\r\n                                    key={row.id}\r\n                                    style={{ paddingRight: 10 }}\r\n                                  >\r\n                                    <TableCell padding=\"none\">\r\n                                      <div\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          alignItems: \"center\",\r\n                                        }}\r\n                                      >\r\n                                        <img\r\n                                          src={`${Constant.API_ADDRESS}/${row.bank.logo}`}\r\n                                          alt={row.bank.label}\r\n                                          style={{\r\n                                            width: 25,\r\n                                            height: 25,\r\n                                            borderRadius: \"50%\",\r\n                                            marginLeft: 5,\r\n                                          }}\r\n                                        />\r\n                                        {row.bank.name || row.bank.label}\r\n                                      </div>\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                      {row.accountNumber}\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                      {row.accountCardNumber}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell\r\n                                      padding=\"none\"\r\n                                      style={{ textAlign: \"left\" }}\r\n                                    >\r\n                                      <IconButton\r\n                                        onClick={() => handleEditAccount(row)}\r\n                                      >\r\n                                        <EditIcon />\r\n                                      </IconButton>\r\n\r\n                                      <IconButton\r\n                                        onClick={() =>\r\n                                          handleDeleteAccount(row.id)\r\n                                        }\r\n                                      >\r\n                                        <DeleteIcon />\r\n                                      </IconButton>\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                );\r\n                              })}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </Paper>\r\n                    </Grid>\r\n                  )}\r\n\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"آدرس\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.address}\r\n                            helperText={\r\n                              errors.address ? errors.address.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"address\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            label=\"توضیحات\"\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            fullWidth\r\n                            error={!!errors.description}\r\n                            helperText={\r\n                              errors.description\r\n                                ? errors.description.message\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"description\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                      تایید\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={onReject}\r\n                    >\r\n                      بازگشت\r\n                    </Button>\r\n                  </Grid>\r\n                </Fragment>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\unitReducer.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\dialogReducer.js",["609"],"import Constant from \"../../helpers/constant\";\r\nconst initialState = {\r\n  show: false,\r\n  component: null,\r\n  title: \"\",\r\n  size: \"md\",\r\n  disableCloseButton: false,\r\n  confirm: false,\r\n  onAction: () => {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Constant.ACTION_TYPES.SHOW_DIALOG: {\r\n      return {\r\n        ...state,\r\n        ...action.option,\r\n        show: true,\r\n      };\r\n    }\r\n    case Constant.ACTION_TYPES.HIDE_DIALOG: {\r\n      return {\r\n        ...state,\r\n        show: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\AlertReducer.js",["610"],"import Constant from \"../../helpers/constant\";\r\n\r\nconst initialState = {\r\n  show: false,\r\n  text: \"\",\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Constant.ACTION_TYPES.SHOW_ALERT: {\r\n      return {\r\n        ...state,\r\n        ...action.option,\r\n        show: true,\r\n      };\r\n    }\r\n    case Constant.ACTION_TYPES.HIDE_ALERT: {\r\n      return {\r\n        ...state,\r\n        show: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\traffic\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\index.js",["611","612"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Detail from \"./detail\";\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [customerCategory, setCustomerCategory] = useState([]);\r\n  const [depotCategory, setDepotCategory] = useState([]);\r\n  const [productCategory, setProductCategory] = useState([]);\r\n  const [invoiceCategory, setInvoiceCategory] = useState([]);\r\n  const [driverCategory, setDriverCategory] = useState([]);\r\n  const [action, setAction] = useState();\r\n  const [selectedCategory, setSelectedCategory] = useState({\r\n    value: \"\",\r\n    label: \"\",\r\n  });\r\n  const [selectedType, setSelectedType] = useState();\r\n\r\n  const GetCustomerCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: \"customer/category\",\r\n  });\r\n\r\n  const EditCustomerCategoryRequest = useApi({\r\n    method: \"put\",\r\n    url: `customer/category/${selectedCategory.value}`,\r\n  });\r\n\r\n  const AddCustomerCategoryRequest = useApi({\r\n    method: \"post\",\r\n    url: \"customer/category\",\r\n  });\r\n\r\n  const GetProductCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: \"product/category\",\r\n  });\r\n\r\n  const EditProductCategoryRequest = useApi({\r\n    method: \"put\",\r\n    url: `product/category/${selectedCategory.value}`,\r\n  });\r\n\r\n  const AddProductCategoryRequest = useApi({\r\n    method: \"post\",\r\n    url: \"product/category\",\r\n  });\r\n\r\n  const GetDepotCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: \"depot/category\",\r\n  });\r\n\r\n  const EditDepotCategoryRequest = useApi({\r\n    method: \"put\",\r\n    url: `depot/category/${selectedCategory.value}`,\r\n  });\r\n\r\n  const AddDepotCategoryRequest = useApi({\r\n    method: \"post\",\r\n    url: \"depot/category\",\r\n  });\r\n\r\n  const GetInvoiceCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: \"invoice/category\",\r\n  });\r\n\r\n  const EditInvoiceCategoryRequest = useApi({\r\n    method: \"put\",\r\n    url: `invoice/category/${selectedCategory.value}`,\r\n  });\r\n\r\n  const AddInvoiceCategoryRequest = useApi({\r\n    method: \"post\",\r\n    url: \"invoice/category\",\r\n  });\r\n\r\n  const GetDriverCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: \"driver/category\",\r\n  });\r\n\r\n  const EditDriverCategoryRequest = useApi({\r\n    method: \"put\",\r\n    url: `driver/category/${selectedCategory.value}`,\r\n  });\r\n\r\n  const AddDriverCategoryRequest = useApi({\r\n    method: \"post\",\r\n    url: \"driver/category\",\r\n  });\r\n\r\n  const onAction = ({ name, value }) => {\r\n    debugger;\r\n    const types = {\r\n      customer: async () => {\r\n        if (action === \"edit\") {\r\n          await EditCustomerCategoryRequest.execute({\r\n            name,\r\n          });\r\n        } else {\r\n          await AddCustomerCategoryRequest.execute({ name });\r\n        }\r\n        getCustomerCategory();\r\n      },\r\n      depot: async () => {\r\n        if (action === \"edit\") {\r\n          await EditDepotCategoryRequest.execute({\r\n            name,\r\n          });\r\n        } else {\r\n          await AddDepotCategoryRequest.execute({ name });\r\n        }\r\n        getDepotCategory();\r\n      },\r\n      product: async () => {\r\n        if (action === \"edit\") {\r\n          await EditProductCategoryRequest.execute({\r\n            name,\r\n          });\r\n        } else {\r\n          await AddProductCategoryRequest.execute({ name });\r\n        }\r\n        getProductCategory();\r\n      },\r\n      invoice: async () => {\r\n        if (action === \"edit\") {\r\n          await EditInvoiceCategoryRequest.execute({\r\n            name,\r\n          });\r\n        } else {\r\n          await AddInvoiceCategoryRequest.execute({ name });\r\n        }\r\n        getInvoiceCategory();\r\n      },\r\n      driver: async () => {\r\n        if (action === \"edit\") {\r\n          await EditDriverCategoryRequest.execute({\r\n            name,\r\n          });\r\n        } else {\r\n          await AddDriverCategoryRequest.execute({ name });\r\n        }\r\n        getDriverCategory();\r\n      },\r\n    };\r\n    if (types[selectedType]) {\r\n      onDismiss();\r\n      return types[selectedType]();\r\n    }\r\n  };\r\n\r\n  const handleAdd = (type) => {\r\n    setAction(\"add\");\r\n    setSelectedType(type);\r\n  };\r\n\r\n  const handleAction = (type, item) => {\r\n    setAction(\"edit\");\r\n    setSelectedType(type);\r\n    setSelectedCategory(item);\r\n  };\r\n\r\n  const onDismiss = () => {\r\n    DialogActions.hide();\r\n    setAction();\r\n  };\r\n\r\n  const showEditModal = () => {\r\n    DialogActions.show({\r\n      title: \" دسته بندی\",\r\n      component: (\r\n        <Detail\r\n          onSubmit={onAction}\r\n          onDismiss={onDismiss}\r\n          defaultValue={selectedCategory}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const getCustomerCategory = async () => {\r\n    const customerCategoryList = await GetCustomerCategoryRequest.execute();\r\n    setCustomerCategory(customerCategoryList.data);\r\n  };\r\n\r\n  const getDepotCategory = async () => {\r\n    const depotCategoryList = await GetDepotCategoryRequest.execute();\r\n    setDepotCategory(depotCategoryList.data);\r\n  };\r\n\r\n  const getProductCategory = async () => {\r\n    const productCategoryList = await GetProductCategoryRequest.execute();\r\n    setProductCategory(productCategoryList.data);\r\n  };\r\n\r\n  const getInvoiceCategory = async () => {\r\n    const invoiceCategoryList = await GetInvoiceCategoryRequest.execute();\r\n    setInvoiceCategory(invoiceCategoryList.data);\r\n  };\r\n\r\n  const getDriverCategory = async () => {\r\n    const driverCategoryList = await GetDriverCategoryRequest.execute();\r\n    setDriverCategory(driverCategoryList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomerCategory();\r\n    getDepotCategory();\r\n    getProductCategory();\r\n    getInvoiceCategory();\r\n    getDriverCategory();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (action) {\r\n      showEditModal();\r\n    }\r\n  }, [action]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableTop\r\n          title=\"دسته بندی مشتریان\"\r\n          onAdd={() => handleAdd(\"customer\")}\r\n          toolbarClass={classes.toolbar}\r\n          addButtonClass={classes.addButton}\r\n          minimal\r\n        />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableBody>\r\n              {customerCategory.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    style={{ paddingRight: 10 }}\r\n                  >\r\n                    <TableCell padding=\"none\">{row.label}</TableCell>\r\n\r\n                    <TableCell padding=\"none\" style={{ textAlign: \"left\" }}>\r\n                      <IconButton onClick={() => handleAction(\"customer\", row)}>\r\n                        <i className=\"material-icons-round\">edit</i>\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              {!customerCategory.length && !getCustomerCategory.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n      <Paper className={classes.paper}>\r\n        <TableTop\r\n          title=\"دسته بندی انبار\"\r\n          onAdd={() => handleAdd(\"depot\")}\r\n          toolbarClass={classes.toolbar}\r\n          addButtonClass={classes.addButton}\r\n          minimal\r\n        />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableBody>\r\n              {depotCategory.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    style={{ paddingRight: 10 }}\r\n                  >\r\n                    <TableCell padding=\"none\">{row.label}</TableCell>\r\n\r\n                    <TableCell padding=\"none\" style={{ textAlign: \"left\" }}>\r\n                      <IconButton onClick={() => handleAction(\"depot\", row)}>\r\n                        <i className=\"material-icons-round\">edit</i>\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              {!depotCategory.length && !getDepotCategory.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n      <Paper className={classes.paper}>\r\n        <TableTop\r\n          title=\"دسته بندی کالاها\"\r\n          onAdd={() => handleAdd(\"product\")}\r\n          toolbarClass={classes.toolbar}\r\n          addButtonClass={classes.addButton}\r\n          minimal\r\n        />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableBody>\r\n              {productCategory.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    style={{ paddingRight: 10 }}\r\n                  >\r\n                    <TableCell padding=\"none\">{row.label}</TableCell>\r\n\r\n                    <TableCell padding=\"none\" style={{ textAlign: \"left\" }}>\r\n                      <IconButton onClick={() => handleAction(\"product\", row)}>\r\n                        <i className=\"material-icons-round\">edit</i>\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              {!productCategory.length && !getProductCategory.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n      <Paper className={classes.paper}>\r\n        <TableTop\r\n          title=\"دسته بندی فاکتور ها\"\r\n          onAdd={() => handleAdd(\"invoice\")}\r\n          toolbarClass={classes.toolbar}\r\n          addButtonClass={classes.addButton}\r\n          minimal\r\n        />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableBody>\r\n              {invoiceCategory.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    style={{ paddingRight: 10 }}\r\n                  >\r\n                    <TableCell padding=\"none\">{row.label}</TableCell>\r\n\r\n                    <TableCell padding=\"none\" style={{ textAlign: \"left\" }}>\r\n                      <IconButton onClick={() => handleAction(\"invoice\", row)}>\r\n                        <i className=\"material-icons-round\">edit</i>\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              {!invoiceCategory.length && !getInvoiceCategory.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n      <Paper className={classes.paper}>\r\n        <TableTop\r\n          title=\"دسته بندی رانندگان ها\"\r\n          onAdd={() => handleAdd(\"driver\")}\r\n          toolbarClass={classes.toolbar}\r\n          addButtonClass={classes.addButton}\r\n          minimal\r\n        />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableBody>\r\n              {driverCategory.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    style={{ paddingRight: 10 }}\r\n                  >\r\n                    <TableCell padding=\"none\">{row.label}</TableCell>\r\n\r\n                    <TableCell padding=\"none\" style={{ textAlign: \"left\" }}>\r\n                      <IconButton onClick={() => handleAction(\"driver\", row)}>\r\n                        <i className=\"material-icons-round\">edit</i>\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              {!driverCategory.length && !getDriverCategory.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\transaction.js",["613","614","615","616","617"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  convertParamsToQueryString,\r\n  persianNumber,\r\n  hasPermission,\r\n} from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"date\",\r\n    label: \"تاریخ\",\r\n  },\r\n  { id: \"price\", label: \"مبلغ\" },\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع\",\r\n  },\r\n  {\r\n    id: \"Desc\",\r\n    label: \"بابت\",\r\n  },\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const customerId = getQueryString(\"id\");\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"date\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getPaymentRequest = useApi({\r\n    method: \"get\",\r\n    url: `payment/person/customer?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `payment`,\r\n  });\r\n\r\n  const handleAction = (row, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/payment-detail?type=${row.type}&id=${row.id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, row.id);\r\n            setList(list.filter((item) => item.id !== row.id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getTableTitle = () => {\r\n    if (list.length)\r\n      return (\r\n        <div>\r\n          لیست تراکنش های <b style={{ fontWeight: \"bold\" }}>{list[0].person}</b>\r\n        </div>\r\n      );\r\n  };\r\n\r\n  const getData = async () => {\r\n    const list = await getPaymentRequest.execute(null, customerId);\r\n    setList(list.data);\r\n    setTotal(list.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.PAYMENT_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getPaymentRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop title={getTableTitle()} handleSearch={onSearch} />\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{\r\n                                paddingRight: 10,\r\n                                backgroundColor:\r\n                                  row.type === \"OUTCOME\"\r\n                                    ? \"#ffe8e8\"\r\n                                    : \"#b1eed9\",\r\n                              }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  new Date(row.date).toLocaleDateString(\r\n                                    \"fa-IR\",\r\n                                  ),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  Number(row.price).toLocaleString(),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {Constant.PAYMENT_TYPE[row.type]}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                {row.description}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getPaymentRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\dialogAction.jsx",["618"],"import Constant from \"../../helpers/constant\";\r\nimport store from \"../store\";\r\n\r\nexport default {\r\n  show(option) {\r\n    store.dispatch({ type: Constant.ACTION_TYPES.SHOW_DIALOG, option });\r\n  },\r\n\r\n  hide() {\r\n    store.dispatch({ type: Constant.ACTION_TYPES.HIDE_DIALOG });\r\n  },\r\n};\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\list.js",["619","620","621"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  convertParamsToQueryString,\r\n  hasPermission,\r\n  persianNumber,\r\n} from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport Detail from \"./detail\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام شخص\",\r\n  },\r\n  {\r\n    id: \"Date\",\r\n    label: \"تاریخ\",\r\n  },\r\n  {\r\n    id: \"price\",\r\n    label: \"مانده وام\",\r\n  },\r\n  { id: \"personType\", label: \"نوع شخص\" },\r\n  { id: \"action\" },\r\n];\r\nconst PERSON_TYPE = {\r\n  EMPLOYEE: \"پرسنل\",\r\n  CUSTOMER: \"مشتری\",\r\n  DRIVER: \"راننده\",\r\n};\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"date\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(`/app/payment-detail?type=OUTCOME&loan=true`);\r\n  };\r\n\r\n  const getLoanRequest = useApi({\r\n    method: \"get\",\r\n    url: `loan?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const onDismissDetail = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const handleDetail = (row) => {\r\n    // DialogActions.show({\r\n    //   title: `حساب های ${row.personName}`,\r\n    //   component: <Detail onDismiss={onDismissDetail} detail={row} />,\r\n    //   size: \"sm\",\r\n    //   confirm: false,\r\n    //   disableCloseButton: false,\r\n    // });\r\n  };\r\n\r\n  const getData = async () => {\r\n    const cardList = await getLoanRequest.execute();\r\n    setList(cardList.data);\r\n    setTotal(cardList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getLoanRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست وام ها\"\r\n                    onAdd={onAdd}\r\n                    handleSearch={onSearch}\r\n                  />\r\n\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {row.personName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  new Date(row.date).toLocaleDateString(\r\n                                    \"fa-IR\",\r\n                                  ),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  Number(row.price).toLocaleString(),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {PERSON_TYPE[row.personType]}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <i\r\n                                  className=\"material-icons-round\"\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  onClick={() => handleDetail(row)}\r\n                                >\r\n                                  link\r\n                                </i>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getLoanRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Skeleton\\index.js",["622","623","624","625","626","627"],"import React from \"react\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { getRandomNumber } from \"../../helpers/utils\";\r\n\r\nexport default function CustomSkeleton({ headCount }) {\r\n  return (\r\n    <Paper style={{ padding: 10 }}>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          padding: \"20px 0\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Grid item style={{ width: `20%` }}>\r\n          <Skeleton variant=\"rect\" />\r\n        </Grid>\r\n        <Grid item style={{ width: `15%` }}>\r\n          <Skeleton variant=\"rect\" />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ width: \"100%\", display: \"flex\", padding: \"20px 0\" }}\r\n      >\r\n        {headCount.map((item) => {\r\n          return (\r\n            <Grid item style={{ width: `${100 / headCount.length}%` }}>\r\n              <Skeleton variant=\"text\" />\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n      <Divider />\r\n      <div>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ width: \"100%\", display: \"flex\", padding: \"10px 0\" }}\r\n        >\r\n          {headCount.map((item) => {\r\n            return (\r\n              <Grid item style={{ width: `${100 / headCount.length}%` }}>\r\n                <Skeleton\r\n                  variant=\"text\"\r\n                  width={`${getRandomNumber(60, 100)}%`}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n        <Divider />\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ width: \"100%\", display: \"flex\", padding: \"10px 0\" }}\r\n        >\r\n          {headCount.map((item) => {\r\n            return (\r\n              <Grid item style={{ width: `${100 / headCount.length}%` }}>\r\n                <Skeleton\r\n                  variant=\"text\"\r\n                  width={`${getRandomNumber(60, 100)}%`}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n        <Divider />\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ width: \"100%\", display: \"flex\", padding: \"10px 0\" }}\r\n        >\r\n          {headCount.map((item) => {\r\n            return (\r\n              <Grid item style={{ width: `${100 / headCount.length}%` }}>\r\n                <Skeleton\r\n                  variant=\"text\"\r\n                  width={`${getRandomNumber(60, 100)}%`}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n        <Divider />\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ width: \"100%\", display: \"flex\", padding: \"10px 0\" }}\r\n        >\r\n          {headCount.map((item) => {\r\n            return (\r\n              <Grid item style={{ width: `${100 / headCount.length}%` }}>\r\n                <Skeleton\r\n                  variant=\"text\"\r\n                  width={`${getRandomNumber(60, 100)}%`}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </div>\r\n      <Divider />\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ width: \"100%\", display: \"flex\", padding: \"20px 0\" }}\r\n      >\r\n        <Grid item style={{ width: `10%` }}>\r\n          <Skeleton variant=\"rect\" />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\list.js",["628"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\nconst headCells = [\r\n  {\r\n    id: \"username\",\r\n    label: \"نام کاربری\",\r\n  },\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"mobile\",\r\n    label: \"موبایل\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList() {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"username\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(5);\r\n  const [list, setList] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/user-detail\");\r\n  };\r\n\r\n  const getUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `user`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/user-detail?id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const userList = await getUserRequest.execute();\r\n    setList(userList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableTop title=\"لیست کاربران\" onAdd={onAdd} />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableHeader\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={list.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {stableSort(list, getComparator(order, orderBy))\r\n                .slice(page * pageSize, page * pageSize + pageSize)\r\n                .map((row) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableCell padding=\"none\">{row.username}</TableCell>\r\n                      <TableCell padding=\"none\">{row.firstName}</TableCell>\r\n                      <TableCell padding=\"none\">{row.lastName}</TableCell>\r\n                      <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                      <TableCell padding=\"none\">{row.phone}</TableCell>\r\n\r\n                      <TableCell padding=\"none\">\r\n                        <TableRowMenu\r\n                          options={[\r\n                            { id: \"delete\", title: \"حذف\" },\r\n                            { id: \"edit\", title: \"ویرایش\" },\r\n                          ]}\r\n                          hadleAction={(type) => handleAction(row.id, type)}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {!list.length && !getUserRequest.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePaging\r\n          count={list.length}\r\n          handleChangePage={handleChangePage}\r\n          handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n          page={page}\r\n          rowsPerPage={pageSize}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\utils.js",["629"],"import pickBy from \"lodash/pickBy\";\r\nimport identity from \"lodash/identity\";\r\nimport queryString from \"query-string\";\r\nimport storageService from \"../services/storage\";\r\nimport Constant from \"./constant\";\r\nimport defaultTheme from \"../themes/default\";\r\nimport {\r\n  primary,\r\n  secondary,\r\n  success,\r\n  warning,\r\n  info,\r\n  gray,\r\n  purple,\r\n  orange,\r\n} from \"../themes/default\";\r\nimport { number } from \"yup\";\r\n\r\nexport const convertParamsToQueryString = (params) => {\r\n  return new URLSearchParams(pickBy(params, identity)).toString();\r\n};\r\n\r\nexport const getQueryString = (param) => {\r\n  return queryString.parse(window.location.search)[param];\r\n};\r\n\r\nexport const getRandomColor = () => {\r\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\r\n};\r\n\r\nexport const getRandomColorFromTheme = () => {\r\n  const colors = [\r\n    primary,\r\n    secondary,\r\n    success,\r\n    warning,\r\n    orange,\r\n    purple,\r\n    info,\r\n    gray,\r\n  ];\r\n  var color = colors[Math.floor(Math.random() * colors.length)];\r\n\r\n  return color;\r\n};\r\n\r\nexport const getRandomNumber = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport const persianNumber = (en) => {\r\n  if ((en || en === 0) && typeof en !== number) {\r\n    return (\"\" + en).replace(/[0-9]/g, function (t) {\r\n      return \"۰۱۲۳۴۵۶۷۸۹\".substr(+t, 1);\r\n    });\r\n  }\r\n};\r\n\r\nexport const getDayOfWeek = (date) => {\r\n  const days = [\r\n    \"یکشنبه\",\r\n    \"دوشنبه\",\r\n    \"سه شنبه\",\r\n    \"چهارشنبه\",\r\n    \"پنج شنبه\",\r\n    \"جمعه\",\r\n    \"شنبه\",\r\n  ];\r\n  return days[date.getDay()];\r\n};\r\n\r\nexport const hasPermission = (permit) => {\r\n  if (permit === Constant.ALL_PERMISSIONS.FREE) {\r\n    return true;\r\n  }\r\n  const { permissions } = JSON.parse(\r\n    storageService.getItem(Constant.STORAGE.CURRENT_USER),\r\n  );\r\n  return permissions.includes(permit);\r\n};\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\hooks\\useApi.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableHead.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TablePaging.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableTop.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableRowMenu.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\detail.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\loan\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\configs\\axios.js",["630","631"],"import axios from \"axios\";\r\nimport { cacheAdapterEnhancer } from \"axios-extensions\";\r\nimport constants from \"../helpers/constant\";\r\nimport storageService from \"../services/storage\";\r\nimport AlertAction from \"../redux/actions/AlertAction\";\r\n\r\nconst http = axios.create({\r\n  baseURL: constants.API_ADDRESS,\r\n  headers: {\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    \"Access-Control-Allow-Credentials\": \"true\",\r\n  },\r\n  // adapter: cacheAdapterEnhancer(axios.defaults.adapter),\r\n});\r\n\r\n// http.interceptors.request.use(\r\n//   async (config) => {\r\n//     // const accessToken = storageService.getItem(constants.ACCESS_TOKEN);\r\n//     // config.headers = {\r\n//     //   Authorization: `Bearer ${accessToken}`,\r\n//     //   \"Cache-Control\": \"no-cache\",\r\n//     //   Accept: \"application/json\",\r\n//     // };\r\n//     // return config;\r\n//   },\r\n//   (error) => {\r\n//     Promise.reject(error);\r\n//   },\r\n// );\r\n\r\nhttp.interceptors.response.use(\r\n  (result) => {\r\n    // Do something before request is sent\r\n    const { method, url } = result.config;\r\n    if (method !== \"get\") {\r\n      if (url !== \"user/login\") {\r\n        AlertAction.show({\r\n          type: \"success\",\r\n          text: \"اطلاعات با موفقیت ثبت شد\",\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n  async (error) => {\r\n    const { code } = error.response.data.error;\r\n    AlertAction.show({\r\n      type: \"error\",\r\n      text: constants.ERROR_MESSAGE[code],\r\n    });\r\n\r\n    // TODO : handle 4xx error here and calling refresh token\r\n    // const originalRequest = error.config;\r\n    // if (error.response.status === 403 && !originalRequest._retry) {\r\n    // const access_token = await refreshAccessToken();\r\n    // axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\r\n    // return axiosApiInstance(originalRequest);\r\n    // }\r\n\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\nexport default http;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\account.js",["632"],"import React, { useState, useEffect } from \"react\";\r\nimport { TextField, Button, Grid, MenuItem } from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport styles from \"./style\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst Account = ({ onSubmit, onDismiss, defaultValues }) => {\r\n  const [banks, setBanks] = useState([]);\r\n  const [selectedBank, setSelectedBank] = useState(\r\n    defaultValues?.bank.value || 1,\r\n  );\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const classes = styles();\r\n\r\n  const getBankRequest = useApi({\r\n    method: \"get\",\r\n    url: `bank`,\r\n  });\r\n\r\n  const getBanks = async () => {\r\n    const result = await getBankRequest.execute();\r\n    setBanks(result.data);\r\n  };\r\n\r\n  const getSelectedBank = () => {\r\n    return banks.find((item) => item.value === selectedBank);\r\n  };\r\n\r\n  const onDone = (data) => {\r\n    const newId = uuid();\r\n    const value = {\r\n      ...data,\r\n      bank: getSelectedBank(),\r\n      id: defaultValues ? defaultValues.id : newId,\r\n      isUpdate: !!defaultValues,\r\n    };\r\n    onSubmit(value);\r\n  };\r\n\r\n  const onChangeBank = (e) => {\r\n    setSelectedBank(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBanks();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(defaultValues);\r\n  }, [reset, defaultValues]);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          select\r\n          label=\"بانک\"\r\n          onChange={onChangeBank}\r\n          value={selectedBank}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          size=\"small\"\r\n          name=\"bank\"\r\n          SelectProps={{\r\n            classes: {\r\n              select: classes.rootSelect,\r\n            },\r\n          }}\r\n        >\r\n          {banks.map((option) => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              <img\r\n                src={`${Constant.API_ADDRESS}/${option.logo}`}\r\n                alt={option.label}\r\n                style={{\r\n                  width: 25,\r\n                  height: 25,\r\n                  borderRadius: \"50%\",\r\n                  marginLeft: 10,\r\n                }}\r\n              />\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value, name }) => {\r\n            return (\r\n              <TextField\r\n                fullWidth\r\n                value={value}\r\n                size=\"small\"\r\n                name={name}\r\n                label=\"شماره کارت\"\r\n                variant=\"outlined\"\r\n                onChange={onChange}\r\n                error={!!errors.accountCardNumber}\r\n                helperText={\r\n                  errors.accountCardNumber\r\n                    ? errors.accountCardNumber.message\r\n                    : \"\"\r\n                }\r\n              />\r\n            );\r\n          }}\r\n          rules={{\r\n            minLength: {\r\n              value: 16,\r\n              message: Constant.VALIDATION.CARD_NUMBER,\r\n            },\r\n            maxLength: {\r\n              value: 16,\r\n              message: Constant.VALIDATION.CARD_NUMBER,\r\n            },\r\n          }}\r\n          name=\"accountCardNumber\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value, name }) => {\r\n            return (\r\n              <TextField\r\n                fullWidth\r\n                value={value}\r\n                size=\"small\"\r\n                name={name}\r\n                label=\"شماره حساب\"\r\n                variant=\"outlined\"\r\n                onChange={onChange}\r\n                error={!!errors.accountNumber}\r\n                helperText={\r\n                  errors.accountNumber ? errors.accountNumber.message : \"\"\r\n                }\r\n              />\r\n            );\r\n          }}\r\n          name=\"accountNumber\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value, name }) => {\r\n            return (\r\n              <TextField\r\n                fullWidth\r\n                value={value}\r\n                size=\"small\"\r\n                name={name}\r\n                label=\"شماره شبا\"\r\n                variant=\"outlined\"\r\n                onChange={onChange}\r\n                error={!!errors.accountShaba}\r\n                helperText={\r\n                  errors.accountShaba ? errors.accountShaba.message : \"\"\r\n                }\r\n              />\r\n            );\r\n          }}\r\n          name=\"accountShaba\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value, name }) => {\r\n            return (\r\n              <TextField\r\n                label=\"توضیحات\"\r\n                multiline\r\n                rows={4}\r\n                variant=\"outlined\"\r\n                name={name}\r\n                onChange={onChange}\r\n                value={value}\r\n                fullWidth\r\n                error={!!errors.description}\r\n                helperText={\r\n                  errors.description ? errors.description.message : \"\"\r\n                }\r\n              />\r\n            );\r\n          }}\r\n          name=\"description\"\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          onClick={handleSubmit(onDone)}\r\n        >\r\n          تایید\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onDismiss}>\r\n          انصراف\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\logFilter.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\accountNumber\\detail.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\accountNumber\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\paymentDetail.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\CircularProgress\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\icons\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\detail.js",["633"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  RadioGroup,\r\n  Radio,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  rootSelect: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: 7,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail({ defaultValues }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [banks, setBanks] = useState([]);\r\n  const [selectedType, setSelectedType] = React.useState(\"CASH\");\r\n  const [selectedBank, setSelectedBank] = useState(\r\n    defaultValues?.bank.value || 1,\r\n  );\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addCashRequest = useApi({\r\n    method: \"post\",\r\n    url: `cashdesk`,\r\n  });\r\n  const editCashRequest = useApi({\r\n    method: \"put\",\r\n    url: `cashdesk/${id}`,\r\n  });\r\n  const detailCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `cashdesk/${id}`,\r\n  });\r\n  const getBankRequest = useApi({\r\n    method: \"get\",\r\n    url: `bank`,\r\n  });\r\n\r\n  const handleChangeType = (event) => {\r\n    setSelectedType(event.target.value);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    if (id) {\r\n      await editCashRequest.execute(data);\r\n    } else {\r\n      await addCashRequest.execute(data);\r\n    }\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/cash-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailCashRequest.execute();\r\n    setDetail(detail.data);\r\n    setSelectedBank(detail.data.bankId);\r\n    setSelectedType(detail.data.type);\r\n  };\r\n\r\n  const onChangeBank = (e) => {\r\n    setSelectedBank(e.target.value);\r\n  };\r\n\r\n  const getBanks = async () => {\r\n    const result = await getBankRequest.execute();\r\n    setBanks(result.data);\r\n  };\r\n\r\n  const onDone = (data) => {\r\n    const value = {\r\n      ...data,\r\n      bankId: selectedBank,\r\n      type: selectedType,\r\n      isUpdate: !!defaultValues,\r\n    };\r\n    onSubmit(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n    getBanks();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(detail);\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onDone)}>\r\n      {!detailCashRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش صندوق\" : \"افزودن صندوق\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={12} xs={12}>\r\n                  <RadioGroup\r\n                    aria-label=\"gender\"\r\n                    name=\"gender1\"\r\n                    value={selectedType}\r\n                    onChange={handleChangeType}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      justifyContent: \"space-around\",\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"CASH\"\r\n                      control={<Radio />}\r\n                      label=\"نقدی\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"BANK\"\r\n                      control={<Radio />}\r\n                      label=\"بانکی\"\r\n                    />\r\n                  </RadioGroup>\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.name}\r\n                          helperText={errors.name ? errors.name.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                        disabled={!!id}\r\n                          variant=\"outlined\"\r\n                          label=\"موجودی \"\r\n                          type=\"number\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.amount}\r\n                          helperText={\r\n                            errors.amount ? errors.amount.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"amount\"\r\n                  />\r\n                </Grid>\r\n                {selectedType === \"BANK\" && (\r\n                  <>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <TextField\r\n                        select\r\n                        label=\"بانک\"\r\n                        onChange={onChangeBank}\r\n                        value={selectedBank}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"bank\"\r\n                        SelectProps={{\r\n                          classes: {\r\n                            select: classes.rootSelect,\r\n                          },\r\n                        }}\r\n                      >\r\n                        {banks.map((option) => (\r\n                          <MenuItem key={option.value} value={option.value}>\r\n                            <img\r\n                              src={`${Constant.API_ADDRESS}/${option.logo}`}\r\n                              alt={option.label}\r\n                              style={{\r\n                                width: 25,\r\n                                height: 25,\r\n                                borderRadius: \"50%\",\r\n                                marginLeft: 10,\r\n                              }}\r\n                            />\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Grid>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <Controller\r\n                        control={control}\r\n                        render={({ onChange, value, name }) => {\r\n                          return (\r\n                            <TextField\r\n                              fullWidth\r\n                              value={value}\r\n                              size=\"small\"\r\n                              name={name}\r\n                              label=\"شماره کارت\"\r\n                              variant=\"outlined\"\r\n                              onChange={onChange}\r\n                              error={!!errors.accountCardNumber}\r\n                              helperText={\r\n                                errors.accountCardNumber\r\n                                  ? errors.accountCardNumber.message\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                          );\r\n                        }}\r\n                        rules={{\r\n                          minLength: {\r\n                            value: 16,\r\n                            message: Constant.VALIDATION.CARD_NUMBER,\r\n                          },\r\n                          maxLength: {\r\n                            value: 16,\r\n                            message: Constant.VALIDATION.CARD_NUMBER,\r\n                          },\r\n                        }}\r\n                        name=\"accountCardNumber\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <Controller\r\n                        control={control}\r\n                        render={({ onChange, value, name }) => {\r\n                          return (\r\n                            <TextField\r\n                              fullWidth\r\n                              value={value}\r\n                              size=\"small\"\r\n                              name={name}\r\n                              label=\"شماره حساب\"\r\n                              variant=\"outlined\"\r\n                              onChange={onChange}\r\n                              error={!!errors.accountNumber}\r\n                              helperText={\r\n                                errors.accountNumber\r\n                                  ? errors.accountNumber.message\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                          );\r\n                        }}\r\n                        name=\"accountNumber\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <Controller\r\n                        control={control}\r\n                        render={({ onChange, value, name }) => {\r\n                          return (\r\n                            <TextField\r\n                              fullWidth\r\n                              value={value}\r\n                              size=\"small\"\r\n                              name={name}\r\n                              label=\"شماره شبا\"\r\n                              variant=\"outlined\"\r\n                              onChange={onChange}\r\n                              error={!!errors.accountShaba}\r\n                              helperText={\r\n                                errors.accountShaba\r\n                                  ? errors.accountShaba.message\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                          );\r\n                        }}\r\n                        name=\"accountShaba\"\r\n                      />\r\n                    </Grid>\r\n                  </>\r\n                )}\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          multiline\r\n                          variant=\"outlined\"\r\n                          label=\"توضیحات\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.description}\r\n                          helperText={\r\n                            errors.description ? errors.description.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"description\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\detail.js",["634"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [category, setCategory] = useState([]);\r\n  const [depotCategory, setDepotCategory] = useState(1);\r\n\r\n  const addDepotRequest = useApi({\r\n    method: \"post\",\r\n    url: `depot`,\r\n  });\r\n  const editDepotRequest = useApi({\r\n    method: \"put\",\r\n    url: `depot/${id}`,\r\n  });\r\n  const detailDepotRequest = useApi({\r\n    method: \"get\",\r\n    url: `depot/${id}`,\r\n  });\r\n  const depotCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `depot/category`,\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    const value = { ...data, depotCategoryId: depotCategory };\r\n\r\n    if (id) {\r\n      return await editDepotRequest.execute(value);\r\n    }\r\n    await addDepotRequest.execute(value);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/depot-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailDepotRequest.execute();\r\n    setDetail(detail.data);\r\n    setDepotCategory(detail.data.depotCategory);\r\n  };\r\n\r\n  const getDepotCategory = async () => {\r\n    const detail = await depotCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setDepotCategory(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDepotCategory();\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailDepotRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش انبار\" : \"افزودن انبار\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.name}\r\n                          helperText={errors.name ? errors.name.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"name\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item lg={6} xs={12}>\r\n                  {!!category.length && depotCategory && (\r\n                    <TextField\r\n                      select\r\n                      label=\"دسته بندی\"\r\n                      value={depotCategory}\r\n                      onChange={onChangeCategory}\r\n                      variant=\"outlined\"\r\n                      error={!!errors.depotCategory}\r\n                      helperText={\r\n                        errors.depotCategory ? errors.depotCategory.message : \"\"\r\n                      }\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    >\r\n                      {category.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n                </Grid>\r\n\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"تلفن\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.phone}\r\n                          helperText={errors.phone ? errors.phone.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"phone\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"آدرس\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.address}\r\n                          helperText={\r\n                            errors.address ? errors.address.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"address\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\detail.js",["635","636"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  IconButton,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { DeleteIcon, EditIcon } from \"../../components/icons\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString, persianNumber } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport Amount from \"./amount\";\r\nimport unitAction from \"../../redux/actions/unitAction\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  deleteIcon: {\r\n    color: theme.palette.error.main,\r\n  },\r\n  formControl: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"amount\",\r\n    label: \"موجودی\",\r\n  },\r\n  { id: \"unit\", label: \"واحد\" },\r\n  {\r\n    id: \"depot\",\r\n    label: \"انبار\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [amounts, setAmounts] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  const [selectedUnit, setSelectedUnit] = useState(\"MASS\");\r\n  const [selectedCategory, setSelectedCategory] = useState([1]);\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const units = unitAction.getProductUnit();\r\n\r\n  const addProductRequest = useApi({\r\n    method: \"post\",\r\n    url: `product`,\r\n  });\r\n  const editProductRequest = useApi({\r\n    method: \"put\",\r\n    url: `product/${id}`,\r\n  });\r\n  const detailProductRequest = useApi({\r\n    method: \"get\",\r\n    url: `product/${id}`,\r\n  });\r\n  const getProductCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `product/category`,\r\n  });\r\n\r\n  const onSubmitAmount = (data) => {\r\n    if (data.isUpdate) {\r\n      const index = amounts.findIndex((item) => item.id === data.id);\r\n      const amountTmp = [...amounts];\r\n      amountTmp[index] = data;\r\n      setAmounts(amountTmp);\r\n    } else {\r\n      setAmounts([...amounts, data]);\r\n    }\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onDismissAmount = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onShowDialog = (data) => {\r\n    let units;\r\n    const allUnits = unitAction\r\n      .getProductUnit()\r\n      .filter((item) => item.value === selectedUnit)[0];\r\n    if (allUnits) {\r\n      units = allUnits.children;\r\n    }\r\n    DialogActions.show({\r\n      title: \"موجودی اول دوره\",\r\n      component: (\r\n        <Amount\r\n          onSubmit={onSubmitAmount}\r\n          onDismiss={onDismissAmount}\r\n          defaultValues={data}\r\n          units={units}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const onAddAmount = () => {\r\n    onShowDialog();\r\n  };\r\n\r\n  const filterAmounts = (amounts) => {\r\n    const filteredAmount = [];\r\n    amounts.map((item) => {\r\n      const newObject = {\r\n        stock: item.stock,\r\n        depotId: item.depot.value,\r\n        unit: item.unit.value,\r\n      };\r\n      filteredAmount.push(newObject);\r\n    });\r\n    return filteredAmount;\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    const result = {\r\n      ...data,\r\n      categories: selectedCategory,\r\n      unitBase: selectedUnit,\r\n      stocks: filterAmounts(amounts),\r\n    };\r\n    if (id) {\r\n      return await editProductRequest.execute(result);\r\n    }\r\n    await addProductRequest.execute(result);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/product-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailProductRequest.execute();\r\n    setDetail(detail.data);\r\n    setSelectedCategory(detail.data.categories);\r\n    setSelectedUnit(detail.data.unitBase);\r\n    setAmounts(detail.data.stocks);\r\n  };\r\n\r\n  const handleEditAmount = (data) => {\r\n    onShowDialog(data);\r\n  };\r\n\r\n  const handleDeleteAmount = (id) => {\r\n    console.log(amounts, id);\r\n    DialogActions.show({\r\n      confirm: true,\r\n      title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n      onAction: () => {\r\n        setAmounts(amounts.filter((item) => item.id !== id));\r\n        DialogActions.hide();\r\n      },\r\n      size: \"sm\",\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const getProductCategory = async () => {\r\n    const result = await getProductCategoryRequest.execute();\r\n    setCategory(result.data);\r\n  };\r\n\r\n  const onChangeUnit = (e) => {\r\n    setSelectedUnit(e.target.value);\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setSelectedCategory(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProductCategory();\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailProductRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش کالا\" : \"افزودن کالا\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3} alignItems=\"center\">\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12} className={classes.datePicker}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام \"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.name}\r\n                          helperText={errors.name ? errors.name.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <TextField\r\n                    disabled={id}\r\n                    select\r\n                    label=\"واحد شمارش\"\r\n                    value={selectedUnit}\r\n                    onChange={onChangeUnit}\r\n                    variant=\"outlined\"\r\n                    name=\"unitBase\"\r\n                    fullWidth\r\n                    size=\"small\"\r\n                  >\r\n                    {units.map((option) => (\r\n                      <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <FormControl\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <InputLabel htmlFor=\"outlined-age-native-simple\">\r\n                      دسته بندی\r\n                    </InputLabel>\r\n                    <Select\r\n                      multiple\r\n                      label=\"  دسته بندی\"\r\n                      inputProps={{\r\n                        name: \"age\",\r\n                        id: \"outlined-age-native-simple\",\r\n                      }}\r\n                      value={selectedCategory}\r\n                      onChange={onChangeCategory}\r\n                    >\r\n                      {category.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Button\r\n                    disabled={isEmpty(selectedUnit)}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onAddAmount}\r\n                  >\r\n                    افزودن موجودی اول دوره\r\n                  </Button>\r\n                </Grid>\r\n                {!!amounts.length && (\r\n                  <Grid item xs={12}>\r\n                    <Paper>\r\n                      <TableContainer style={{ padding: \"0 10px\" }}>\r\n                        <Table\r\n                          className={classes.table}\r\n                          size={\"medium\"}\r\n                          style={{ paddingRight: 10 }}\r\n                        >\r\n                          <TableHeader headCells={headCells} />\r\n\r\n                          <TableBody>\r\n                            {amounts.map((row) => {\r\n                              console.log(row);\r\n                              return (\r\n                                <TableRow\r\n                                  hover\r\n                                  tabIndex={-1}\r\n                                  key={row.id}\r\n                                  style={{ paddingRight: 10 }}\r\n                                >\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.perUnit\r\n                                      ? `${persianNumber(\r\n                                          row.stock,\r\n                                        )}*${persianNumber(row.perUnit)}`\r\n                                      : persianNumber(row.stock)}\r\n                                  </TableCell>\r\n\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.unit.label}\r\n                                  </TableCell>\r\n\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.depot.label}\r\n                                  </TableCell>\r\n                                  <TableCell\r\n                                    padding=\"none\"\r\n                                    style={{ textAlign: \"left\" }}\r\n                                  >\r\n                                    <IconButton\r\n                                      onClick={() => handleEditAmount(row)}\r\n                                    >\r\n                                      <EditIcon />\r\n                                    </IconButton>\r\n\r\n                                    <IconButton\r\n                                      onClick={() => handleDeleteAmount(row.id)}\r\n                                    >\r\n                                      <DeleteIcon />\r\n                                    </IconButton>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              );\r\n                            })}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                )}\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\detail.js",["637"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\detail.js",["638"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  RadioGroup,\r\n  Radio,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  rootSelect: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: 7,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail({ defaultValues }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [banks, setBanks] = useState([]);\r\n  const [selectedType, setSelectedType] = React.useState(\"CASH\");\r\n  const [selectedBank, setSelectedBank] = useState(\r\n    defaultValues?.bank.value || 1,\r\n  );\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addCashRequest = useApi({\r\n    method: \"post\",\r\n    url: `cashdesk`,\r\n  });\r\n  const editCashRequest = useApi({\r\n    method: \"put\",\r\n    url: `cashdesk/${id}`,\r\n  });\r\n  const detailCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `cashdesk/${id}`,\r\n  });\r\n  const getBankRequest = useApi({\r\n    method: \"get\",\r\n    url: `bank`,\r\n  });\r\n\r\n  const handleChangeType = (event) => {\r\n    setSelectedType(event.target.value);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    if (id) {\r\n      await editCashRequest.execute(data);\r\n    } else {\r\n      await addCashRequest.execute(data);\r\n    }\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/cash-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailCashRequest.execute();\r\n    setDetail(detail.data);\r\n    setSelectedBank(detail.data.bankId);\r\n    setSelectedType(detail.data.type);\r\n  };\r\n\r\n  const onChangeBank = (e) => {\r\n    setSelectedBank(e.target.value);\r\n  };\r\n\r\n  const getBanks = async () => {\r\n    const result = await getBankRequest.execute();\r\n    setBanks(result.data);\r\n  };\r\n\r\n  const onDone = (data) => {\r\n    const value = {\r\n      ...data,\r\n      bankId: selectedBank,\r\n      type: selectedType,\r\n      isUpdate: !!defaultValues,\r\n    };\r\n    onSubmit(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n    getBanks();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(detail);\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onDone)}>\r\n      {!detailCashRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش صندوق\" : \"افزودن صندوق\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={12} xs={12}>\r\n                  <RadioGroup\r\n                    aria-label=\"gender\"\r\n                    name=\"gender1\"\r\n                    value={selectedType}\r\n                    onChange={handleChangeType}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      justifyContent: \"space-around\",\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"CASH\"\r\n                      control={<Radio />}\r\n                      label=\"نقدی\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"BANK\"\r\n                      control={<Radio />}\r\n                      label=\"بانکی\"\r\n                    />\r\n                  </RadioGroup>\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.name}\r\n                          helperText={errors.name ? errors.name.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"موجودی \"\r\n                          type=\"number\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.amount}\r\n                          helperText={\r\n                            errors.amount ? errors.amount.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"amount\"\r\n                  />\r\n                </Grid>\r\n                {selectedType === \"BANK\" && (\r\n                  <>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <TextField\r\n                        select\r\n                        label=\"بانک\"\r\n                        onChange={onChangeBank}\r\n                        value={selectedBank}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"bank\"\r\n                        SelectProps={{\r\n                          classes: {\r\n                            select: classes.rootSelect,\r\n                          },\r\n                        }}\r\n                      >\r\n                        {banks.map((option) => (\r\n                          <MenuItem key={option.value} value={option.value}>\r\n                            <img\r\n                              src={`${Constant.API_ADDRESS}/${option.logo}`}\r\n                              alt={option.label}\r\n                              style={{\r\n                                width: 25,\r\n                                height: 25,\r\n                                borderRadius: \"50%\",\r\n                                marginLeft: 10,\r\n                              }}\r\n                            />\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Grid>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <Controller\r\n                        control={control}\r\n                        render={({ onChange, value, name }) => {\r\n                          return (\r\n                            <TextField\r\n                              fullWidth\r\n                              value={value}\r\n                              size=\"small\"\r\n                              name={name}\r\n                              label=\"شماره کارت\"\r\n                              variant=\"outlined\"\r\n                              onChange={onChange}\r\n                              error={!!errors.accountCardNumber}\r\n                              helperText={\r\n                                errors.accountCardNumber\r\n                                  ? errors.accountCardNumber.message\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                          );\r\n                        }}\r\n                        rules={{\r\n                          minLength: {\r\n                            value: 16,\r\n                            message: Constant.VALIDATION.CARD_NUMBER,\r\n                          },\r\n                          maxLength: {\r\n                            value: 16,\r\n                            message: Constant.VALIDATION.CARD_NUMBER,\r\n                          },\r\n                        }}\r\n                        name=\"accountCardNumber\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <Controller\r\n                        control={control}\r\n                        render={({ onChange, value, name }) => {\r\n                          return (\r\n                            <TextField\r\n                              fullWidth\r\n                              value={value}\r\n                              size=\"small\"\r\n                              name={name}\r\n                              label=\"شماره حساب\"\r\n                              variant=\"outlined\"\r\n                              onChange={onChange}\r\n                              error={!!errors.accountNumber}\r\n                              helperText={\r\n                                errors.accountNumber\r\n                                  ? errors.accountNumber.message\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                          );\r\n                        }}\r\n                        name=\"accountNumber\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item lg={6} xs={12}>\r\n                      <Controller\r\n                        control={control}\r\n                        render={({ onChange, value, name }) => {\r\n                          return (\r\n                            <TextField\r\n                              fullWidth\r\n                              value={value}\r\n                              size=\"small\"\r\n                              name={name}\r\n                              label=\"شماره شبا\"\r\n                              variant=\"outlined\"\r\n                              onChange={onChange}\r\n                              error={!!errors.accountShaba}\r\n                              helperText={\r\n                                errors.accountShaba\r\n                                  ? errors.accountShaba.message\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                          );\r\n                        }}\r\n                        name=\"accountShaba\"\r\n                      />\r\n                    </Grid>\r\n                  </>\r\n                )}\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          multiline\r\n                          variant=\"outlined\"\r\n                          label=\"توضیحات\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.description}\r\n                          helperText={\r\n                            errors.description ? errors.description.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"description\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\detail.js",["639","640"],"import React, { Fragment, useEffect, useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  MenuItem,\r\n  Hidden,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { DeleteIcon, EditIcon } from \"../../components/icons\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { getQueryString, persianNumber } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport PersonSelector from \"../payment/personSelector\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport dialogAction from \"../../redux/actions/dialogAction\";\r\nimport OtherPayments from \"./OtherPayments\";\r\nimport PrePayment from \"../payment/prePayment\";\r\nimport Drivers from \"./driver\";\r\nimport Product from \"./product\";\r\nimport Constant from \"../../helpers/constant\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n  rootSelect: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingBottom: 7,\r\n    paddingTop: 7,\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام کالا\",\r\n  },\r\n  { id: \"unit\", label: \"واحد\" },\r\n  {\r\n    id: \"amount\",\r\n    label: \"مقدار\",\r\n  },\r\n  {\r\n    id: \"fee\",\r\n    label: \"قیمت\",\r\n  },\r\n  {\r\n    id: \"total\",\r\n    label: \"مجموع\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainDetail({ defaultValues }) {\r\n  const paymentRef = useRef(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const invoiceType = getQueryString(\"type\");\r\n  const [detail, setDetail] = useState({});\r\n  const [selectedPerson, setSelectedPerson] = useState();\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [selectedDate, handleDateChange] = useState(moment());\r\n  const [invoiceCategory, setInvoiceCategory] = useState(3);\r\n  const [category, setCategory] = useState([]);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [invoicePerson, setInvoicePerson] = useState(\" \");\r\n  const [payments, setPayments] = useState({\r\n    cashes: [],\r\n    banks: [],\r\n    cheques: [],\r\n  });\r\n  const [totalFee, setTotalFee] = useState(0);\r\n  const [totalPayment, setTotalPayment] = useState(0);\r\n  const [discount, setDiscount] = useState(0);\r\n  const [pureFee, setPureFee] = useState(0);\r\n  const [totalRemaining, setTotalRemaining] = useState(0);\r\n\r\n  const addInvoiceRequest = useApi({\r\n    method: \"post\",\r\n    url: `invoice`,\r\n  });\r\n  const editInvoiceRequest = useApi({\r\n    method: \"put\",\r\n    url: `invoice/${id}`,\r\n  });\r\n  const detailInvoiceRequest = useApi({\r\n    method: \"get\",\r\n    url: `invoice/${id}`,\r\n  });\r\n  const invoiceCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `invoice/category`,\r\n  });\r\n  const addInvoicePaymentRequest = useApi({\r\n    method: \"post\",\r\n    url: `payment`,\r\n  });\r\n  const getPaymentInvoiceRequest = useApi({\r\n    method: \"get\",\r\n    url: `payment/invoice/${id}`,\r\n  });\r\n\r\n  const onChnageDate = (e) => {\r\n    handleDateChange(e);\r\n  };\r\n\r\n  const getInvoiceCategory = async () => {\r\n    const detail = await invoiceCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  const onSelectPerson = (person) => {\r\n    setSelectedPerson(person);\r\n    setInvoicePerson(\r\n      selectedPerson\r\n        ? `${selectedPerson.firstName} ${selectedPerson.lastName}`\r\n        : \"\",\r\n    );\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onDismissPerson = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onShowDialog = () => {\r\n    dialogAction.show({\r\n      title: \"انتخاب شخص\",\r\n      component: (\r\n        <PersonSelector\r\n          onSelect={onSelectPerson}\r\n          onDismiss={onDismissPerson}\r\n          filter={Constant.PERSON_TYPE.CUSTOMER}\r\n        />\r\n      ),\r\n      size: \"lg\",\r\n      confirm: false,\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    const value = {\r\n      ...data,\r\n      products,\r\n      drivers,\r\n      date: selectedDate._d,\r\n      customerId: selectedPerson ? selectedPerson.id : 1,\r\n      type: invoiceType,\r\n      categoryId: invoiceCategory,\r\n      globalCustomer: invoicePerson,\r\n    };\r\n    if (id) {\r\n      await editInvoiceRequest.execute(value);\r\n    } else {\r\n      const response = await addInvoiceRequest.execute(value);\r\n      const invoicePayment = {\r\n        ...paymentRef.current,\r\n        invoiceId: response.id,\r\n        date: selectedDate._d,\r\n        personId: selectedPerson ? selectedPerson.id : 1,\r\n        personType: \"CUSTOMER\",\r\n        type: invoiceType === \"SELL\" ? \"INCOME\" : \"OUTCOME\",\r\n        description: `بابت فاکتور به شماره  ${response.id}`,\r\n      };\r\n      addInvoicePaymentRequest.execute(invoicePayment);\r\n    }\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/invoice-list?type=ALL\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailInvoiceRequest.execute();\r\n    const payments = await getPaymentInvoiceRequest.execute();\r\n    const paymentsArray = {\r\n      cashes: payments.data.cashes,\r\n      banks: payments.data.banks,\r\n      cheques: payments.data.cheques,\r\n    };\r\n\r\n    setDetail(detail.data);\r\n    setSelectedPerson(payments.data.person);\r\n    setPayments(paymentsArray);\r\n    setDrivers(detail.data.drivers);\r\n    setProducts(detail.data.products);\r\n    handleDateChange(detail.data.date);\r\n    setTotalFee(detail.data.totalPrice);\r\n    setDiscount(detail.data.discount);\r\n    setTotalPayment(payments.data.price);\r\n    setTotalRemaining(\r\n      detail.data.totalPrice -\r\n        (detail.data.discount + payments.data.price) +\r\n        Number(payments.data.person.accountRemaining),\r\n    );\r\n    if (detail.data.customerId === 1) {\r\n      setInvoicePerson(detail.data.globalCustomer);\r\n    }\r\n  };\r\n\r\n  const onSubmitDrivers = (drivers) => {\r\n    setDrivers(drivers);\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onDismissDrivers = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const handleDeleteDriver = (data) => {\r\n    setDrivers(drivers.filter((item) => item.id !== data.id));\r\n  };\r\n\r\n  const onShowDriverDialog = () => {\r\n    dialogAction.show({\r\n      title: \"انتخاب راننده\",\r\n      component: (\r\n        <Drivers\r\n          onSelect={onSubmitDrivers}\r\n          onDismiss={onDismissDrivers}\r\n          defaultValues={drivers}\r\n        />\r\n      ),\r\n      size: \"lg\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const onSubmitProduct = (product) => {\r\n    if (product.action === \"edit\") {\r\n      const index = products.findIndex((item) => item.id === product.id);\r\n      const ProductsTmp = [...products];\r\n      ProductsTmp[index] = product;\r\n      setProducts(ProductsTmp);\r\n    } else {\r\n      setProducts([...products, product]);\r\n    }\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onDismissProduct = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const handleDeleteProduct = (id) => {\r\n    setProducts(products.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const handleEditProduct = (item) => {\r\n    onShowProductDialog(\"edit\", item);\r\n  };\r\n\r\n  const onShowProductDialog = (type, data) => {\r\n    dialogAction.show({\r\n      title: \"انتخاب کالا\",\r\n      component: (\r\n        <Product\r\n          onSubmit={onSubmitProduct}\r\n          onDismiss={onDismissProduct}\r\n          customerId={selectedPerson ? selectedPerson.id : 1}\r\n          defaultValues={data}\r\n          action={type}\r\n        />\r\n      ),\r\n      size: \"lg\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const getDetailTitle = () => {\r\n    if (id) {\r\n      if (invoiceType === \"BUY\") {\r\n        return \"ویرایش فاکتور خرید\";\r\n      }\r\n      return \"ویرایش فاکتور فروش\";\r\n    } else {\r\n      if (invoiceType === \"INCOME\") {\r\n        return \"افزودن فاکتور خرید\";\r\n      }\r\n      return \"افزودن فاکتور فروش\";\r\n    }\r\n  };\r\n\r\n  const onSubmitPayment = (data) => {\r\n    if (data) {\r\n      const cashesPrice = data.cashes.reduce(\r\n        (n, { price }) => n + Number(price),\r\n        0,\r\n      );\r\n      const chequesPrice = data.cheques.reduce(\r\n        (n, { price }) => n + Number(price),\r\n        0,\r\n      );\r\n      const banksPrice = data.banks.reduce(\r\n        (n, { price }) => n + Number(price),\r\n        0,\r\n      );\r\n      setTotalPayment(cashesPrice + chequesPrice + banksPrice);\r\n    }\r\n  };\r\n\r\n  const onDiscountChange = (e) => {\r\n    setDiscount(e.target.value);\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setInvoiceCategory(e.target.value);\r\n  };\r\n\r\n  const onChangeInvoicePerson = (e) => {\r\n    setInvoicePerson(e.target.value);\r\n  };\r\n\r\n  const onDismissOtherPayments = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onSubmitOtherPayments = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  const onOtherPayments = () => {\r\n    dialogAction.show({\r\n      title: \"انتخاب کالا\",\r\n      component: (\r\n        <OtherPayments\r\n          onSubmit={onSubmitOtherPayments}\r\n          onDismiss={onDismissOtherPayments}\r\n        />\r\n      ),\r\n      size: \"lg\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getInvoiceCategory();\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTotalFee(products.reduce((n, { totalFee }) => n + totalFee, 0));\r\n  }, [products]);\r\n\r\n  useEffect(() => {\r\n    const factorPay = totalFee - (Number(discount) + totalPayment);\r\n\r\n    setPureFee(factorPay);\r\n    if (selectedPerson) {\r\n      setTotalRemaining(factorPay + Number(selectedPerson?.accountRemaining));\r\n    }\r\n  }, [totalFee, discount, totalPayment]);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailInvoiceRequest.pending ? (\r\n        <Grid item lg={8} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {getDetailTitle()}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12} style={{ display: \"flex\" }}>\r\n                  <Button\r\n                    style={{ marginLeft: 10, width: \"30%\" }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onShowDialog}\r\n                  >\r\n                    انتخاب مشتری\r\n                  </Button>\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    name={\"personName\"}\r\n                    onChange={onChangeInvoicePerson}\r\n                    value={invoicePerson}\r\n                    style={{ width: \"70%\" }}\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12} className={classes.datePicker}>\r\n                  <DatePicker\r\n                    autoOk\r\n                    name=\"date\"\r\n                    label=\"تاریخ ثبت\"\r\n                    inputVariant=\"outlined\"\r\n                    okLabel=\"تأیید\"\r\n                    cancelLabel=\"لغو\"\r\n                    labelFunc={(date) =>\r\n                      date ? date.format(\"jYYYY/jMM/jDD\") : \"\"\r\n                    }\r\n                    value={selectedDate}\r\n                    onChange={onChnageDate}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  {!!category.length && invoiceCategory && (\r\n                    <TextField\r\n                      select\r\n                      label=\"دسته بندی\"\r\n                      value={invoiceCategory}\r\n                      onChange={onChangeCategory}\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    >\r\n                      {category.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n                </Grid>\r\n                <Hidden smDown>\r\n                  <Grid item lg={6} xs={12} />\r\n                </Hidden>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"مبدا\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value || \" \"}\r\n                          error={!!errors.origin}\r\n                          helperText={\r\n                            errors.origin ? errors.origin.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"origin\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"مقصد\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value || \" \"}\r\n                          error={!!errors.destination}\r\n                          helperText={\r\n                            errors.destination ? errors.destination.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"destination\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12} style={{ display: \"flex\" }}>\r\n                  <Button\r\n                    style={{ marginLeft: 10, width: \"30%\" }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onShowDriverDialog}\r\n                    endIcon={\r\n                      <i className=\"material-icons-round\">local_shipping</i>\r\n                    }\r\n                    inventory_2\r\n                  >\r\n                    انتخاب راننده\r\n                  </Button>\r\n                  <Grid>\r\n                    {drivers.map((item) => {\r\n                      return (\r\n                        <Chip\r\n                          style={{ margin: \"0 1px 4px\" }}\r\n                          label={`${item.firstName} ${item.lastName}`}\r\n                          onDelete={() => handleDeleteDriver(item)}\r\n                          color=\"primary\"\r\n                        />\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item lg={6} xs={12} style={{ display: \"flex\" }}>\r\n                  <Button\r\n                    // disabled={isEmpty(selectedPerson)}\r\n                    style={{ marginLeft: 10, width: \"30%\" }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => onShowProductDialog(\"add\")}\r\n                    endIcon={\r\n                      <i className=\"material-icons-round\">inventory_2</i>\r\n                    }\r\n                  >\r\n                    انتخاب کالا\r\n                  </Button>\r\n                </Grid>\r\n                {!!products.length && (\r\n                  <Grid item xs={12}>\r\n                    <Paper>\r\n                      <TableContainer style={{ padding: \"0 10px\" }}>\r\n                        <Table\r\n                          className={classes.table}\r\n                          size={\"medium\"}\r\n                          style={{ paddingRight: 10 }}\r\n                        >\r\n                          <TableHeader headCells={headCells} />\r\n\r\n                          <TableBody>\r\n                            {products.map((row) => {\r\n                              return (\r\n                                <TableRow\r\n                                  hover\r\n                                  tabIndex={-1}\r\n                                  key={row.id}\r\n                                  style={{ paddingRight: 10 }}\r\n                                >\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.name}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {Constant.UNITS_MAP[row.unit]}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {row.perUnit\r\n                                      ? `${persianNumber(\r\n                                          row.amount,\r\n                                        )}*${persianNumber(row.perUnit)}`\r\n                                      : persianNumber(row.amount)}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {persianNumber(row.fee)}\r\n                                  </TableCell>\r\n                                  <TableCell padding=\"none\">\r\n                                    {persianNumber(row.fee * row.amount)}\r\n                                  </TableCell>\r\n                                  <TableCell\r\n                                    padding=\"none\"\r\n                                    style={{ textAlign: \"left\" }}\r\n                                  >\r\n                                    <IconButton\r\n                                      onClick={() => handleEditProduct(row)}\r\n                                    >\r\n                                      <EditIcon />\r\n                                    </IconButton>\r\n\r\n                                    <IconButton\r\n                                      onClick={() =>\r\n                                        handleDeleteProduct(row.id)\r\n                                      }\r\n                                    >\r\n                                      <DeleteIcon />\r\n                                    </IconButton>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              );\r\n                            })}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                )}\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"توضیحات\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value || \" \"}\r\n                          error={!!errors.description}\r\n                          helperText={\r\n                            errors.description ? errors.description.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          multiline\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"description\"\r\n                  />\r\n                </Grid>\r\n                <PrePayment\r\n                  type={invoiceType === \"BUY\" ? \"OUTCOME\" : \"INCOME\"}\r\n                  defaultValues={payments}\r\n                  ref={paymentRef}\r\n                  onSubmit={onSubmitPayment}\r\n                />\r\n                <Grid container spacing={3} style={{ marginTop: 20 }}>\r\n                  <Grid item lg={3} xs={6}>\r\n                    <TextField\r\n                      disabled\r\n                      variant=\"outlined\"\r\n                      label=\"مبلغ کل\"\r\n                      value={totalFee}\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={3} xs={6}>\r\n                    <TextField\r\n                      disabled\r\n                      variant=\"outlined\"\r\n                      label={`${\r\n                        invoiceType === \"SELL\" ? \"جمع دریافتی\" : \"جمع پرداختی\"\r\n                      }`}\r\n                      value={totalPayment}\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={3} xs={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      onChange={onDiscountChange}\r\n                      label=\"تخفیف\"\r\n                      value={discount || \" \"}\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={3} xs={6}>\r\n                    <TextField\r\n                      disabled\r\n                      variant=\"outlined\"\r\n                      label=\"مبلغ خالص\"\r\n                      value={pureFee}\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={3} xs={6}>\r\n                    <TextField\r\n                      disabled\r\n                      variant=\"outlined\"\r\n                      label=\"مانده قبلی\"\r\n                      value={\r\n                        selectedPerson ? selectedPerson.accountRemaining : 0\r\n                      }\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={3} xs={6}>\r\n                    <TextField\r\n                      disabled\r\n                      variant=\"outlined\"\r\n                      label=\"مانده نهایی\"\r\n                      value={totalRemaining}\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    endIcon={\r\n                      <i className=\"material-icons-round\">attach_money</i>\r\n                    }\r\n                    onClick={onOtherPayments}\r\n                  >\r\n                    پرداخت متفرقه\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\prePayment.js",["641","642"],"import React, {\r\n  Fragment,\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  ButtonGroup,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Accordion,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { DeleteIcon, EditIcon } from \"../../components/icons\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport dialogAction from \"../../redux/actions/dialogAction\";\r\nimport Payment from \"./paymnet\";\r\nimport update from \"immutability-helper\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n  rootSelect: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingBottom: 7,\r\n    paddingTop: 7,\r\n  },\r\n}));\r\n\r\nconst naghdPayHeadCells = [\r\n  { id: \"cash\", label: \"صندوق\" },\r\n  {\r\n    id: \"amount\",\r\n    label: \"مبلغ \",\r\n  },\r\n  { id: \"action\" },\r\n];\r\nconst cardPayHeadCells = [\r\n  { id: \"cash\", label: \"صندوق\" },\r\n  {\r\n    id: \"amount\",\r\n    label: \"مبلغ \",\r\n  },\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع تراکنش \",\r\n  },\r\n  {\r\n    id: \"bank\",\r\n    label: \"بانک \",\r\n  },\r\n  {\r\n    id: \"code\",\r\n    label: \"شماره رهگیری \",\r\n  },\r\n  { id: \"action\" },\r\n];\r\nconst checkPayHeadCells = [\r\n  { id: \"cash\", label: \"صندوق\" },\r\n  {\r\n    id: \"amount\",\r\n    label: \"مبلغ \",\r\n  },\r\n  { id: \"dueDate\", label: \"تاریخ سررسید\" },\r\n  {\r\n    id: \"bank\",\r\n    label: \"بانک \",\r\n  },\r\n  { id: \"action\" },\r\n];\r\n\r\nconst PrePayment = React.forwardRef((props, ref) => {\r\n  const { defaultValues } = props;\r\n  const classes = useStyles();\r\n  const paymentType = getQueryString(\"type\");\r\n  const [payments, setPayments] = useState();\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return payments;\r\n  });\r\n\r\n  const onSubmitPaymentActions = (value, type, isEdit) => {\r\n    if (isEdit) {\r\n      return handleSubmitEditPayment(value, type);\r\n    }\r\n    return handleSubmitAddPayment(value, type);\r\n  };\r\n\r\n  const handleSubmitAddPayment = (value, type) => {\r\n    let newPayments;\r\n    const types = {\r\n      NAGHD: () => {\r\n        newPayments = update(payments, {\r\n          cashes: { $push: [value] },\r\n        });\r\n      },\r\n      CARD: () => {\r\n        newPayments = update(payments, {\r\n          banks: { $push: [value] },\r\n        });\r\n      },\r\n      CHECK: () => {\r\n        newPayments = update(payments, {\r\n          cheques: { $push: [value] },\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n      setPayments(newPayments);\r\n      dialogAction.hide();\r\n    }\r\n  };\r\n\r\n  const handleSubmitEditPayment = (value, type) => {\r\n    let newPayments;\r\n    const types = {\r\n      NAGHD: () => {\r\n        const index = payments.cashes.findIndex((item) => item.id === value.id);\r\n        newPayments = update(payments, {\r\n          cashes: {\r\n            [index]: { $set: value },\r\n          },\r\n        });\r\n      },\r\n      CARD: () => {\r\n        const index = payments.banks.findIndex((item) => item.id === value.id);\r\n        newPayments = update(payments, {\r\n          banks: {\r\n            [index]: { $set: value },\r\n          },\r\n        });\r\n      },\r\n      CHECK: () => {\r\n        const index = payments.cheques.findIndex(\r\n          (item) => item.id === value.id,\r\n        );\r\n        newPayments = update(payments, {\r\n          cheques: {\r\n            [index]: { $set: value },\r\n          },\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n      setPayments(newPayments);\r\n      dialogAction.hide();\r\n    }\r\n  };\r\n\r\n  const handleDeletePayment = (value, type) => {\r\n    dialogAction.show({\r\n      confirm: true,\r\n      title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n      onAction: () => {\r\n        let newPayments;\r\n        const types = {\r\n          NAGHD: () => {\r\n            const index = payments.cashes.findIndex(\r\n              (item) => item.id === value.id,\r\n            );\r\n            newPayments = update(payments, {\r\n              cashes: { $splice: [[index, 1]] },\r\n            });\r\n          },\r\n          CARD: () => {\r\n            const index = payments.banks.findIndex(\r\n              (item) => item.id === value.id,\r\n            );\r\n            newPayments = update(payments, {\r\n              banks: { $splice: [[index, 1]] },\r\n            });\r\n          },\r\n          CHECK: () => {\r\n            const index = payments.cheques.findIndex(\r\n              (item) => item.id === value.id,\r\n            );\r\n            newPayments = update(payments, {\r\n              cheques: { $splice: [[index, 1]] },\r\n            });\r\n          },\r\n        };\r\n        if (types[type]) {\r\n          types[type]();\r\n          setPayments(newPayments);\r\n          dialogAction.hide();\r\n        }\r\n      },\r\n      size: \"sm\",\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const onDismissPayment = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onClickPayment = (type, data) => {\r\n    dialogAction.show({\r\n      title: `${paymentType === \"INCOME\" ? \"دریافت\" : \"پرداخت\"} ${\r\n        type === \"NAGHD\" ? \"نقدی\" : type === \"CARD\" ? \"کارتی\" : \"چکی\"\r\n      }`,\r\n      component: (\r\n        <Payment\r\n          onSubmit={onSubmitPaymentActions}\r\n          onDismiss={onDismissPayment}\r\n          defaultValues={data}\r\n          paymentType={paymentType}\r\n          type={type}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const getButtonTitle = (type) => {\r\n    const types = {\r\n      NAGHD: () => {\r\n        return (\r\n          <Typography variant=\"button\">\r\n            {paymentType === \"INCOME\" ? \"دریافت نقدی\" : \"پرداخت نقدی\"}(\r\n            {payments?.cashes.length})\r\n          </Typography>\r\n        );\r\n      },\r\n      CARD: () => {\r\n        return (\r\n          <Typography variant=\"button\">\r\n            {paymentType === \"INCOME\" ? \"دریافت کارتی\" : \"پرداخت کارتی\"}(\r\n            {payments?.banks.length})\r\n          </Typography>\r\n        );\r\n      },\r\n      CHECK: () => {\r\n        return (\r\n          <Typography variant=\"button\">\r\n            {paymentType === \"INCOME\" ? \"دریافت چکی\" : \"پرداخت چکی\"}(\r\n            {payments?.cheques.length})\r\n          </Typography>\r\n        );\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      return types[type]();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPayments(defaultValues);\r\n  }, [defaultValues]);\r\n\r\n  useEffect(() => {\r\n    if (typeof props.onSubmit === \"function\") {\r\n      props.onSubmit(payments);\r\n    }\r\n  }, [payments]);\r\n\r\n  return (\r\n    <>\r\n      <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <ButtonGroup color=\"primary\">\r\n          <Button\r\n            startIcon={<i className=\"material-icons-round\">local_atm</i>}\r\n            onClick={() => onClickPayment(\"NAGHD\")}\r\n          >\r\n            {getButtonTitle(\"NAGHD\")}\r\n          </Button>\r\n          <Button\r\n            startIcon={<i className=\"material-icons-round\">payment</i>}\r\n            onClick={() => onClickPayment(\"CARD\")}\r\n          >\r\n            {getButtonTitle(\"CARD\")}\r\n          </Button>\r\n          <Button\r\n            startIcon={<i className=\"material-icons-round\">payments</i>}\r\n            onClick={() => onClickPayment(\"CHECK\")}\r\n          >\r\n            {getButtonTitle(\"CHECK\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Grid>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Accordion\r\n            expanded={payments?.cashes.length}\r\n            disabled={!payments?.cashes.length}\r\n          >\r\n            <AccordionSummary\r\n              className={classes.accordionSummary}\r\n              expandIcon={<i className=\"material-icons-round\">expand_more</i>}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Typography className={classes.heading}>نقدی ها</Typography>\r\n            </AccordionSummary>\r\n            {!!payments?.cashes.length && (\r\n              <AccordionDetails>\r\n                <Grid item xs={12}>\r\n                  <Paper>\r\n                    <TableContainer style={{ padding: \"0 10px\" }}>\r\n                      <Table\r\n                        className={classes.table}\r\n                        size={\"medium\"}\r\n                        style={{ paddingRight: 10 }}\r\n                      >\r\n                        <TableHeader headCells={naghdPayHeadCells} />\r\n\r\n                        <TableBody>\r\n                          {payments?.cashes.map((row) => {\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                tabIndex={-1}\r\n                                key={row.id}\r\n                                style={{ paddingRight: 10 }}\r\n                              >\r\n                                <TableCell padding=\"none\">\r\n                                  <div\r\n                                    style={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    {row.cashDesk?.label}\r\n                                  </div>\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.price}\r\n                                </TableCell>\r\n\r\n                                <TableCell\r\n                                  padding=\"none\"\r\n                                  style={{ textAlign: \"left\" }}\r\n                                >\r\n                                  <IconButton\r\n                                    onClick={() => onClickPayment(\"NAGHD\", row)}\r\n                                  >\r\n                                    <EditIcon />\r\n                                  </IconButton>\r\n\r\n                                  <IconButton\r\n                                    onClick={() =>\r\n                                      handleDeletePayment(row, \"NAGHD\")\r\n                                    }\r\n                                  >\r\n                                    <DeleteIcon />\r\n                                  </IconButton>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Paper>\r\n                </Grid>\r\n              </AccordionDetails>\r\n            )}\r\n          </Accordion>\r\n          <Accordion\r\n            expanded={payments?.banks.length}\r\n            disabled={!payments?.banks.length}\r\n          >\r\n            <AccordionSummary\r\n              className={classes.accordionSummary}\r\n              expandIcon={<i className=\"material-icons-round\">expand_more</i>}\r\n              aria-controls=\"panel2a-content\"\r\n              id=\"panel2a-header\"\r\n            >\r\n              <Typography className={classes.heading}>کارتی ها</Typography>\r\n            </AccordionSummary>\r\n            {!!payments?.banks.length && (\r\n              <AccordionDetails>\r\n                <Grid item xs={12}>\r\n                  <Paper>\r\n                    <TableContainer style={{ padding: \"0 10px\" }}>\r\n                      <Table\r\n                        className={classes.table}\r\n                        size={\"medium\"}\r\n                        style={{ paddingRight: 10 }}\r\n                      >\r\n                        <TableHeader headCells={cardPayHeadCells} />\r\n\r\n                        <TableBody>\r\n                          {payments?.banks.map((row) => {\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                tabIndex={-1}\r\n                                key={row.id}\r\n                                style={{ paddingRight: 10 }}\r\n                              >\r\n                                <TableCell padding=\"none\">\r\n                                  <div\r\n                                    style={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    {row.cashDesk?.label}\r\n                                  </div>\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.price}\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.transactionType}\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.bank?.label}\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.trackingCode}\r\n                                </TableCell>\r\n\r\n                                <TableCell\r\n                                  padding=\"none\"\r\n                                  style={{ textAlign: \"left\" }}\r\n                                >\r\n                                  <IconButton\r\n                                    onClick={() => onClickPayment(\"CARD\", row)}\r\n                                  >\r\n                                    <EditIcon />\r\n                                  </IconButton>\r\n\r\n                                  <IconButton\r\n                                    onClick={() =>\r\n                                      handleDeletePayment(row, \"CARD\")\r\n                                    }\r\n                                  >\r\n                                    <DeleteIcon />\r\n                                  </IconButton>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Paper>\r\n                </Grid>\r\n              </AccordionDetails>\r\n            )}\r\n          </Accordion>\r\n          <Accordion\r\n            expanded={payments?.cheques.length}\r\n            disabled={!payments?.cheques.length}\r\n          >\r\n            <AccordionSummary\r\n              className={classes.accordionSummary}\r\n              expandIcon={<i className=\"material-icons-round\">expand_more</i>}\r\n              aria-controls=\"panel3a-content\"\r\n              id=\"panel3a-header\"\r\n            >\r\n              <Typography className={classes.heading}>چک ها</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              {!!payments?.cheques.length && (\r\n                <Grid item xs={12}>\r\n                  <Paper>\r\n                    <TableContainer style={{ padding: \"0 10px\" }}>\r\n                      <Table\r\n                        className={classes.table}\r\n                        size={\"medium\"}\r\n                        style={{ paddingRight: 10 }}\r\n                      >\r\n                        <TableHeader headCells={checkPayHeadCells} />\r\n\r\n                        <TableBody>\r\n                          {payments?.cheques.map((row) => {\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                tabIndex={-1}\r\n                                key={row.id}\r\n                                style={{ paddingRight: 10 }}\r\n                              >\r\n                                <TableCell padding=\"none\">\r\n                                  <div\r\n                                    style={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    {row.cashDesk?.label}\r\n                                  </div>\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.price}\r\n                                </TableCell>\r\n\r\n                                <TableCell padding=\"none\">\r\n                                  {row.chequeDueDate.toLocaleDateString(\r\n                                    \"fa-IR\",\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell padding=\"none\">\r\n                                  {row.bank?.label}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  padding=\"none\"\r\n                                  style={{ textAlign: \"left\" }}\r\n                                >\r\n                                  <IconButton\r\n                                    onClick={() => onClickPayment(\"CHECK\", row)}\r\n                                  >\r\n                                    <EditIcon />\r\n                                  </IconButton>\r\n\r\n                                  <IconButton\r\n                                    onClick={() =>\r\n                                      handleDeletePayment(row, \"CHECK\")\r\n                                    }\r\n                                  >\r\n                                    <DeleteIcon />\r\n                                  </IconButton>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Paper>\r\n                </Grid>\r\n              )}\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n});\r\nexport default PrePayment;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\personSelector.js",["643"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n  Chip,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع شخص\",\r\n  },\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n\r\n  { id: \"status\", label: \"وضعیت\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList({ onSelect, onDismiss, filter }) {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [search, setSearch] = useState();\r\n  const [orderBy, setOrderBy] = useState(\"firstName\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSelectPerson = (data) => {\r\n    const person = { id: data.value, name: data.label, type: data.personType };\r\n    onSelect(person);\r\n  };\r\n\r\n  const getCustomerRequest = useApi({\r\n    method: \"get\",\r\n    url: `${filter}?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const customerList = await getCustomerRequest.execute();\r\n    setList(customerList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <div style={{ marginTop: -20 }}>\r\n      <TableTop handleSearch={onSearch} />\r\n      <TableContainer>\r\n        <Table className={classes.table} size={\"medium\"}>\r\n          <TableHeader\r\n            classes={classes}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={list.length}\r\n            headCells={headCells}\r\n          />\r\n\r\n          <TableBody>\r\n            {list.map((row) => {\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  tabIndex={-1}\r\n                  key={row.value}\r\n                  style={{ paddingRight: 10 }}\r\n                >\r\n                  <TableCell padding=\"none\">{row.label}</TableCell>\r\n\r\n                  <TableCell padding=\"none\">\r\n                    <Chip\r\n                      label={Constant.PERSON_STATUS[row.personType]}\r\n                      className={clsx(classes.status, classes[row.personType])}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell padding=\"none\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => onSelectPerson(row)}\r\n                    >\r\n                      انتخاب شخص\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n            {!list.length && !getCustomerRequest.pending && (\r\n              <TableRow style={{ height: 53 }}>\r\n                <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                  <Typography variant=\"h6\">\r\n                    داده ای برای نمایش وجود ندارد\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePaging\r\n        count={list.length}\r\n        handleChangePage={handleChangePage}\r\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={pageSize}\r\n      />\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n      >\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n          انصراف\r\n        </Button>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\unitAction.js",["644"],"import http from \"../../configs/axios\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport store from \"../store\";\r\nimport Storage from \"../../services/storage\";\r\n\r\nexport default {\r\n  async setProdcutUnit() {\r\n    const result = await http.get(\"/product/unit\");\r\n    if (result) {\r\n      Storage.setItem(\r\n        Constant.STORAGE.PRODUCT_UNITS,\r\n        JSON.stringify(result.data),\r\n      );\r\n      store.dispatch({\r\n        type: Constant.ACTION_TYPES.GET_UNITS,\r\n        payload: result.data,\r\n      });\r\n    }\r\n  },\r\n\r\n  getProductUnit() {\r\n    return JSON.parse(Storage.getItem(Constant.STORAGE.PRODUCT_UNITS));\r\n  },\r\n};\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\amount.js",["645"],"import React, { useState, useEffect } from \"react\";\r\nimport { TextField, Button, Grid, MenuItem } from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport Constant from \"../../helpers/constant\";\r\n\r\nconst Account = ({ onSubmit, onDismiss, defaultValues, units }) => {\r\n  const [depotPicker, setDepotPicker] = useState([]);\r\n  const [seletedUnit, setSelectedUnit] = useState(units[0].value);\r\n  const [seletedDepot, setSelectedDepot] = useState(1);\r\n  const [showPerUnit, setShowPerUnit] = useState(\r\n    defaultValues ? !!defaultValues.perUnit : false,\r\n  );\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const getDepotRequest = useApi({\r\n    method: \"get\",\r\n    url: `depot/picker`,\r\n  });\r\n\r\n  const getDepotPicker = async () => {\r\n    const result = await getDepotRequest.execute();\r\n    setDepotPicker(result.data);\r\n  };\r\n\r\n  //   const onChange = (e) => {\r\n  //     setValues({ ...values, [e.target.name]: e.target.value });\r\n  //   };\r\n\r\n  const onChangeDepot = (e) => {\r\n    setSelectedDepot(e.target.value);\r\n  };\r\n\r\n  const onChangeUnit = (e) => {\r\n    setSelectedUnit(e.target.value);\r\n\r\n    const { value } = e.target;\r\n\r\n    const targetUnit = units.filter((item) => item.value === value)[0];\r\n    setShowPerUnit(targetUnit.perUnit);\r\n\r\n    setSelectedUnit(e.target.value);\r\n  };\r\n\r\n  const getSelectedDepot = () => {\r\n    return depotPicker.find((item) => item.value === seletedDepot);\r\n  };\r\n\r\n  const getSelectedUnit = () => {\r\n    return units.find((item) => item.value === seletedUnit);\r\n  };\r\n\r\n  const onDone = (data) => {\r\n    const newId = uuid();\r\n\r\n    const value = {\r\n      ...data,\r\n      unit: getSelectedUnit(),\r\n      depot: getSelectedDepot(),\r\n      id: defaultValues ? defaultValues.id : newId,\r\n      isUpdate: !!defaultValues,\r\n    };\r\n    onSubmit(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDepotPicker();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(defaultValues);\r\n  }, [reset, defaultValues]);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value, name }) => {\r\n            return (\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"موجودی اول دوره\"\r\n                name={name}\r\n                onChange={onChange}\r\n                value={value}\r\n                error={!!errors.stock}\r\n                helperText={errors.stock ? errors.stock.message : \"\"}\r\n                fullWidth\r\n                size=\"small\"\r\n                type=\"number\"\r\n              />\r\n            );\r\n          }}\r\n          rules={{\r\n            required: Constant.VALIDATION.REQUIRED,\r\n            min: {\r\n              value: 0,\r\n              message: Constant.VALIDATION.POSITIVE_NUMBER,\r\n            },\r\n          }}\r\n          name=\"stock\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          select\r\n          label=\"واحد\"\r\n          value={seletedUnit}\r\n          onChange={onChangeUnit}\r\n          variant=\"outlined\"\r\n          name=\"unit\"\r\n          fullWidth\r\n          size=\"small\"\r\n        >\r\n          {units.map((option) => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Grid>\r\n      {showPerUnit && (\r\n        <Grid item xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"مقدار در واحد\"\r\n                  name={name}\r\n                  onChange={onChange}\r\n                  value={value}\r\n                  error={!!errors.perUnit}\r\n                  helperText={errors.perUnit ? errors.perUnit.message : \"\"}\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                />\r\n              );\r\n            }}\r\n            rules={{\r\n              required: Constant.VALIDATION.REQUIRED,\r\n              min: {\r\n                value: 0,\r\n                message: Constant.VALIDATION.POSITIVE_NUMBER,\r\n              },\r\n            }}\r\n            name=\"perUnit\"\r\n          />\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          select\r\n          label=\"انبار\"\r\n          value={seletedDepot}\r\n          onChange={onChangeDepot}\r\n          variant=\"outlined\"\r\n          name=\"depot\"\r\n          fullWidth\r\n          size=\"small\"\r\n        >\r\n          {depotPicker.map((option) => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          onClick={handleSubmit(onDone)}\r\n        >\r\n          تایید\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onDismiss}>\r\n          انصراف\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\product.js",["646","647"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  MenuItem,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport unitAction from \"../../redux/actions/unitAction\";\r\nimport isEmpty from \"lodash.isempty\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام کالا\",\r\n  },\r\n  {\r\n    id: \"category\",\r\n    label: \"دسته بندی\",\r\n  },\r\n  {\r\n    id: \"amount\",\r\n    label: \"موجودی کل\",\r\n  },\r\n  { id: \"unit\", label: \" واحد شمارشی\" },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function ProductList({\r\n  onSubmit,\r\n  onDismiss,\r\n  customerId,\r\n  defaultValues,\r\n  action,\r\n}) {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [search, setSearch] = useState();\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [showPerUnit, setShowPerUnit] = useState(\r\n    defaultValues ? !!defaultValues.perUnit : false,\r\n  );\r\n  const units = unitAction.getProductUnit();\r\n  const [selectedProduct, setSelectedProduct] = useState(defaultValues);\r\n  const [depotPicker, setDepotPicker] = useState([]);\r\n  const [selectedDepot, setSelectedDepot] = useState(1);\r\n  const [productFee, setProductFee] = useState(\r\n    defaultValues || {\r\n      name: \" \",\r\n      fee: \"\",\r\n      amount: \"\",\r\n    },\r\n  );\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const getDepotProductRequest = useApi({\r\n    method: \"get\",\r\n    url: `product/depot?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const getProductFeeRequest = useApi({\r\n    method: \"get\",\r\n    url: \"invoice/fee\",\r\n  });\r\n\r\n  const getDepotRequest = useApi({\r\n    method: \"get\",\r\n    url: `depot/picker`,\r\n  });\r\n\r\n  const onChangeSelectedProduct = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"unit\") {\r\n      const allUnits = units.filter(\r\n        (item) => item.value === selectedProduct?.unitBaseId,\r\n      )[0].children;\r\n      const targetUnit = allUnits.filter((item) => item.value === value)[0];\r\n      setShowPerUnit(targetUnit.perUnit);\r\n    }\r\n    setProductFee({\r\n      ...productFee,\r\n      [name]: value,\r\n      unitBaseId: selectedProduct?.unitBaseId,\r\n    });\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const productList = await getDepotProductRequest.execute(\r\n      null,\r\n      selectedDepot,\r\n    );\r\n    setList(productList.data);\r\n  };\r\n\r\n  const getProductUnitPicker = () => {\r\n    if (!isEmpty(selectedProduct)) {\r\n      const allUnits = units.filter(\r\n        (item) => item.value === selectedProduct.unitBaseId,\r\n      )[0];\r\n\r\n      if (allUnits) {\r\n        return allUnits.children;\r\n      }\r\n      return [];\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const onSelectProduct = async (data) => {\r\n    setSelectedProduct(data);\r\n    if (customerId === 1) {\r\n      setProductFee({\r\n        productId: data.id,\r\n        name: data.name,\r\n        fee: \"\",\r\n        amount: \"\",\r\n      });\r\n    } else {\r\n      const fee = await getProductFeeRequest.execute(\r\n        null,\r\n        `${customerId}/${data.id}`,\r\n      );\r\n\r\n      const feeProduct = fee.data;\r\n      if (isEmpty(feeProduct)) {\r\n        setProductFee({\r\n          productId: data.id,\r\n          name: data.name,\r\n          fee: \"\",\r\n          amount: \"\",\r\n        });\r\n      } else {\r\n        setProductFee({ ...feeProduct, productId: data.id });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDeselectProduct = () => {\r\n    setSelectedProduct();\r\n  };\r\n\r\n  const onDone = () => {\r\n    const newId = uuid();\r\n    const data = {\r\n      id: defaultValues ? defaultValues.id : newId,\r\n      action,\r\n      ...productFee,\r\n      depotId: selectedDepot,\r\n      totalFee: Number(productFee.fee) * Number(productFee.amount),\r\n    };\r\n\r\n    onSubmit(data);\r\n  };\r\n\r\n  const getDepotPicker = async () => {\r\n    const result = await getDepotRequest.execute();\r\n    setDepotPicker(result.data);\r\n  };\r\n\r\n  const onChangeDepot = (e) => {\r\n    setSelectedDepot(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, selectedDepot]);\r\n\r\n  useEffect(() => {\r\n    getDepotPicker();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <Grid container spacing={3}>\r\n          <Grid item lg={6} xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"نام کالا\"\r\n              name={\"name\"}\r\n              onChange={onChangeSelectedProduct}\r\n              value={productFee.name}\r\n              fullWidth\r\n              size=\"small\"\r\n              disabled\r\n            />\r\n          </Grid>\r\n          <Grid item lg={6} xs={12}>\r\n            <TextField\r\n              select\r\n              label=\"واحد شمارش\"\r\n              value={productFee?.unit}\r\n              onChange={onChangeSelectedProduct}\r\n              variant=\"outlined\"\r\n              name=\"unit\"\r\n              fullWidth\r\n              size=\"small\"\r\n            >\r\n              {getProductUnitPicker().map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </Grid>\r\n          {showPerUnit && (\r\n            <Grid item lg={6} xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"مقدار در واحد\"\r\n                name={\"perUnit\"}\r\n                onChange={onChangeSelectedProduct}\r\n                value={productFee?.perUnit}\r\n                fullWidth\r\n                size=\"small\"\r\n                type=\"number\"\r\n              />\r\n            </Grid>\r\n          )}\r\n          <Grid item lg={6} xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"مقدار\"\r\n              name={\"amount\"}\r\n              onChange={onChangeSelectedProduct}\r\n              value={productFee?.amount}\r\n              fullWidth\r\n              size=\"small\"\r\n              type=\"number\"\r\n            />\r\n          </Grid>\r\n          <Grid item lg={6} xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"قیمت\"\r\n              name={\"fee\"}\r\n              onChange={onChangeSelectedProduct}\r\n              value={productFee?.fee}\r\n              fullWidth\r\n              size=\"small\"\r\n              type=\"number\"\r\n            />\r\n          </Grid>\r\n\r\n          {!!selectedProduct && (\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" onClick={onDone}>\r\n                تایید\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </form>\r\n      <Divider style={{ margin: \"20px 10px\" }} />\r\n      <Grid container spacing={3}>\r\n        <Grid item lg={12} xs={12}>\r\n          <TextField\r\n            select\r\n            label=\"انبار\"\r\n            value={selectedDepot}\r\n            onChange={onChangeDepot}\r\n            variant=\"outlined\"\r\n            name=\"depot\"\r\n            fullWidth\r\n            size=\"small\"\r\n          >\r\n            {depotPicker.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n      </Grid>\r\n      <TableContainer>\r\n        <TableTop handleSearch={onSearch} />\r\n\r\n        <Table className={classes.table} size={\"medium\"}>\r\n          <TableHeader\r\n            classes={classes}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={list.length}\r\n            headCells={headCells}\r\n          />\r\n\r\n          <TableBody>\r\n            {list.map((row) => {\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  tabIndex={-1}\r\n                  key={row.id}\r\n                  style={{ paddingRight: 10 }}\r\n                >\r\n                  <TableCell padding=\"none\">{row.name}</TableCell>\r\n                  <TableCell padding=\"none\">\r\n                    {row.categories.join(\",\")}\r\n                  </TableCell>\r\n                  <TableCell padding=\"none\">{row.totalStock}</TableCell>\r\n                  <TableCell padding=\"none\">{row.unitBase}</TableCell>\r\n                  <TableCell padding=\"none\">\r\n                    {selectedProduct?.id === row.id ? (\r\n                      <Button\r\n                        disabled={!!defaultValues}\r\n                        variant=\"contained\"\r\n                        className={classes.selectedButton}\r\n                        onClick={() => onDeselectProduct(row)}\r\n                        endIcon={<i className=\"material-icons-round\">done</i>}\r\n                      >\r\n                        انتخاب شده\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        disabled={!!defaultValues}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => onSelectProduct(row)}\r\n                      >\r\n                        انتخاب کالا\r\n                      </Button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n            {!list.length && !getDepotProductRequest.pending && (\r\n              <TableRow style={{ height: 53 }}>\r\n                <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                  <Typography variant=\"h6\">\r\n                    داده ای برای نمایش وجود ندارد\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePaging\r\n        count={list.length}\r\n        handleChangePage={handleChangePage}\r\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={pageSize}\r\n      />\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n      >\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n          انصراف\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\driver.js",["648","649","650"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n  Chip,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"category\",\r\n    label: \"دسته بندی\",\r\n  },\r\n  { id: \"mobile\", label: \"موبایل\" },\r\n  { id: \"carName\", label: \"ماشین\" },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList({ onSelect, onDismiss }) {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [search, setSearch] = useState();\r\n  const [orderBy, setOrderBy] = useState(\"firstName\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [selectedDrivers, setSelectedDrivers] = useState([]);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const getDriverRequest = useApi({\r\n    method: \"get\",\r\n    url: `driver?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const onSelectDriver = (item) => {\r\n    setSelectedDrivers([...selectedDrivers, item]);\r\n  };\r\n\r\n  const onDeselectDriver = (data) => {\r\n    setSelectedDrivers(selectedDrivers.filter((item) => item.id !== data.id));\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    onSelect(selectedDrivers);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const driverList = await getDriverRequest.execute();\r\n    setList(driverList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <div style={{ marginTop: -20 }}>\r\n      <TableTop handleSearch={onSearch} />\r\n      <TableContainer>\r\n        <Table className={classes.table} size={\"medium\"}>\r\n          <TableHeader\r\n            classes={classes}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={list.length}\r\n            headCells={headCells}\r\n          />\r\n\r\n          <TableBody>\r\n            {list.map((row) => {\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  tabIndex={-1}\r\n                  key={row.id}\r\n                  style={{ paddingRight: 10 }}\r\n                >\r\n                  <TableCell padding=\"none\">{row.firstName}</TableCell>\r\n                  <TableCell padding=\"none\">{row.lastName}</TableCell>\r\n                  <TableCell padding=\"none\">{row.category.name}</TableCell>\r\n                  <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                  <TableCell padding=\"none\">{row.carName}</TableCell>\r\n                  <TableCell padding=\"none\">\r\n                    {selectedDrivers.includes(row) ? (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.selectedButton}\r\n                        onClick={() => onDeselectDriver(row)}\r\n                        endIcon={<i className=\"material-icons-round\">done</i>}\r\n                      >\r\n                        انتخاب شده\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => onSelectDriver(row)}\r\n                      >\r\n                        انتخاب راننده\r\n                      </Button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n            {!list.length && !getDriverRequest.pending && (\r\n              <TableRow style={{ height: 53 }}>\r\n                <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                  <Typography variant=\"h6\">\r\n                    داده ای برای نمایش وجود ندارد\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePaging\r\n        count={list.length}\r\n        handleChangePage={handleChangePage}\r\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={pageSize}\r\n      />\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n          تایید\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n          بازگشت\r\n        </Button>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\detail.js",["651","652"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  IconButton,\r\n  RadioGroup,\r\n  Radio,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { DeleteIcon, EditIcon } from \"../../components/icons\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport Account from \"./account\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n  rootSelect: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingBottom: 7,\r\n    paddingTop: 7,\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"Name\",\r\n    label: \"نام بانک\",\r\n  },\r\n  { id: \"accountNumber\", label: \"شماره حساب \" },\r\n  {\r\n    id: \"CardNumber\",\r\n    label: \"شماره کارت\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [selectedGender, setSelectedGender] = useState(\"M\");\r\n  const [selectedContract, setSelectedContract] = useState(\"DAILY\");\r\n  const [selectedDate, setSelectedDate] = useState(moment());\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addEmployeeRequest = useApi({\r\n    method: \"post\",\r\n    url: `employee`,\r\n  });\r\n\r\n  const editEmployeeRequest = useApi({\r\n    method: \"put\",\r\n    url: `employee/${id}`,\r\n  });\r\n\r\n  const detailEmployeeRequest = useApi({\r\n    method: \"get\",\r\n    url: `employee/${id}`,\r\n  });\r\n\r\n  const deleteAccountRequest = useApi({\r\n    method: \"delete\",\r\n    url: `account`,\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    const contract = {\r\n      type: selectedContract,\r\n      SPH: data.SPH,\r\n      startDate: selectedDate._d,\r\n    };\r\n    const newAccounts = [];\r\n    accounts.map((item) => {\r\n      const newData = {\r\n        bankId: item.bank.value,\r\n        accountCardNumber: item.accountCardNumber,\r\n        accountNumber: item.accountNumber,\r\n        accountShaba: item.accountShaba,\r\n        description: item.description,\r\n      };\r\n      newAccounts.push(newData);\r\n    });\r\n\r\n    const allData = {\r\n      ...data,\r\n      accounts: newAccounts,\r\n      contract,\r\n      gender: selectedGender,\r\n    };\r\n    if (id) {\r\n      return await editEmployeeRequest.execute(allData);\r\n    }\r\n    await addEmployeeRequest.execute(allData);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/employee-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailEmployeeRequest.execute();\r\n    setDetail(detail.data);\r\n    setAccounts(detail.data.accounts);\r\n    setSelectedGender(detail.data.gender);\r\n    setSelectedContract(detail.data.contract.type);\r\n    setSelectedDate(detail.data.contract.startDate);\r\n  };\r\n\r\n  const onSubmitAccount = (data) => {\r\n    if (data.isUpdate) {\r\n      const index = accounts.findIndex((item) => item.id === data.id);\r\n      const accounstTmp = [...accounts];\r\n      accounstTmp[index] = data;\r\n      setAccounts(accounstTmp);\r\n    } else {\r\n      setAccounts([...accounts, data]);\r\n    }\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onDismissAccount = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onShowDialog = (data) => {\r\n    DialogActions.show({\r\n      title: \" حساب بانکی\",\r\n      component: (\r\n        <Account\r\n          onSubmit={onSubmitAccount}\r\n          onDismiss={onDismissAccount}\r\n          defaultValues={data}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const onAddAccount = () => {\r\n    onShowDialog();\r\n  };\r\n\r\n  const handleEditAccount = (data) => {\r\n    onShowDialog(data);\r\n  };\r\n\r\n  const handleDeleteAccount = (id) => {\r\n    DialogActions.show({\r\n      confirm: true,\r\n      title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n      onAction: async () => {\r\n        await deleteAccountRequest.execute(null, id);\r\n        setAccounts(accounts.filter((item) => item.id !== id));\r\n        DialogActions.hide();\r\n      },\r\n      size: \"sm\",\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const handleChangeGender = (e) => {\r\n    setSelectedGender(e.target.value);\r\n  };\r\n\r\n  const onChangeContract = (e) => {\r\n    setSelectedContract(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {!detailEmployeeRequest.pending ? (\r\n          <Grid item lg={6} sm={12} className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n              <Typography\r\n                className={classes.title}\r\n                variant=\"h6\"\r\n                id=\"tableTitle\"\r\n                component=\"div\"\r\n              >\r\n                {id ? \"ویرایش پرسنل\" : \"افزودن پرسنل\"}\r\n              </Typography>\r\n\r\n              <Grid container spacing={3}>\r\n                <Fragment>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.firstName}\r\n                            helperText={\r\n                              errors.firstName ? errors.firstName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"firstName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام خانوادگی\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.lastName}\r\n                            helperText={\r\n                              errors.lastName ? errors.lastName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"lastName\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"موبایل\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.mobile}\r\n                            helperText={\r\n                              errors.mobile ? errors.mobile.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{\r\n                        minLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                        maxLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                      }}\r\n                      name=\"mobile\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <RadioGroup\r\n                      aria-label=\"gender\"\r\n                      name=\"gender1\"\r\n                      value={selectedGender}\r\n                      onChange={handleChangeGender}\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        justifyContent: \"space-around\",\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"M\"\r\n                        control={<Radio />}\r\n                        label=\"مرد\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"F\"\r\n                        control={<Radio />}\r\n                        label=\"زن\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </Grid>\r\n\r\n                  <Grid item lg={6} xs={12}>\r\n                    <TextField\r\n                      select\r\n                      label=\"نوع قرارداد\"\r\n                      value={selectedContract}\r\n                      onChange={onChangeContract}\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                    >\r\n                      {Constant.EMPLOYEE_CONTACRT.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            type=\"number\"\r\n                            variant=\"outlined\"\r\n                            label=\"مبلغ قرارداد\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.SPH}\r\n                            helperText={errors.SPH ? errors.SPH.message : \"\"}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"SPH\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12} className={classes.datePicker}>\r\n                    <DatePicker\r\n                      autoOk\r\n                      name=\"date\"\r\n                      label=\"تاریخ شروع قرارداد\"\r\n                      inputVariant=\"outlined\"\r\n                      okLabel=\"تأیید\"\r\n                      cancelLabel=\"لغو\"\r\n                      labelFunc={(date) =>\r\n                        date ? date.format(\"jYYYY/jMM/jDD\") : \"\"\r\n                      }\r\n                      value={selectedDate}\r\n                      onChange={handleDateChange}\r\n                      style={{ width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={onAddAccount}\r\n                    >\r\n                      افزودن حساب بانکی\r\n                    </Button>\r\n                  </Grid>\r\n                  {!!accounts.length && (\r\n                    <Grid item xs={12}>\r\n                      <Paper>\r\n                        <TableContainer style={{ padding: \"0 10px\" }}>\r\n                          <Table\r\n                            className={classes.table}\r\n                            size={\"medium\"}\r\n                            style={{ paddingRight: 10 }}\r\n                          >\r\n                            <TableHeader headCells={headCells} />\r\n\r\n                            <TableBody>\r\n                              {accounts.map((row) => {\r\n                                return (\r\n                                  <TableRow\r\n                                    hover\r\n                                    tabIndex={-1}\r\n                                    key={row.id}\r\n                                    style={{ paddingRight: 10 }}\r\n                                  >\r\n                                    <TableCell padding=\"none\">\r\n                                      <div\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          alignItems: \"center\",\r\n                                        }}\r\n                                      >\r\n                                        <img\r\n                                          src={`${Constant.API_ADDRESS}/${row.bank.logo}`}\r\n                                          alt={row.bank.label}\r\n                                          style={{\r\n                                            width: 25,\r\n                                            height: 25,\r\n                                            borderRadius: \"50%\",\r\n                                            marginLeft: 5,\r\n                                          }}\r\n                                        />\r\n                                        {row.bank.label || row.bank.name}\r\n                                      </div>\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                      {row.accountNumber}\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                      {row.accountCardNumber}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell\r\n                                      padding=\"none\"\r\n                                      style={{ textAlign: \"left\" }}\r\n                                    >\r\n                                      <IconButton\r\n                                        onClick={() => handleEditAccount(row)}\r\n                                      >\r\n                                        <EditIcon />\r\n                                      </IconButton>\r\n\r\n                                      <IconButton\r\n                                        onClick={() =>\r\n                                          handleDeleteAccount(row.id)\r\n                                        }\r\n                                      >\r\n                                        <DeleteIcon />\r\n                                      </IconButton>\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                );\r\n                              })}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </Paper>\r\n                    </Grid>\r\n                  )}\r\n\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"آدرس\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.address}\r\n                            helperText={\r\n                              errors.address ? errors.address.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"address\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            label=\"توضیحات\"\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            fullWidth\r\n                            error={!!errors.description}\r\n                            helperText={\r\n                              errors.description\r\n                                ? errors.description.message\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"description\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                      تایید\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={onReject}\r\n                    >\r\n                      بازگشت\r\n                    </Button>\r\n                  </Grid>\r\n                </Fragment>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\detail.js",["653","654"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { DeleteIcon, EditIcon } from \"../../components/icons\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport Account from \"./account\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"Name\",\r\n    label: \"نام بانک\",\r\n  },\r\n  { id: \"accountNumber\", label: \"شماره حساب \" },\r\n  {\r\n    id: \"CardNumber\",\r\n    label: \"شماره کارت\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  const [customerCategory, setCustomerCategory] = useState(1);\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addCustomerRequest = useApi({\r\n    method: \"post\",\r\n    url: `customer`,\r\n  });\r\n  const editCustomerRequest = useApi({\r\n    method: \"put\",\r\n    url: `customer/${id}`,\r\n  });\r\n  const detailCustomerRequest = useApi({\r\n    method: \"get\",\r\n    url: `customer/${id}`,\r\n  });\r\n\r\n  const customerCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `customer/category`,\r\n  });\r\n\r\n  const deleteAccountRequest = useApi({\r\n    method: \"delete\",\r\n    url: `account`,\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    const newAccounts = [];\r\n    accounts.map((item) => {\r\n      const newData = {\r\n        bankId: item.bank.value,\r\n        accountCardNumber: item.accountCardNumber,\r\n        accountNumber: item.accountNumber,\r\n        accountShaba: item.accountShaba,\r\n        description: item.description,\r\n      };\r\n      newAccounts.push(newData);\r\n    });\r\n\r\n    const allData = { ...data, accounts: newAccounts, customerCategory };\r\n    if (id) {\r\n      return await editCustomerRequest.execute(allData);\r\n    }\r\n    await addCustomerRequest.execute(allData);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/customer-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailCustomerRequest.execute();\r\n    setDetail(detail.data);\r\n    setCustomerCategory(detail.data.customerCategory);\r\n    setAccounts(detail.data.accounts);\r\n  };\r\n\r\n  const getCustomerCategory = async () => {\r\n    const detail = await customerCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  const onSubmitAccount = (data) => {\r\n    if (data.isUpdate) {\r\n      const index = accounts.findIndex((item) => item.id === data.id);\r\n      const accounstTmp = [...accounts];\r\n      accounstTmp[index] = data;\r\n      setAccounts(accounstTmp);\r\n    } else {\r\n      setAccounts([...accounts, data]);\r\n    }\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onDismissAccount = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onShowDialog = (data) => {\r\n    DialogActions.show({\r\n      title: \" حساب بانکی\",\r\n      component: (\r\n        <Account\r\n          onSubmit={onSubmitAccount}\r\n          onDismiss={onDismissAccount}\r\n          defaultValues={data}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const onAddAccount = () => {\r\n    onShowDialog();\r\n  };\r\n\r\n  const handleEditAccount = (data) => {\r\n    onShowDialog(data);\r\n  };\r\n\r\n  const handleDeleteAccount = (id) => {\r\n    DialogActions.show({\r\n      confirm: true,\r\n      title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n      onAction: async () => {\r\n        await deleteAccountRequest.execute(null, id);\r\n        setAccounts(accounts.filter((item) => item.id !== id));\r\n        DialogActions.hide();\r\n      },\r\n      size: \"sm\",\r\n      disableCloseButton: false,\r\n    });\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setCustomerCategory(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomerCategory();\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {!detailCustomerRequest.pending ? (\r\n          <Grid item lg={6} sm={12} className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n              <Typography\r\n                className={classes.title}\r\n                variant=\"h6\"\r\n                id=\"tableTitle\"\r\n                component=\"div\"\r\n              >\r\n                {id ? \"ویرایش مشتری\" : \"افزودن مشتری\"}\r\n              </Typography>\r\n\r\n              <Grid container spacing={3}>\r\n                <Fragment>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.firstName}\r\n                            helperText={\r\n                              errors.firstName ? errors.firstName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"firstName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام خانوادگی\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.lastName}\r\n                            helperText={\r\n                              errors.lastName ? errors.lastName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"lastName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"تلفن\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.phone}\r\n                            helperText={\r\n                              errors.phone ? errors.phone.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"phone\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"موبایل\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.mobile}\r\n                            helperText={\r\n                              errors.mobile ? errors.mobile.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{\r\n                        minLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                        maxLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                      }}\r\n                      name=\"mobile\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"مانده از قبل\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.accountRemaining}\r\n                            helperText={\r\n                              errors.accountRemaining\r\n                                ? errors.accountRemaining.message\r\n                                : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"accountRemaining\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    {!!category.length && customerCategory && (\r\n                      <TextField\r\n                        select\r\n                        label=\"دسته بندی\"\r\n                        value={customerCategory}\r\n                        onChange={onChangeCategory}\r\n                        variant=\"outlined\"\r\n                        error={!!errors.customerCategory}\r\n                        helperText={\r\n                          errors.customerCategory\r\n                            ? errors.customerCategory.message\r\n                            : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      >\r\n                        {category.map((option) => (\r\n                          <MenuItem key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={onAddAccount}\r\n                    >\r\n                      افزودن حساب بانکی\r\n                    </Button>\r\n                  </Grid>\r\n                  {!!accounts.length && (\r\n                    <Grid item xs={12}>\r\n                      <Paper>\r\n                        <TableContainer style={{ padding: \"0 10px\" }}>\r\n                          <Table\r\n                            className={classes.table}\r\n                            size={\"medium\"}\r\n                            style={{ paddingRight: 10 }}\r\n                          >\r\n                            <TableHeader headCells={headCells} />\r\n\r\n                            <TableBody>\r\n                              {accounts.map((row) => {\r\n                                return (\r\n                                  <TableRow\r\n                                    hover\r\n                                    tabIndex={-1}\r\n                                    key={row.id}\r\n                                    style={{ paddingRight: 10 }}\r\n                                  >\r\n                                    <TableCell padding=\"none\">\r\n                                      <div\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          alignItems: \"center\",\r\n                                        }}\r\n                                      >\r\n                                        <img\r\n                                          src={`${Constant.API_ADDRESS}${row.bank.logo}`}\r\n                                          alt={row.bank.label}\r\n                                          style={{\r\n                                            width: 25,\r\n                                            height: 25,\r\n                                            borderRadius: \"50%\",\r\n                                            marginLeft: 5,\r\n                                          }}\r\n                                        />\r\n                                        {row.bank.name || row.bank.label}\r\n                                      </div>\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                      {row.accountNumber}\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                      {row.accountCardNumber}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell\r\n                                      padding=\"none\"\r\n                                      style={{ textAlign: \"left\" }}\r\n                                    >\r\n                                      <IconButton\r\n                                        onClick={() => handleEditAccount(row)}\r\n                                      >\r\n                                        <EditIcon />\r\n                                      </IconButton>\r\n\r\n                                      <IconButton\r\n                                        onClick={() =>\r\n                                          handleDeleteAccount(row.id)\r\n                                        }\r\n                                      >\r\n                                        <DeleteIcon />\r\n                                      </IconButton>\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                );\r\n                              })}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </Paper>\r\n                    </Grid>\r\n                  )}\r\n\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"آدرس\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.address}\r\n                            helperText={\r\n                              errors.address ? errors.address.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"address\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            label=\"توضیحات\"\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            fullWidth\r\n                            error={!!errors.description}\r\n                            helperText={\r\n                              errors.description\r\n                                ? errors.description.message\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"description\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                      تایید\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={onReject}\r\n                    >\r\n                      بازگشت\r\n                    </Button>\r\n                  </Grid>\r\n                </Fragment>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\detail.js",["655"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport Permission from \"./permission\";\r\nimport dialogAction from \"../../redux/actions/dialogAction\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const action = getQueryString(\"action\");\r\n  const [detail, setDetail] = useState({});\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [isPassword, setIsPassword] = useState(true);\r\n  const addUserRequest = useApi({\r\n    method: \"post\",\r\n    url: `user`,\r\n  });\r\n  const editUserRequest = useApi({\r\n    method: \"put\",\r\n    url: `user/${id}`,\r\n  });\r\n  const detailUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user/${id}`,\r\n  });\r\n\r\n  const onChangeViewClick = function () {\r\n    setIsPassword(!isPassword);\r\n  };\r\n\r\n  const onSubmitPermission = async (data, permissions) => {\r\n    console.log(data, permissions);\r\n    const value = { ...data, permissions };\r\n    if (id) {\r\n      await editUserRequest.execute(value);\r\n    } else {\r\n      await addUserRequest.execute(value);\r\n    }\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onDismissPermission = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onShowPermissionDialog = (data) => {\r\n    dialogAction.show({\r\n      title: \"دسترسی ها\",\r\n      component: (\r\n        <Permission\r\n          defaultPermissions={detail?.permissions}\r\n          onSubmit={(value) => onSubmitPermission(data, value)}\r\n          onDismiss={onDismissPermission}\r\n        />\r\n      ),\r\n      size: \"md\",\r\n      confirm: false,\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    onShowPermissionDialog(data);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/user-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailUserRequest.execute();\r\n    setDetail(detail.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailUserRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش کاربر\" : \"افزودن کاربر\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.firstName}\r\n                          helperText={\r\n                            errors.firstName ? errors.firstName.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"firstName\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام خانوادگی\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.lastName}\r\n                          helperText={\r\n                            errors.lastName ? errors.lastName.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"lastName\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام کاربری\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.username}\r\n                          helperText={\r\n                            errors.username ? errors.username.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"username\"\r\n                  />\r\n                </Grid>\r\n                {action === \"add\" && (\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"رمز عبور\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.password}\r\n                            helperText={\r\n                              errors.password ? errors.password.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            type={isPassword ? \"password\" : \"text\"}\r\n                            InputProps={{\r\n                              endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                  <i\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    className={clsx(\r\n                                      \"material-icons-round\",\r\n                                      classes.icon,\r\n                                    )}\r\n                                    onClick={onChangeViewClick}\r\n                                  >\r\n                                    {isPassword\r\n                                      ? \"visibility_off\"\r\n                                      : \"visibility\"}\r\n                                  </i>\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{\r\n                        required: Constant.VALIDATION.REQUIRED,\r\n                        minLength: {\r\n                          value: 5,\r\n                          message: Constant.VALIDATION.PASSWORD,\r\n                        },\r\n                      }}\r\n                      name=\"password\"\r\n                    />\r\n                  </Grid>\r\n                )}\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"موبایل\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.mobile}\r\n                          helperText={\r\n                            errors.mobile ? errors.mobile.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{\r\n                      minLength: {\r\n                        value: 11,\r\n                        message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                      },\r\n                      maxLength: {\r\n                        value: 11,\r\n                        message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                      },\r\n                    }}\r\n                    name=\"mobile\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"تلفن\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.phone}\r\n                          helperText={errors.phone ? errors.phone.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"phone\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"آدرس\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.address}\r\n                          helperText={\r\n                            errors.address ? errors.address.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"address\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\Header.js",["656"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Chip,\r\n  Divider,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nimport {\r\n  Menu as MenuIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Person as AccountIcon,\r\n  ArrowForward as ArrowForwardIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\nimport useStyles from \"./styles\";\r\nimport { Badge, Typography } from \"../Wrappers\";\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\nimport { useUserState } from \"../../context/UserContext\";\r\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { persianNumber, getDayOfWeek } from \"../../helpers/utils\";\r\nimport clsx from \"clsx\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport dialogAction from \"../../redux/actions/dialogAction\";\r\nimport ChangePassword from \"./ChangePassword\";\r\nimport Clock from \"react-live-clock\";\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n  const history = useHistory();\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var userDispatch = useUserDispatch();\r\n  const location = useLocation();\r\n  var [mailMenu, setMailMenu] = useState(null);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var { currentUser } = useUserState();\r\n  const [cheques, setCheques] = useState([]);\r\n\r\n  const getDashboardRequest = useApi({\r\n    method: \"get\",\r\n    url: `notify/cheque`,\r\n  });\r\n\r\n  const getChequeNotify = async () => {\r\n    const notify = await getDashboardRequest.execute();\r\n\r\n    setCheques(notify.data);\r\n  };\r\n\r\n  const onShowAllCheque = () => {\r\n    history.push(\"/app/cheque-list\");\r\n  };\r\n\r\n  const onSubmitChangePassword = (data) => {\r\n    console.log(data);\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onDismissChangePassword = () => {\r\n    dialogAction.hide();\r\n  };\r\n\r\n  const onChangePassword = () => {\r\n    dialogAction.show({\r\n      title: \"تغییر پسورد\",\r\n      component: (\r\n        <ChangePassword\r\n          onSubmit={onSubmitChangePassword}\r\n          onDismiss={onDismissChangePassword}\r\n        />\r\n      ),\r\n      size: \"xs\",\r\n      disableCloseButton: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChequeNotify();\r\n  }, [location]);\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n        >\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowForwardIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n          سیستم حسابداری\r\n        </Typography>\r\n\r\n        <div className={classes.grow} />\r\n        <div style={{ display: \"flex\" }}>\r\n          <Typography variant=\"h6\" style={{ margin: \"0 10px\" }}>\r\n            {getDayOfWeek(new Date())}\r\n          </Typography>\r\n          <Typography variant=\"h6\">\r\n            {persianNumber(new Date().toLocaleDateString(\"fa-IR\"))}\r\n          </Typography>\r\n          <Typography variant=\"h6\" style={{ margin: \"0 10px\" }}>\r\n            <Clock\r\n              format={\"HH:mm:ss\"}\r\n              ticking={true}\r\n              timezone={\"Asia/Tehran\"}\r\n            />\r\n          </Typography>\r\n        </div>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={(e) => {\r\n            setMailMenu(e.currentTarget);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge badgeContent={cheques?.length} color=\"secondary\">\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          className={classes.headerMenuButton}\r\n          aria-controls=\"profile-menu\"\r\n          onClick={(e) => setProfileMenu(e.currentTarget)}\r\n        >\r\n          <AccountIcon classes={{ root: classes.headerIcon }} />\r\n        </IconButton>\r\n        <Menu\r\n          id=\"mail-menu\"\r\n          open={Boolean(mailMenu)}\r\n          anchorEl={mailMenu}\r\n          onClose={() => setMailMenu(null)}\r\n          MenuListProps={{ className: classes.headerMenuList }}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h6\" weight=\"medium\">\r\n              یادآوری چک ها\r\n            </Typography>\r\n            <Button color=\"primary\" onClick={onShowAllCheque}>\r\n              نمایش همه چک ها\r\n            </Button>\r\n          </div>\r\n          <Divider />\r\n          {cheques?.map((message) => (\r\n            <MenuItem key={message.id} className={classes.messageNotification}>\r\n              <Typography variant=\"h6\">\r\n                {persianNumber(\r\n                  new Date(message.chequeDueDate).toLocaleDateString(\"fa-IR\"),\r\n                )}\r\n              </Typography>\r\n              <Typography variant=\"h6\">{message.person}</Typography>\r\n              <Typography variant=\"h6\">\r\n                {persianNumber(message.price)}\r\n              </Typography>\r\n              <Typography variant=\"h6\">\r\n                <Chip\r\n                  label={Constant.PAYMENT_TYPE[message.type]}\r\n                  className={clsx(classes.chip, classes[message.type])}\r\n                />\r\n              </Typography>\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n        <Menu\r\n          id=\"profile-menu\"\r\n          open={Boolean(profileMenu)}\r\n          anchorEl={profileMenu}\r\n          onClose={() => setProfileMenu(null)}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              {currentUser.username}\r\n            </Typography>\r\n          </div>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={onChangePassword}\r\n            >\r\n              تغییر پسورد\r\n            </Typography>\r\n          </MenuItem>\r\n\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={() => signOut(userDispatch, props.history)}\r\n            >\r\n              خروج از سیستم\r\n            </Typography>\r\n          </MenuItem>\r\n        </Menu>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\list.js",["657","658"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString, hasPermission } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport FilterComponent from \"./filter\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  {\r\n    id: \"mobile\",\r\n    label: \"موبایل\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n  { id: \"car\", label: \"خودرو\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList() {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [search, setSearch] = useState();\r\n  const [filter, setFilter] = useState();\r\n  const [orderBy, setOrderBy] = useState(\"firstName\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/driver-detail\");\r\n  };\r\n\r\n  const getDriverRequest = useApi({\r\n    method: \"get\",\r\n    url: decodeURIComponent(\r\n      `driver?${convertParamsToQueryString({\r\n        page,\r\n        order,\r\n        orderBy,\r\n        pageSize,\r\n        search,\r\n        filter,\r\n      })}`,\r\n    ),\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `driver`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/driver-detail?id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n      transaction: () => {\r\n        history.push(`/app/driver-transaction?id=${id}`);\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const onFilter = (data) => {\r\n    setFilter(data);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const driverList = await getDriverRequest.execute();\r\n    setList(driverList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, filter]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getDriverRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست رانندگان\"\r\n                    onAdd={onAdd}\r\n                    FilterComponent={<FilterComponent onFilter={onFilter} />}\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {row.firstName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.lastName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.category.name}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                              <TableCell padding=\"none\">{row.phone}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.carName}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"transaction\", title: \"تراکنش ها\" },\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row.id, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getDriverRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={list.length}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\Dashboard.js",["659","660","661","662","663","664","665","666","667","668","669"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\list.js",["670"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString, hasPermission } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport Transfer from \"./transfer\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام صندوق\",\r\n  },\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع\",\r\n  },\r\n  {\r\n    id: \"logo\",\r\n    label: \"بانک\",\r\n  },\r\n  { id: \"amount\", label: \"موجودی\" },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/cash-detail\");\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `cashdesk?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const deleteCashRequest = useApi({\r\n    method: \"delete\",\r\n    url: `cashdesk`,\r\n  });\r\n\r\n  const transferCashDesk = useApi({\r\n    method: \"post\",\r\n    url: \"cashdesk/transfer\",\r\n  });\r\n\r\n  const onDismissTransfer = () => {\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onSubmitTransfer = async (data) => {\r\n    await transferCashDesk.execute(data);\r\n    getData();\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const handleAction = (row, type) => {\r\n    const types = {\r\n      transaction: () => {\r\n        history.push(`/app/cash-transaction?cashId=${row.id}`);\r\n      },\r\n      edit: () => {\r\n        history.push(`/app/cash-detail?id=${row.id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteCashRequest.execute(null, row.id);\r\n            setList(list.filter((item) => item.id !== row.id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n      transfer: () => {\r\n        DialogActions.show({\r\n          title: \"انتقال بین صندوق ها\",\r\n          component: (\r\n            <Transfer\r\n              onSubmit={onSubmitTransfer}\r\n              onDismiss={onDismissTransfer}\r\n              source={row.id}\r\n            />\r\n          ),\r\n          size: \"xs\",\r\n          confirm: false,\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const cashList = await getCashRequest.execute();\r\n    setList(cashList.data);\r\n    setTotal(cashList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getCashRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست صندوق ها\"\r\n                    onAdd={onAdd}\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">{row.name}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.type === \"CASH\" ? \"نقدی\" : \"بانکی\"}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.bank && (\r\n                                  <img\r\n                                    style={{ width: 40, height: 40 }}\r\n                                    alt={row.bank.name}\r\n                                    src={`${Constant.API_ADDRESS}/${row.bank.logo}`}\r\n                                  />\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">{row.amount}</TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"transaction\", title: \"تراکنش\" },\r\n                                    { id: \"transfer\", title: \"انتقال\" },\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getCashRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\list.js",["671"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString, hasPermission } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\nimport AmountBrif from \"./amountBrif\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام انبار\",\r\n  },\r\n  {\r\n    id: \"category\",\r\n    label: \"دسته بندی انبار\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [page, setPage] = useState(0);\r\n  const [search, setSearch] = useState();\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/depot-detail\");\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getDepotRequest = useApi({\r\n    method: \"get\",\r\n    url: `depot?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `depot`,\r\n  });\r\n\r\n  const handleAction = (row, type) => {\r\n    const types = {\r\n      amount: () => {\r\n        DialogActions.show({\r\n          title: \"موجودی در انبار ها\",\r\n          component: (\r\n            <AmountBrif\r\n              onSubmit={() => {\r\n                DialogActions.hide();\r\n              }}\r\n              depotId={row.id}\r\n            />\r\n          ),\r\n          size: \"xs\",\r\n          confirm: false,\r\n          disableCloseButton: true,\r\n        });\r\n      },\r\n\r\n      edit: () => {\r\n        history.push(`/app/depot-detail?id=${row.id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, row.id);\r\n            setList(list.filter((item) => item.id !== row.id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const depotList = await getDepotRequest.execute();\r\n    setList(depotList.data);\r\n    setTotal(depotList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, pageSize, search]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getDepotRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست انبار ها\"\r\n                    onAdd={onAdd}\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">{row.name}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.depotCategory}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">{row.phone}</TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"amount\", title: \"موجودی\" },\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getDepotRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\list.js",["672"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString, hasPermission } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport AmountBrif from \"./amountBrif\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\nimport Transform from \"./transfer\";\r\nimport unitAction from \"../../redux/actions/unitAction\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام کالا\",\r\n  },\r\n  {\r\n    id: \"category\",\r\n    label: \"دسته بندی\",\r\n  },\r\n  {\r\n    id: \"amount\",\r\n    label: \"موجودی کل\",\r\n  },\r\n  {\r\n    id: \"DefaultUnit\",\r\n    label: \"واحد پیش فرض\",\r\n  },\r\n  { id: \"unit\", label: \" واحد شمارشی\" },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList() {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/product-detail\");\r\n  };\r\n\r\n  const getProductRequest = useApi({\r\n    method: \"get\",\r\n    url: `product?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `product`,\r\n  });\r\n\r\n  const transferRequest = useApi({\r\n    method: \"post\",\r\n    url: `depot/transfer`,\r\n  });\r\n\r\n  const addDriverRequest = useApi({\r\n    method: \"post\",\r\n    url: `driver`,\r\n  });\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const onSubmitTransfer = async (data) => {\r\n    if (data.isAddDriver) {\r\n      await addDriverRequest.execute(data.newDriver);\r\n      await transferRequest.execute(data);\r\n    } else {\r\n      await transferRequest.execute(data);\r\n    }\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const handleAction = (row, type) => {\r\n    const { id } = row;\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/product-detail?id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n      amount: () => {\r\n        DialogActions.show({\r\n          title: \"موجودی در انبار ها\",\r\n          component: (\r\n            <AmountBrif\r\n              onSubmit={() => {\r\n                DialogActions.hide();\r\n              }}\r\n              data={row.stocks}\r\n            />\r\n          ),\r\n          size: \"xs\",\r\n          confirm: false,\r\n          disableCloseButton: true,\r\n        });\r\n      },\r\n      transaction: () => {},\r\n\r\n      transfer: () => {\r\n        console.log(row);\r\n        let units;\r\n        const allUnits = unitAction\r\n          .getProductUnit()\r\n          .filter((item) => item.value === row.unitBaseId)[0];\r\n        if (allUnits) {\r\n          units = allUnits.children;\r\n        }\r\n        DialogActions.show({\r\n          title: \"انتقال بین انبار ها\",\r\n          component: (\r\n            <Transform\r\n              onDismiss={() => {\r\n                DialogActions.hide();\r\n              }}\r\n              onSubmit={onSubmitTransfer}\r\n              productId={row.id}\r\n              units={units}\r\n            />\r\n          ),\r\n          size: \"xs\",\r\n          confirm: false,\r\n          disableCloseButton: true,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const productList = await getProductRequest.execute();\r\n    setList(productList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, pageSize, search]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getProductRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست کالا ها\"\r\n                    onAdd={onAdd}\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">{row.name}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.categories.join(\",\")}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.totalStock}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.defaultUnit}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.unitBase}\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"amount\", title: \"موجودی ها\" },\r\n                                    { id: \"transaction\", title: \"تراکنش ها\" },\r\n                                    {\r\n                                      id: \"transfer\",\r\n                                      title: \"انتقال بین انبار\",\r\n                                    },\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getProductRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={list.length}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\list.js",["673"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  convertParamsToQueryString,\r\n  persianNumber,\r\n  hasPermission,\r\n} from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\nimport FilterComponent from \"./filter\";\r\n\r\nconst headCells = [\r\n  { id: \"personType\" },\r\n  {\r\n    id: \"person\",\r\n    label: \"نام طرف\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"تاریخ\",\r\n  },\r\n  { id: \"price\", label: \"مبلغ\" },\r\n  {\r\n    id: \"typr\",\r\n    label: \"نوع\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const paymentType = getQueryString(\"type\");\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"date\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [type, setType] = useState(paymentType);\r\n  const [filter, setFilter] = useState();\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(`/app/payment-detail?type=${type}`);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getPaymentRequest = useApi({\r\n    method: \"get\",\r\n    url: decodeURIComponent(\r\n      `payment?${convertParamsToQueryString({\r\n        page,\r\n        order,\r\n        orderBy,\r\n        pageSize,\r\n        search,\r\n        type,\r\n        filter,\r\n      })}`,\r\n    ),\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `payment`,\r\n  });\r\n\r\n  const handleAction = (row, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/payment-detail?type=${row.type}&id=${row.id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, row.id);\r\n            setList(list.filter((item) => item.id !== row.id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const onChangeType = (e, value) => {\r\n    setType(value);\r\n  };\r\n\r\n  const onFilter = (data) => {\r\n    setFilter(data);\r\n  };\r\n\r\n  const getTableTitle = () => {\r\n    if (type === \"INCOME\") {\r\n      return \"لیست دریافتی ها\";\r\n    } else if (type === \"OUTCOME\") {\r\n      return \"لیست پرداختی ها\";\r\n    }\r\n    return \"لیست دریافتی ها و پرداختی ها\";\r\n  };\r\n\r\n  const getData = async () => {\r\n    const paymentList = await getPaymentRequest.execute();\r\n    setList(paymentList.data);\r\n    setTotal(paymentList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, type, filter]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getPaymentRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title={getTableTitle()}\r\n                    onAdd={type !== \"ALL\" && onAdd}\r\n                    handleSearch={onSearch}\r\n                    FilterComponent={<FilterComponent onFilter={onFilter} />}\r\n                  />\r\n                  <div className={classes.tab}>\r\n                    <Tabs\r\n                      value={type}\r\n                      onChange={onChangeType}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      centered\r\n                      variant=\"fullWidth\"\r\n                    >\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.allIcon,\r\n                            )}\r\n                          >\r\n                            sync\r\n                          </i>\r\n                        }\r\n                        label=\"کل تراکنش ها\"\r\n                        value=\"ALL\"\r\n                      />\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.incomeIcon,\r\n                            )}\r\n                          >\r\n                            trending_up\r\n                          </i>\r\n                        }\r\n                        label=\"دریافتی ها\"\r\n                        value=\"INCOME\"\r\n                      />\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.outgoIcon,\r\n                            )}\r\n                          >\r\n                            trending_down\r\n                          </i>\r\n                        }\r\n                        label=\"پرداختی ها\"\r\n                        value=\"OUTCOME\"\r\n                      />\r\n                    </Tabs>\r\n                  </div>\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {row.paymentname}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">{row.person}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  new Date(row.date).toLocaleDateString(\r\n                                    \"fa-IR\",\r\n                                  ),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  Number(row.price).toLocaleString(),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                <Chip\r\n                                  label={Constant.PAYMENT_TYPE[row.type]}\r\n                                  className={clsx(\r\n                                    classes.type,\r\n                                    classes[row.type],\r\n                                  )}\r\n                                />\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getPaymentRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\list.js",["674"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  convertParamsToQueryString,\r\n  persianNumber,\r\n  hasPermission,\r\n} from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport dialogAction from \"../../redux/actions/dialogAction\";\r\nimport CashSelector from \"./cashSelector\";\r\nimport SpendCheque from \"./spendCheque\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \" date\",\r\n    label: \"تاریخ سررسید\",\r\n  },\r\n  {\r\n    id: \"number\",\r\n    label: \"شماره چک\",\r\n  },\r\n  {\r\n    id: \"bank\",\r\n    label: \"بانک\",\r\n  },\r\n  { id: \"amount\", label: \"مبلغ\" },\r\n  { id: \"person\", label: \"طرف حساب\" },\r\n  { id: \"cashdesk\", label: \"محل چک\" },\r\n  { id: \"type\", label: \"نوع تراکنش\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"chequeDueDate\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [paymentType, setPaymentType] = useState(\"ALL\");\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getChequeRequest = useApi({\r\n    method: \"get\",\r\n    url: `cheque?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n      paymentType,\r\n    })}`,\r\n  });\r\n\r\n  const spendRequest = useApi({\r\n    method: \"post\",\r\n    url: `cheque/spend`,\r\n  });\r\n\r\n  const sleepRequest = useApi({\r\n    method: \"post\",\r\n    url: `cheque/sleep`,\r\n  });\r\n\r\n  const onSelectCash = async (cashdeskId, chequeId) => {\r\n    await sleepRequest.execute({ chequeId, cashdeskId });\r\n    getData();\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const onSubmitSpend = async (data) => {\r\n    console.log(data);\r\n    await spendRequest.execute(data);\r\n    getData();\r\n    DialogActions.hide();\r\n  };\r\n\r\n  const handleAction = (row, type) => {\r\n    const types = {\r\n      sleep: () => {\r\n        dialogAction.show({\r\n          title: \"انتخاب صندوق\",\r\n          component: (\r\n            <CashSelector\r\n              chequeId={row.id}\r\n              onSelect={onSelectCash}\r\n              onDismiss={() => DialogActions.hide()}\r\n            />\r\n          ),\r\n          size: \"lg\",\r\n          confirm: false,\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n      spend: () => {\r\n        dialogAction.show({\r\n          title: \"خرج چک\",\r\n          component: (\r\n            <SpendCheque\r\n              chequeId={row.id}\r\n              onSubmit={onSubmitSpend}\r\n              onDismiss={() => DialogActions.hide()}\r\n            />\r\n          ),\r\n          size: \"sm\",\r\n          confirm: false,\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n      revert: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از برداشتن این چک مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            onSelectCash({ cashdeskId: 1, chequeId: row.id });\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const onChangeType = (data, e) => {\r\n    setPaymentType(e);\r\n  };\r\n\r\n  const getActionOptions = (data) => {\r\n    if (data.type === \"INCOME\" && data.status === \"PENDING\") {\r\n      return (\r\n        <TableCell padding=\"none\">\r\n          <TableRowMenu\r\n            options={[\r\n              { id: \"sleep\", title: \"خواباندن به حساب\" },\r\n              { id: \"spend\", title: \"خرج کردن چک\" },\r\n            ]}\r\n            hadleAction={(type) => handleAction(data, type)}\r\n          />\r\n        </TableCell>\r\n      );\r\n    } else if (data.type === \"INCOME\" && data.status === \"SLEEP\") {\r\n      return (\r\n        <TableCell padding=\"none\">\r\n          <TableRowMenu\r\n            options={[{ id: \"revert\", title: \"برداشتن از حساب\" }]}\r\n            hadleAction={(type) => handleAction(data, type)}\r\n          />\r\n        </TableCell>\r\n      );\r\n    } else {\r\n      return <TableCell padding=\"none\" />;\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const chequeList = await getChequeRequest.execute();\r\n    setList(chequeList.data);\r\n    setTotal(chequeList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, paymentType]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getChequeRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop title=\"لیست چک ها\" handleSearch={onSearch} />\r\n                  <div className={classes.tab}>\r\n                    <Tabs\r\n                      variant=\"fullWidth\"\r\n                      value={paymentType}\r\n                      onChange={onChangeType}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      centered\r\n                    >\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.allIcon,\r\n                            )}\r\n                          >\r\n                            sync\r\n                          </i>\r\n                        }\r\n                        label=\"کل چک ها\"\r\n                        value=\"ALL\"\r\n                      />\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.incomeIcon,\r\n                            )}\r\n                          >\r\n                            trending_up\r\n                          </i>\r\n                        }\r\n                        label=\"چک های دریافتی\"\r\n                        value=\"INCOME\"\r\n                      />\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.outgoIcon,\r\n                            )}\r\n                          >\r\n                            trending_down\r\n                          </i>\r\n                        }\r\n                        label=\"چک های پرداختی\"\r\n                        value=\"OUTCOME\"\r\n                      />\r\n                    </Tabs>\r\n                  </div>\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  new Date(\r\n                                    row.chequeDueDate,\r\n                                  ).toLocaleDateString(\"fa-IR\"),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(row.chequeNumber)}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.bank && (\r\n                                  <img\r\n                                    style={{ width: 40, height: 40 }}\r\n                                    alt={row.bank.name}\r\n                                    src={`${Constant.API_ADDRESS}/${row.bank.logo}`}\r\n                                  />\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(row.price)}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">{row.person}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.cashDeskName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                <Chip\r\n                                  label={Constant.PAYMENT_TYPE[row.type]}\r\n                                  className={clsx(\r\n                                    classes.chip,\r\n                                    classes[row.type],\r\n                                  )}\r\n                                />\r\n                              </TableCell>\r\n\r\n                              {getActionOptions(row)}\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getChequeRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={10}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\paymnet.js",["675"],"import React, { useState, useEffect } from \"react\";\r\nimport { TextField, Button, Grid, MenuItem } from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport moment from \"moment\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport styles from \"./style\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst Payment = ({ onSubmit, onDismiss, defaultValues, paymentType, type }) => {\r\n  const [banks, setBanks] = useState([]);\r\n  const [chequeDueDate, handleChequeDueDateChange] = useState(moment());\r\n  const [selectedTransaction, setSelectedTransaction] = useState(\"CARD\");\r\n  const [selectedBank, setSelectedBank] = useState(defaultValues?.bankId || 1);\r\n  const [cashes, setCashes] = useState([]);\r\n  const [selectedCash, setSelectedCash] = useState(\r\n    defaultValues?.cashDeskId || 5,\r\n  );\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const classes = styles();\r\n\r\n  const getBankRequest = useApi({\r\n    method: \"get\",\r\n    url: `bank`,\r\n  });\r\n\r\n  const getCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `cashdesk/picker`,\r\n  });\r\n\r\n  const getBanks = async () => {\r\n    const result = await getBankRequest.execute();\r\n    setBanks(result.data);\r\n  };\r\n\r\n  const getCashes = async () => {\r\n    const result = await getCashRequest.execute();\r\n    setCashes(result.data);\r\n  };\r\n\r\n  const getSelectedBank = () => {\r\n    return banks.find((item) => item.value === selectedBank);\r\n  };\r\n\r\n  const getSelectedCash = () => {\r\n    return cashes.find((item) => item.value === selectedCash);\r\n  };\r\n\r\n  const onDone = (data) => {\r\n    const newId = uuid();\r\n    let value;\r\n    if (type === \"NAGHD\") {\r\n      value = {\r\n        ...data,\r\n        id: defaultValues ? defaultValues.id : newId,\r\n        cashDeskId: selectedCash,\r\n        cashDesk: getSelectedCash(),\r\n        isUpdate: !!defaultValues,\r\n      };\r\n    } else if (type === \"CARD\") {\r\n      value = {\r\n        ...data,\r\n        id: defaultValues ? defaultValues.id : newId,\r\n        cashDeskId: selectedCash,\r\n        bankId: selectedBank,\r\n        cashDesk: getSelectedCash(),\r\n        bank: getSelectedBank(),\r\n        transactionType: selectedTransaction,\r\n        isUpdate: !!defaultValues,\r\n      };\r\n    } else {\r\n      value = {\r\n        ...data,\r\n        id: defaultValues ? defaultValues.id : newId,\r\n        cashDeskId: selectedCash,\r\n        bankId: selectedBank,\r\n        cashDesk: getSelectedCash(),\r\n        bank: getSelectedBank(),\r\n        chequeDueDate: chequeDueDate._d,\r\n        isUpdate: !!defaultValues,\r\n      };\r\n    }\r\n    console.log(onSubmit);\r\n    return onSubmit(value, type, !!defaultValues);\r\n  };\r\n\r\n  const onChangeBank = (e) => {\r\n    setSelectedBank(e.target.value);\r\n  };\r\n\r\n  const onChangeTransaction = (e) => {\r\n    setSelectedTransaction(e.target.value);\r\n  };\r\n\r\n  const onChangeCash = (e) => {\r\n    setSelectedCash(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBanks();\r\n    getCashes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(defaultValues);\r\n  }, [reset, defaultValues]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onDone)}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          {type === \"NAGHD\" && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  select\r\n                  label=\"صندوق\"\r\n                  onChange={onChangeCash}\r\n                  value={selectedCash}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  name=\"cash\"\r\n                >\r\n                  {cashes.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"مبلغ نقدی\"\r\n                        type=\"number\"\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.price}\r\n                        helperText={errors.price ? errors.price.message : \"\"}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  name=\"price\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {type === \"CARD\" && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  select\r\n                  label=\"صندوق\"\r\n                  onChange={onChangeCash}\r\n                  value={selectedCash}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  name=\"cash\"\r\n                >\r\n                  {cashes.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  select\r\n                  label=\"نوع تراکنش\"\r\n                  onChange={onChangeTransaction}\r\n                  value={selectedTransaction}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  name=\"cash\"\r\n                >\r\n                  {Constant.BANK_TRANSACTION_TYPE.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"مبلغ \"\r\n                        type=\"number\"\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.price}\r\n                        helperText={errors.price ? errors.price.message : \"\"}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                  name=\"price\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"شماره رهگیری\"\r\n                        number\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.trackingCode}\r\n                        helperText={\r\n                          errors.trackingCode ? errors.trackingCode.message : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  name=\"trackingCode\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  select\r\n                  label=\"بانک\"\r\n                  onChange={onChangeBank}\r\n                  value={selectedBank}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  name=\"bank\"\r\n                  SelectProps={{\r\n                    classes: {\r\n                      select: classes.rootSelect,\r\n                    },\r\n                  }}\r\n                >\r\n                  {banks.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      <img\r\n                        src={`${Constant.API_ADDRESS}/${option.logo}`}\r\n                        alt={option.label}\r\n                        style={{\r\n                          width: 25,\r\n                          height: 25,\r\n                          borderRadius: \"50%\",\r\n                          marginLeft: 10,\r\n                        }}\r\n                      />\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {type === \"CHECK\" && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  select\r\n                  label=\"صندوق\"\r\n                  onChange={onChangeCash}\r\n                  value={selectedCash}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  name=\"cash\"\r\n                >\r\n                  {cashes.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"مبلغ چک\"\r\n                        type=\"number\"\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.price}\r\n                        helperText={errors.price ? errors.price.message : \"\"}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                  name=\"price\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"شماره چک\"\r\n                        number\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.chequeNumber}\r\n                        helperText={\r\n                          errors.chequeNumber ? errors.chequeNumber.message : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  name=\"chequeNumber\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  select\r\n                  label=\"بانک\"\r\n                  onChange={onChangeBank}\r\n                  value={selectedBank}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  name=\"bank\"\r\n                  SelectProps={{\r\n                    classes: {\r\n                      select: classes.rootSelect,\r\n                    },\r\n                  }}\r\n                >\r\n                  {banks.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      <img\r\n                        src={`${Constant.API_ADDRESS}/${option.logo}`}\r\n                        alt={option.label}\r\n                        style={{\r\n                          width: 25,\r\n                          height: 25,\r\n                          borderRadius: \"50%\",\r\n                          marginLeft: 10,\r\n                        }}\r\n                      />\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"شعبه\"\r\n                        number\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.bankBranch}\r\n                        helperText={\r\n                          errors.bankBranch ? errors.bankBranch.message : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  name=\"bankBranch\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.datePicker}>\r\n                <DatePicker\r\n                  name=\"date\"\r\n                  label=\"تاریخ سررسید\"\r\n                  inputVariant=\"outlined\"\r\n                  okLabel=\"تأیید\"\r\n                  cancelLabel=\"لغو\"\r\n                  labelFunc={(date) =>\r\n                    date ? date.format(\"jYYYY/jMM/jDD\") : \"\"\r\n                  }\r\n                  value={chequeDueDate}\r\n                  onChange={handleChequeDueDateChange}\r\n                  style={{ width: \"100%\" }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  render={({ onChange, value, name }) => {\r\n                    return (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"در وجه\"\r\n                        number\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        error={!!errors.chequePayTo}\r\n                        helperText={\r\n                          errors.chequePayTo ? errors.chequePayTo.message : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  name=\"chequePayTo\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={handleSubmit(onDone)}\r\n          >\r\n            تایید\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n            انصراف\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\account.js",["676"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\account.js",["677"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\permission.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\ChangePassword.js",["678"],"import React, { useState, useRef } from \"react\";\r\nimport { Grid, TextField, Button, InputAdornment } from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport clsx from \"clsx\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport storageService from \"../../services/storage\";\r\n\r\nconst MainDetail = ({ onSubmit, onDismiss }) => {\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [isPassword, setIsPassword] = useState(true);\r\n  const passwordRef = useRef(null);\r\n\r\n  const changePasswordRequest = useApi({\r\n    method: \"put\",\r\n    url: `user/password/change`,\r\n  });\r\n\r\n  const onChangeViewClick = function () {\r\n    setIsPassword(!isPassword);\r\n  };\r\n\r\n  const onDone = (data) => {\r\n    const { id } = JSON.parse(\r\n      storageService.getItem(Constant.STORAGE.CURRENT_USER),\r\n    );\r\n    changePasswordRequest.execute({\r\n      id,\r\n      oldPassword: data.prePassword,\r\n      newPassword: data.password,\r\n    });\r\n    onSubmit(data);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onDone)}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\" رمز عبور قبلی\"\r\n                  name={name}\r\n                  onChange={onChange}\r\n                  value={value}\r\n                  error={!!errors.prePassword}\r\n                  helperText={\r\n                    errors.prePassword ? errors.prePassword.message : \"\"\r\n                  }\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type={\"password\"}\r\n                />\r\n              );\r\n            }}\r\n            rules={{\r\n              required: Constant.VALIDATION.REQUIRED,\r\n              minLength: {\r\n                value: 5,\r\n                message: Constant.VALIDATION.PASSWORD,\r\n              },\r\n            }}\r\n            name=\"prePassword\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"رمز عبور\"\r\n                  name={name}\r\n                  onChange={onChange}\r\n                  value={value}\r\n                  error={!!errors.password}\r\n                  helperText={errors.password ? errors.password.message : \"\"}\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type={isPassword ? \"password\" : \"text\"}\r\n                  inputRef={passwordRef}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <i\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className={clsx(\"material-icons-round\")}\r\n                          onClick={onChangeViewClick}\r\n                        >\r\n                          {isPassword ? \"visibility_off\" : \"visibility\"}\r\n                        </i>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              );\r\n            }}\r\n            rules={{\r\n              required: Constant.VALIDATION.REQUIRED,\r\n              minLength: {\r\n                value: 5,\r\n                message: Constant.VALIDATION.PASSWORD,\r\n              },\r\n            }}\r\n            name=\"password\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"تکرار رمز عبور \"\r\n                  name={name}\r\n                  onChange={onChange}\r\n                  value={value}\r\n                  error={!!errors.repassword}\r\n                  helperText={\r\n                    errors.repassword && \"تکرار رمز عبور با رمز عبور برابر نیست\"\r\n                  }\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type={\"password\"}\r\n                />\r\n              );\r\n            }}\r\n            rules={{\r\n              validate: (value) => value === passwordRef.current.value,\r\n            }}\r\n            name=\"repassword\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n            تایید\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={onDismiss}>\r\n            انصراف\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MainDetail;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\driver\\filter.js",["679"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, TextField, MenuItem, Button, Divider } from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\n\r\nconst Filter = ({ onFilter }) => {\r\n  const [filterData, setFilterData] = useState();\r\n  const [category, setCategory] = useState([]);\r\n  const [driverCategory, setDriverCategory] = useState(1);\r\n\r\n  const driverCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `driver/category`,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setFilterData(event.target.value);\r\n  };\r\n\r\n  const getDriverCategory = async () => {\r\n    const detail = await driverCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setDriverCategory(e.target.value);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (typeof onFilter === \"function\") {\r\n      onFilter(`{ name: ${filterData}, category: ${driverCategory} }`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDriverCategory();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={3} alignItems=\"center\" style={{ padding: 10 }}>\r\n      <Grid item lg={3} xs={12}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"نام\"\r\n          onChange={handleChange(\"name\")}\r\n          value={filterData}\r\n          fullWidth\r\n          size=\"small\"\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12}>\r\n        {!!category.length && driverCategory && (\r\n          <TextField\r\n            select\r\n            label=\"دسته بندی\"\r\n            value={driverCategory}\r\n            onChange={onChangeCategory}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            size=\"small\"\r\n          >\r\n            {category.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        )}\r\n      </Grid>\r\n\r\n      <Grid item lg={3} xs={12}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n          تایید\r\n        </Button>\r\n      </Grid>\r\n      <Divider style={{ width: \"100%\" }} />\r\n    </Grid>\r\n  );\r\n};\r\nexport default Filter;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cash\\transfer.js",["680"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\n\r\nexport default function MainDetail({ source, onSubmit, onDismiss }) {\r\n  const [cashes, setCashes] = useState([]);\r\n  const [selectedDestination, setSelectedDestination] = useState(5);\r\n  const [amount, setAmount] = useState();\r\n\r\n  const getCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `cashdesk/picker`,\r\n  });\r\n\r\n  const onDone = () => {\r\n    onSubmit({\r\n      sourceId: source,\r\n      destinationId: selectedDestination,\r\n      amount,\r\n    });\r\n  };\r\n\r\n  const onChange = (e, type) => {\r\n    if (type === \"destination\") {\r\n      setSelectedDestination(e.target.value);\r\n    } else {\r\n      setAmount(e.target.value);\r\n    }\r\n  };\r\n\r\n  const getCashes = async () => {\r\n    const result = await getCashRequest.execute();\r\n    setCashes(result.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCashes();\r\n  }, []);\r\n\r\n  return (\r\n    <form>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            select\r\n            label=\"صندوق مقصد\"\r\n            onChange={(e) => onChange(e, \"destination\")}\r\n            value={selectedDestination}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            size=\"small\"\r\n            name=\"cash\"\r\n          >\r\n            {cashes.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            label=\"مبلغ\"\r\n            name={\"amount\"}\r\n            onChange={(e) => onChange(e, \"amount\")}\r\n            value={amount}\r\n            fullWidth\r\n            size=\"small\"\r\n          />\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <Button variant=\"contained\" color=\"primary\" onClick={onDone}>\r\n            تایید\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n            بازگشت\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\amountBrif.js",["681","682"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { persianNumber } from \"../../helpers/utils\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام کالا\",\r\n  },\r\n  { id: \"amounts\", label: \"موجودی ها\" },\r\n];\r\n\r\nexport default function MainDetail({ depotId, onSubmit }) {\r\n  const [data, setData] = useState([]);\r\n  const getAmountRequest = useApi({\r\n    method: \"get\",\r\n    url: `product/depot/${depotId}`,\r\n  });\r\n  const getAmount = async () => {\r\n    const result = await getAmountRequest.execute();\r\n    setData(result.data);\r\n  };\r\n  useEffect(() => {\r\n    getAmount();\r\n  }, []);\r\n  return (\r\n    <Grid container spacing={3} alignItems=\"center\">\r\n      {!!data.length && (\r\n        <Grid item xs={12}>\r\n          <TableContainer style={{ padding: \"0 10px\" }}>\r\n            <Table size={\"medium\"} style={{ paddingRight: 10 }}>\r\n              <TableHeader headCells={headCells} />\r\n\r\n              <TableBody>\r\n                {data.map((row) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableCell padding=\"none\">{row.name}</TableCell>\r\n                      <TableCell padding=\"none\">\r\n                        <ul>\r\n                          {row.stocks.map((item) => {\r\n                            return (\r\n                              <li>\r\n                                <span style={{ margin: \"0 -5px 0 5px\" }}>\r\n                                  {persianNumber(item.stock)}\r\n                                </span>\r\n\r\n                                <span>{item.unit}</span>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                        </ul>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={12}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n          بازگشت\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\depot\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\Dot.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\transfer.js",["683","684"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  IconButton,\r\n  Collapse,\r\n} from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nexport default function MainDetail({ productId, units, onSubmit, onDismiss }) {\r\n  const [selectedUnit, setSelectedUnit] = useState(units[0].value);\r\n  const [selectedSource, setSelectedSource] = useState(5);\r\n  const [selectedDestination, setSelectedDestination] = useState(5);\r\n  const [amount, setAmount] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [depotPicker, setDepotPicker] = useState([]);\r\n  const [driverPicker, setDriverPicker] = useState([]);\r\n  const [isAddDriver, setIsAddDriver] = useState(false);\r\n  const [category, setCategory] = useState([]);\r\n  const [driverCategory, setDriverCategory] = useState(1);\r\n  const [newDriver, setNewDriver] = useState();\r\n\r\n  const getDepotRequest = useApi({\r\n    method: \"get\",\r\n    url: `depot/picker`,\r\n  });\r\n\r\n  const getDriversRequest = useApi({\r\n    method: \"get\",\r\n    url: \"driver\",\r\n  });\r\n\r\n  const driverCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `driver/category`,\r\n  });\r\n\r\n  const getDriverCategory = async () => {\r\n    const detail = await driverCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  const onDone = () => {\r\n    onSubmit({\r\n      sourceDepotId: selectedSource,\r\n      destinationDepotId: selectedDestination,\r\n      productId,\r\n      amount,\r\n      unit: selectedUnit,\r\n      description,\r\n      isAddDriver,\r\n      newDriver,\r\n    });\r\n  };\r\n\r\n  const getDrivers = async () => {\r\n    const customerList = await getDriversRequest.execute();\r\n    setDriverPicker(customerList.data);\r\n  };\r\n\r\n  const onChange = (e, type) => {\r\n    const types = {\r\n      source: () => {\r\n        setSelectedSource(e.target.value);\r\n      },\r\n      destination: () => {\r\n        setSelectedDestination(e.target.value);\r\n      },\r\n      amount: () => {\r\n        setAmount(e.target.value);\r\n      },\r\n      description: () => {\r\n        setDescription(e.target.value);\r\n      },\r\n      unit: () => {\r\n        setSelectedUnit(e.target.value);\r\n      },\r\n      driverName: () => {\r\n        setNewDriver({ ...newDriver, driverName: e.target.value });\r\n      },\r\n      driverCarName: () => {\r\n        setNewDriver({ ...newDriver, driverCarName: e.target.value });\r\n      },\r\n      driverCarPelak: () => {\r\n        setNewDriver({ ...newDriver, driverCarPelak: e.target.value });\r\n      },\r\n      driverCategory: () => {\r\n        setNewDriver({ ...newDriver, driverCategory: e.target.value });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      return types[type]();\r\n    }\r\n  };\r\n\r\n  const onChangeDriver = (e, value) => {\r\n    setDriverPicker(value);\r\n  };\r\n\r\n  const getDepotPicker = async () => {\r\n    const result = await getDepotRequest.execute();\r\n    setDepotPicker(result.data);\r\n  };\r\n\r\n  const onAddDriver = () => {\r\n    setIsAddDriver(!isAddDriver);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDriverCategory();\r\n    getDrivers();\r\n    getDepotPicker();\r\n  }, []);\r\n\r\n  return (\r\n    <form>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            select\r\n            label=\"انبار مبدا\"\r\n            value={selectedSource}\r\n            onChange={(e) => onChange(e, \"source\")}\r\n            variant=\"outlined\"\r\n            name=\"depot\"\r\n            fullWidth\r\n            size=\"small\"\r\n          >\r\n            {depotPicker.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            select\r\n            label=\"انبار مقصد\"\r\n            value={selectedDestination}\r\n            onChange={(e) => onChange(e, \"destination\")}\r\n            variant=\"outlined\"\r\n            name=\"depot\"\r\n            fullWidth\r\n            size=\"small\"\r\n          >\r\n            {depotPicker.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            label=\"مقدار\"\r\n            name={\"amount\"}\r\n            onChange={(e) => onChange(e, \"amount\")}\r\n            value={amount}\r\n            fullWidth\r\n            size=\"small\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            select\r\n            label=\"واحد\"\r\n            value={selectedUnit}\r\n            onChange={(e) => onChange(e, \"unit\")}\r\n            variant=\"outlined\"\r\n            name=\"unit\"\r\n            fullWidth\r\n            size=\"small\"\r\n          >\r\n            {units.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            multiline\r\n            variant=\"outlined\"\r\n            label=\"توضیحات\"\r\n            name={\"description\"}\r\n            onChange={(e) => onChange(e, \"description\")}\r\n            value={description}\r\n            fullWidth\r\n            size=\"small\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            onChange={onChangeDriver}\r\n            options={driverPicker}\r\n            getOptionLabel={(option) =>\r\n              `${option.firstName} ${option.lastName}`\r\n            }\r\n            fullWidth\r\n            size=\"small\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"انتخاب راننده\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n          <IconButton\r\n            color=\"primary\"\r\n            style={{ marginRight: 10 }}\r\n            onClick={onAddDriver}\r\n          >\r\n            <i className=\"material-icons-round\">\r\n              {isAddDriver ? \"clear\" : \"add\"}\r\n            </i>\r\n          </IconButton>\r\n        </Grid>\r\n\r\n        <Collapse in={isAddDriver}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} style={{ margin: \"0 10px\" }}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"نام راننده\"\r\n                onChange={(e) => onChange(e, \"driverName\")}\r\n                value={newDriver?.driverName}\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} style={{ margin: \"0 10px\" }}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"نام ماشین\"\r\n                onChange={(e) => onChange(e, \"driverCarName\")}\r\n                value={newDriver?.driverCarName}\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} style={{ margin: \"0 10px\" }}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"پلاک\"\r\n                onChange={(e) => onChange(e, \"driverCarPelak\")}\r\n                value={newDriver?.driverCarPelak}\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} style={{ margin: \"0 10px\" }}>\r\n              {!!category.length && driverCategory && (\r\n                <TextField\r\n                  select\r\n                  label=\"دسته بندی\"\r\n                  value={driverCategory}\r\n                  onChange={(e) => onChange(e, \"driverCategory\")}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                >\r\n                  {category.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Collapse>\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <Button variant=\"contained\" color=\"primary\" onClick={onDone}>\r\n            تایید\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n            بازگشت\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\payment\\filter.js",["685","686"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, TextField, MenuItem, Button, Divider } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n}));\r\nconst Filter = ({ onFilter }) => {\r\n  const classes = useStyles();\r\n  const [selectedPerson, setSelectedPerson] = useState();\r\n  const [selectedFromDate, handleFromDateChange] = useState(moment());\r\n  const [selectedToDate, handleToDateChange] = useState(moment());\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n  const getCustomersRequest = useApi({\r\n    method: \"get\",\r\n    url: \"customer\",\r\n  });\r\n\r\n  const onChangePerson = (e, value) => {\r\n    setSelectedPerson(value);\r\n  };\r\n\r\n  const onChnageDate = (e, type) => {\r\n    console.log(e, type);\r\n    if (type === \"from\") {\r\n      handleFromDateChange(e);\r\n    } else {\r\n      handleToDateChange(e);\r\n    }\r\n  };\r\n\r\n  const getCustomers = async () => {\r\n    const customerList = await getCustomersRequest.execute();\r\n    setCustomers(customerList.data);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (typeof onFilter === \"function\") {\r\n      onFilter(\r\n        `{customerId:${\r\n          selectedPerson ? selectedPerson.id : null\r\n        },from:${selectedFromDate._d.toISOString()},to:${selectedToDate._d.toISOString()}}`,\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomers();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={3} alignItems=\"center\" style={{ padding: 10 }}>\r\n      <Grid item lg={3} xs={12} style={{ display: \"flex\" }}>\r\n        <Autocomplete\r\n          id=\"combo-box-demo\"\r\n          onChange={onChangePerson}\r\n          options={customers}\r\n          getOptionLabel={(option) => `${option.firstName} ${option.lastName}`}\r\n          fullWidth\r\n          size=\"small\"\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"انتخاب شخص\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12} className={classes.datePicker}>\r\n        <DatePicker\r\n          autoOk\r\n          name=\"date\"\r\n          label=\"از تاریخ\"\r\n          inputVariant=\"outlined\"\r\n          okLabel=\"تأیید\"\r\n          cancelLabel=\"لغو\"\r\n          labelFunc={(date) => (date ? date.format(\"jYYYY/jMM/jDD\") : \"\")}\r\n          value={selectedFromDate}\r\n          onChange={(e) => onChnageDate(e, \"from\")}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12} className={classes.datePicker}>\r\n        <DatePicker\r\n          autoOk\r\n          name=\"date\"\r\n          label=\"تا تاریخ\"\r\n          inputVariant=\"outlined\"\r\n          okLabel=\"تأیید\"\r\n          cancelLabel=\"لغو\"\r\n          labelFunc={(date) => (date ? date.format(\"jYYYY/jMM/jDD\") : \"\")}\r\n          value={selectedToDate}\r\n          onChange={(e) => onChnageDate(e, \"to\")}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n          تایید\r\n        </Button>\r\n      </Grid>\r\n      <Divider style={{ width: \"100%\" }} />\r\n    </Grid>\r\n  );\r\n};\r\nexport default Filter;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\amountBrif.js",["687"],"import React from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"amount\",\r\n    label: \"موجودی\",\r\n  },\r\n  { id: \"unit\", label: \"واحد\" },\r\n  {\r\n    id: \"depot\",\r\n    label: \"انبار\",\r\n  },\r\n];\r\n\r\nexport default function MainDetail({ data, onSubmit }) {\r\n  return (\r\n    <Grid container spacing={3} alignItems=\"center\">\r\n      {!!data.length && (\r\n        <Grid item xs={12}>\r\n          <TableContainer style={{ padding: \"0 10px\" }}>\r\n            <Table size={\"medium\"} style={{ paddingRight: 10 }}>\r\n              <TableHeader headCells={headCells} />\r\n\r\n              <TableBody>\r\n                {data.map((row) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableCell padding=\"none\">{row.stock}</TableCell>\r\n                      <TableCell padding=\"none\">{row.unit}</TableCell>\r\n                      <TableCell padding=\"none\">{row.depot}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={12}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n          بازگشت\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\spendCheque.js",["688","689"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n  rootSelect: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingBottom: 7,\r\n    paddingTop: 7,\r\n  },\r\n}));\r\n\r\nexport default function SpendCheque({ chequeId, onDismiss, onSubmit }) {\r\n  const classes = useStyles();\r\n  const [selectedPerson, setSelectedPerson] = useState();\r\n  const [selectedDate, handleDateChange] = useState(moment());\r\n  const [persons, setPersons] = useState([]);\r\n  const [description, setDescription] = useState();\r\n\r\n  const getPersonsRequest = useApi({\r\n    method: \"get\",\r\n    url: \"customer\",\r\n  });\r\n\r\n  const getPersons = async () => {\r\n    const personList = await getPersonsRequest.execute();\r\n    setPersons(personList.data);\r\n  };\r\n\r\n  const onDone = () => {\r\n    onSubmit({\r\n      chequeId,\r\n      personId: selectedPerson.id,\r\n      personType: selectedPerson.type,\r\n      date: selectedDate._d,\r\n      description,\r\n    });\r\n    console.log(selectedPerson, selectedDate, chequeId);\r\n  };\r\n\r\n  const onChangePerson = (e, value) => {\r\n    setSelectedPerson(value);\r\n  };\r\n\r\n  const onChangeDescription = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPersons();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Fragment>\r\n        <Grid item xs={12} style={{ display: \"flex\" }}>\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            onChange={onChangePerson}\r\n            options={persons}\r\n            getOptionLabel={(option) =>\r\n              `${option.firstName} ${option.lastName}`\r\n            }\r\n            fullWidth\r\n            size=\"small\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"انتخاب شخص\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.datePicker}>\r\n          <DatePicker\r\n            autoOk\r\n            name=\"date\"\r\n            label=\"تاریخ ثبت\"\r\n            inputVariant=\"outlined\"\r\n            okLabel=\"تأیید\"\r\n            cancelLabel=\"لغو\"\r\n            labelFunc={(date) => (date ? date.format(\"jYYYY/jMM/jDD\") : \"\")}\r\n            value={selectedDate}\r\n            onChange={handleDateChange}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            label=\"بابت\"\r\n            name={\"description\"}\r\n            onChange={onChangeDescription}\r\n            value={description}\r\n            fullWidth\r\n            size=\"small\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <Button variant=\"contained\" color=\"primary\" onClick={onDone}>\r\n            تایید\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n            بازگشت\r\n          </Button>\r\n        </Grid>\r\n      </Fragment>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\cashSelector.js",["690","691","692"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n  Chip,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    label: \"نام صندوق\",\r\n  },\r\n\r\n  {\r\n    id: \"logo\",\r\n    label: \"بانک\",\r\n  },\r\n  { id: \"amount\", label: \"موجودی\" },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function CashSelector({ onSelect, onDismiss, chequeId }) {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getCashRequest = useApi({\r\n    method: \"get\",\r\n    url: `cashdesk?type=BANK&${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const handleAction = (id) => {\r\n    console.log(id);\r\n    onSelect(id, chequeId);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const cashList = await getCashRequest.execute();\r\n    setList(cashList.data);\r\n    setTotal(cashList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <div style={{ marginTop: -50 }}>\r\n      <TableTop handleSearch={onSearch} />\r\n      <TableContainer style={{ padding: \"0 10px\" }}>\r\n        <Table\r\n          className={classes.table}\r\n          size={\"medium\"}\r\n          style={{ paddingRight: 10 }}\r\n        >\r\n          <TableHeader\r\n            classes={classes}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={list.length}\r\n            headCells={headCells}\r\n          />\r\n          <TableBody>\r\n            {list.map((row) => {\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  tabIndex={-1}\r\n                  key={row.id}\r\n                  style={{ paddingRight: 10 }}\r\n                >\r\n                  <TableCell padding=\"none\">{row.name}</TableCell>\r\n\r\n                  <TableCell padding=\"none\">\r\n                    {row.bank && (\r\n                      <img\r\n                        style={{ width: 40, height: 40 }}\r\n                        alt={row.bank.name}\r\n                        src={`${Constant.API_ADDRESS}/${row.bank.logo}`}\r\n                      />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell padding=\"none\">{row.amount}</TableCell>\r\n\r\n                  <TableCell padding=\"none\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => handleAction(row.id)}\r\n                    >\r\n                      انتخاب حساب\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n            {!list.length && !getCashRequest.pending && (\r\n              <TableRow style={{ height: 53 }}>\r\n                <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                  <Typography variant=\"h6\">\r\n                    داده ای برای نمایش وجود ندارد\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePaging\r\n        count={total}\r\n        handleChangePage={handleChangePage}\r\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={pageSize}\r\n      />\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n      >\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={onDismiss}>\r\n          انصراف\r\n        </Button>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\cheque\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\list.js",["693"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport {\r\n  convertParamsToQueryString,\r\n  persianNumber,\r\n  hasPermission,\r\n} from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\nimport FilterComponent from \"./filter\";\r\n\r\nconst headCells = [\r\n  { id: \"id\", label: \"شماره\" },\r\n  {\r\n    id: \"person\",\r\n    label: \"مشتری\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"تاریخ\",\r\n  },\r\n  { id: \"price\", label: \"مبلغ\" },\r\n  {\r\n    id: \"category\",\r\n    label: \"دسته بندی\",\r\n  },\r\n  {\r\n    id: \"type\",\r\n    label: \"نوع\",\r\n  },\r\n\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const invoiceType = getQueryString(\"type\");\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"date\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [filter, setFilter] = useState();\r\n  const [total, setTotal] = useState(0);\r\n  const [type, setType] = useState(invoiceType);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(`/app/invoice-detail?type=${type}`);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getInvoiceRequest = useApi({\r\n    method: \"get\",\r\n    url: decodeURIComponent(\r\n      `invoice?${convertParamsToQueryString({\r\n        page,\r\n        order,\r\n        orderBy,\r\n        pageSize,\r\n        search,\r\n        type,\r\n        filter,\r\n      })}`,\r\n    ),\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `invoice`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/invoice-detail?type=${type}&id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const onChangeType = (e, value) => {\r\n    setType(value);\r\n  };\r\n\r\n  const getTableTitle = () => {\r\n    if (type === \"SELL\") {\r\n      return \"لیست فاکتورهای فروش \";\r\n    } else if (type === \"BUY\") {\r\n      return \"لیست فاکتورهای خرید\";\r\n    }\r\n    return \"لیست تمامی فاکتور ها\";\r\n  };\r\n\r\n  const getData = async () => {\r\n    const invoiceList = await getInvoiceRequest.execute();\r\n    setList(invoiceList.data);\r\n    setTotal(invoiceList.total);\r\n  };\r\n\r\n  const onFilter = (data) => {\r\n    setFilter(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize, type, filter]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getInvoiceRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title={getTableTitle()}\r\n                    onAdd={type !== \"ALL\" && onAdd}\r\n                    handleSearch={onSearch}\r\n                    FilterComponent={<FilterComponent onFilter={onFilter} />}\r\n                  />\r\n                  <div className={classes.tab}>\r\n                    <Tabs\r\n                      variant=\"fullWidth\"\r\n                      value={type}\r\n                      onChange={onChangeType}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      centered\r\n                    >\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.allIcon,\r\n                            )}\r\n                          >\r\n                            sync\r\n                          </i>\r\n                        }\r\n                        label=\"کل تراکنش ها\"\r\n                        value=\"ALL\"\r\n                      />\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.incomeIcon,\r\n                            )}\r\n                          >\r\n                            sell\r\n                          </i>\r\n                        }\r\n                        label=\"فاکتور های فروش\"\r\n                        value=\"SELL\"\r\n                      />\r\n                      <Tab\r\n                        icon={\r\n                          <i\r\n                            className={clsx(\r\n                              \"material-icons-round\",\r\n                              classes.outgoIcon,\r\n                            )}\r\n                          >\r\n                            shopping_basket\r\n                          </i>\r\n                        }\r\n                        label=\"فاکتور های خرید\"\r\n                        value=\"BUY\"\r\n                      />\r\n                    </Tabs>\r\n                  </div>\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">{row.id}</TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.globalCustomer\r\n                                  ? row.globalCustomer\r\n                                  : row.customer}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  new Date(row.date).toLocaleDateString(\r\n                                    \"fa-IR\",\r\n                                  ),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {persianNumber(\r\n                                  Number(row.price).toLocaleString(),\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.category}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                <Chip\r\n                                  label={Constant.INVOICE_TYPE[row.type]}\r\n                                  className={clsx(\r\n                                    classes.type,\r\n                                    classes[row.type],\r\n                                  )}\r\n                                />\r\n                              </TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row.id, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getInvoiceRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\list.js",["694"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\list.js",["695"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Wrappers\\Wrappers.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\list.js",["696"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString, hasPermission } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { Slide } from \"@material-ui/core\";\r\nimport TableSkeleton from \"../../components/Skeleton\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"username\",\r\n    label: \"نام کاربری\",\r\n  },\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"mobile\",\r\n    label: \"موبایل\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"username\");\r\n  const [search, setSearch] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(Constant.TABLE_PAGE_SIZE);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, Constant.TABLE_PAGE_SIZE));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/user-detail?action=add\");\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const getUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `user`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/user-detail?action=edit&id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const userList = await getUserRequest.execute();\r\n    setList(userList.data);\r\n    setTotal(userList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search, pageSize]);\r\n\r\n  return (\r\n    <>\r\n      {hasPermission(Constant.ALL_PERMISSIONS.CASH_LIST) && (\r\n        <Slide direction=\"down\" in={true}>\r\n          <div>\r\n            {getUserRequest.pending ? (\r\n              <TableSkeleton headCount={headCells} />\r\n            ) : (\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                  <TableTop\r\n                    title=\"لیست کاربران\"\r\n                    onAdd={onAdd}\r\n                    handleSearch={onSearch}\r\n                  />\r\n                  <TableContainer style={{ padding: \"0 10px\" }}>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size={\"medium\"}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableHeader\r\n                        classes={classes}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={list.length}\r\n                        headCells={headCells}\r\n                      />\r\n                      <TableBody>\r\n                        {list.map((row) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={row.id}\r\n                              style={{ paddingRight: 10 }}\r\n                            >\r\n                              <TableCell padding=\"none\">\r\n                                {row.username}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.firstName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">\r\n                                {row.lastName}\r\n                              </TableCell>\r\n                              <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                              <TableCell padding=\"none\">{row.phone}</TableCell>\r\n\r\n                              <TableCell padding=\"none\">\r\n                                <TableRowMenu\r\n                                  options={[\r\n                                    { id: \"edit\", title: \"ویرایش\" },\r\n                                    { id: \"delete\", title: \"حذف\" },\r\n                                  ]}\r\n                                  hadleAction={(type) =>\r\n                                    handleAction(row.id, type)\r\n                                  }\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {!list.length && !getUserRequest.pending && (\r\n                          <TableRow style={{ height: 53 }}>\r\n                            <TableCell\r\n                              colSpan={6}\r\n                              style={{ textAlign: \"center\" }}\r\n                            >\r\n                              <Typography variant=\"h6\">\r\n                                داده ای برای نمایش وجود ندارد\r\n                              </Typography>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePaging\r\n                    count={total}\r\n                    handleChangePage={handleChangePage}\r\n                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    page={page}\r\n                    rowsPerPage={pageSize}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Slide>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\Widget.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Paper\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\filter.js",["697","698"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, TextField, MenuItem, Button, Divider } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n}));\r\nconst Filter = ({ onFilter }) => {\r\n  const classes = useStyles();\r\n  const [selectedPerson, setSelectedPerson] = useState();\r\n  const [selectedFromDate, handleFromDateChange] = useState(moment());\r\n  const [selectedToDate, handleToDateChange] = useState(moment());\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n  const getCustomersRequest = useApi({\r\n    method: \"get\",\r\n    url: \"customer\",\r\n  });\r\n\r\n  const onChangePerson = (e, value) => {\r\n    setSelectedPerson(value);\r\n  };\r\n\r\n  const onChnageDate = (e, type) => {\r\n    if (type === \"from\") {\r\n      handleFromDateChange(e);\r\n    } else {\r\n      handleToDateChange(e);\r\n    }\r\n  };\r\n\r\n  const getCustomers = async () => {\r\n    const customerList = await getCustomersRequest.execute();\r\n    setCustomers(customerList.data);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (typeof onFilter === \"function\") {\r\n      onFilter(\r\n        `{customerId:${\r\n          selectedPerson ? selectedPerson.id : null\r\n        },from:${selectedFromDate._d.toISOString()},to:${selectedToDate._d.toISOString()}}`,\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomers();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={3} alignItems=\"center\" style={{ padding: 10 }}>\r\n      <Grid item lg={3} xs={12} style={{ display: \"flex\" }}>\r\n        <Autocomplete\r\n          id=\"combo-box-demo\"\r\n          onChange={onChangePerson}\r\n          options={customers}\r\n          getOptionLabel={(option) => `${option.firstName} ${option.lastName}`}\r\n          fullWidth\r\n          size=\"small\"\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"انتخاب شخص\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12} className={classes.datePicker}>\r\n        <DatePicker\r\n          autoOk\r\n          name=\"date\"\r\n          label=\"از تاریخ\"\r\n          inputVariant=\"outlined\"\r\n          okLabel=\"تأیید\"\r\n          cancelLabel=\"لغو\"\r\n          labelFunc={(date) => (date ? date.format(\"jYYYY/jMM/jDD\") : \"\")}\r\n          value={selectedFromDate}\r\n          onChange={(e) => onChnageDate(e, \"from\")}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12} className={classes.datePicker}>\r\n        <DatePicker\r\n          autoOk\r\n          name=\"date\"\r\n          label=\"تا تاریخ\"\r\n          inputVariant=\"outlined\"\r\n          okLabel=\"تأیید\"\r\n          cancelLabel=\"لغو\"\r\n          labelFunc={(date) => (date ? date.format(\"jYYYY/jMM/jDD\") : \"\")}\r\n          value={selectedToDate}\r\n          onChange={(e) => onChnageDate(e, \"to\")}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </Grid>\r\n      <Grid item lg={3} xs={12}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n          تایید\r\n        </Button>\r\n      </Grid>\r\n      <Divider style={{ width: \"100%\" }} />\r\n    </Grid>\r\n  );\r\n};\r\nexport default Filter;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\filter.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\filter.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\invoice\\OtherPayments.js",["699","700"],{"ruleId":"701","replacedBy":"702"},{"ruleId":"703","replacedBy":"704"},{"ruleId":"705","severity":1,"message":"706","line":1,"column":40,"nodeType":"707","messageId":"708","endLine":1,"endColumn":47},{"ruleId":"705","severity":1,"message":"709","line":25,"column":10,"nodeType":"707","messageId":"708","endLine":25,"endColumn":15},{"ruleId":"705","severity":1,"message":"710","line":1,"column":17,"nodeType":"707","messageId":"708","endLine":1,"endColumn":26},{"ruleId":"711","severity":1,"message":"712","line":4,"column":1,"nodeType":"713","endLine":12,"endColumn":3},{"ruleId":"705","severity":1,"message":"714","line":68,"column":9,"nodeType":"707","messageId":"708","endLine":68,"endColumn":16},{"ruleId":"715","severity":1,"message":"716","line":133,"column":6,"nodeType":"717","endLine":133,"endColumn":43,"suggestions":"718"},{"ruleId":"705","severity":1,"message":"719","line":14,"column":8,"nodeType":"707","messageId":"708","endLine":14,"endColumn":20},{"ruleId":"705","severity":1,"message":"714","line":58,"column":9,"nodeType":"707","messageId":"708","endLine":58,"endColumn":16},{"ruleId":"715","severity":1,"message":"716","line":117,"column":6,"nodeType":"717","endLine":117,"endColumn":45,"suggestions":"720"},{"ruleId":"705","severity":1,"message":"714","line":107,"column":9,"nodeType":"707","messageId":"708","endLine":107,"endColumn":16},{"ruleId":"705","severity":1,"message":"721","line":108,"column":9,"nodeType":"707","messageId":"708","endLine":108,"endColumn":11},{"ruleId":"715","severity":1,"message":"716","line":285,"column":6,"nodeType":"717","endLine":285,"endColumn":28,"suggestions":"722"},{"ruleId":"705","severity":1,"message":"723","line":67,"column":17,"nodeType":"707","messageId":"708","endLine":67,"endColumn":25},{"ruleId":"705","severity":1,"message":"724","line":68,"column":23,"nodeType":"707","messageId":"708","endLine":68,"endColumn":37},{"ruleId":"705","severity":1,"message":"725","line":69,"column":18,"nodeType":"707","messageId":"708","endLine":69,"endColumn":27},{"ruleId":"715","severity":1,"message":"716","line":145,"column":6,"nodeType":"717","endLine":145,"endColumn":37,"suggestions":"726"},{"ruleId":"727","severity":1,"message":"728","line":90,"column":25,"nodeType":"729","messageId":"730","endLine":90,"endColumn":27},{"ruleId":"715","severity":1,"message":"731","line":191,"column":6,"nodeType":"717","endLine":191,"endColumn":8,"suggestions":"732"},{"ruleId":"711","severity":1,"message":"733","line":12,"column":1,"nodeType":"713","endLine":30,"endColumn":2},{"ruleId":"711","severity":1,"message":"733","line":8,"column":1,"nodeType":"713","endLine":26,"endColumn":2},{"ruleId":"715","severity":1,"message":"734","line":229,"column":6,"nodeType":"717","endLine":229,"endColumn":8,"suggestions":"735"},{"ruleId":"715","severity":1,"message":"736","line":235,"column":6,"nodeType":"717","endLine":235,"endColumn":14,"suggestions":"737"},{"ruleId":"705","severity":1,"message":"738","line":11,"column":3,"nodeType":"707","messageId":"708","endLine":11,"endColumn":7},{"ruleId":"705","severity":1,"message":"739","line":12,"column":3,"nodeType":"707","messageId":"708","endLine":12,"endColumn":6},{"ruleId":"705","severity":1,"message":"740","line":13,"column":3,"nodeType":"707","messageId":"708","endLine":13,"endColumn":7},{"ruleId":"705","severity":1,"message":"741","line":28,"column":8,"nodeType":"707","messageId":"708","endLine":28,"endColumn":12},{"ruleId":"715","severity":1,"message":"716","line":138,"column":6,"nodeType":"717","endLine":138,"endColumn":37,"suggestions":"742"},{"ruleId":"711","severity":1,"message":"712","line":4,"column":1,"nodeType":"713","endLine":12,"endColumn":3},{"ruleId":"705","severity":1,"message":"743","line":24,"column":8,"nodeType":"707","messageId":"708","endLine":24,"endColumn":14},{"ruleId":"705","severity":1,"message":"744","line":95,"column":9,"nodeType":"707","messageId":"708","endLine":95,"endColumn":24},{"ruleId":"715","severity":1,"message":"716","line":117,"column":6,"nodeType":"717","endLine":117,"endColumn":37,"suggestions":"745"},{"ruleId":"705","severity":1,"message":"746","line":4,"column":3,"nodeType":"707","messageId":"708","endLine":4,"endColumn":8},{"ruleId":"705","severity":1,"message":"747","line":5,"column":3,"nodeType":"707","messageId":"708","endLine":5,"endColumn":12},{"ruleId":"705","severity":1,"message":"748","line":6,"column":3,"nodeType":"707","messageId":"708","endLine":6,"endColumn":17},{"ruleId":"705","severity":1,"message":"749","line":7,"column":3,"nodeType":"707","messageId":"708","endLine":7,"endColumn":12},{"ruleId":"705","severity":1,"message":"750","line":8,"column":3,"nodeType":"707","messageId":"708","endLine":8,"endColumn":11},{"ruleId":"705","severity":1,"message":"751","line":10,"column":3,"nodeType":"707","messageId":"708","endLine":10,"endColumn":13},{"ruleId":"715","severity":1,"message":"716","line":138,"column":6,"nodeType":"717","endLine":138,"endColumn":19,"suggestions":"752"},{"ruleId":"705","severity":1,"message":"753","line":6,"column":8,"nodeType":"707","messageId":"708","endLine":6,"endColumn":20},{"ruleId":"705","severity":1,"message":"754","line":2,"column":10,"nodeType":"707","messageId":"708","endLine":2,"endColumn":30},{"ruleId":"705","severity":1,"message":"755","line":4,"column":8,"nodeType":"707","messageId":"708","endLine":4,"endColumn":22},{"ruleId":"715","severity":1,"message":"756","line":48,"column":6,"nodeType":"717","endLine":48,"endColumn":8,"suggestions":"757"},{"ruleId":"715","severity":1,"message":"758","line":115,"column":6,"nodeType":"717","endLine":115,"endColumn":8,"suggestions":"759"},{"ruleId":"715","severity":1,"message":"760","line":90,"column":6,"nodeType":"717","endLine":90,"endColumn":8,"suggestions":"761"},{"ruleId":"727","severity":1,"message":"728","line":141,"column":24,"nodeType":"729","messageId":"730","endLine":141,"endColumn":26},{"ruleId":"715","severity":1,"message":"762","line":213,"column":6,"nodeType":"717","endLine":213,"endColumn":8,"suggestions":"763"},{"ruleId":"715","severity":1,"message":"764","line":168,"column":6,"nodeType":"717","endLine":168,"endColumn":8,"suggestions":"765"},{"ruleId":"715","severity":1,"message":"758","line":115,"column":6,"nodeType":"717","endLine":115,"endColumn":8,"suggestions":"766"},{"ruleId":"715","severity":1,"message":"767","line":375,"column":6,"nodeType":"717","endLine":375,"endColumn":8,"suggestions":"768"},{"ruleId":"715","severity":1,"message":"769","line":388,"column":6,"nodeType":"717","endLine":388,"endColumn":40,"suggestions":"770"},{"ruleId":"705","severity":1,"message":"771","line":7,"column":10,"nodeType":"707","messageId":"708","endLine":7,"endColumn":20},{"ruleId":"715","severity":1,"message":"772","line":285,"column":6,"nodeType":"717","endLine":285,"endColumn":16,"suggestions":"773"},{"ruleId":"715","severity":1,"message":"716","line":88,"column":6,"nodeType":"717","endLine":88,"endColumn":37,"suggestions":"774"},{"ruleId":"711","severity":1,"message":"712","line":6,"column":1,"nodeType":"713","endLine":24,"endColumn":3},{"ruleId":"715","severity":1,"message":"775","line":69,"column":6,"nodeType":"717","endLine":69,"endColumn":8,"suggestions":"776"},{"ruleId":"715","severity":1,"message":"716","line":208,"column":6,"nodeType":"717","endLine":208,"endColumn":52,"suggestions":"777"},{"ruleId":"715","severity":1,"message":"775","line":212,"column":6,"nodeType":"717","endLine":212,"endColumn":8,"suggestions":"778"},{"ruleId":"705","severity":1,"message":"740","line":9,"column":3,"nodeType":"707","messageId":"708","endLine":9,"endColumn":7},{"ruleId":"705","severity":1,"message":"741","line":13,"column":8,"nodeType":"707","messageId":"708","endLine":13,"endColumn":12},{"ruleId":"715","severity":1,"message":"716","line":97,"column":6,"nodeType":"717","endLine":97,"endColumn":37,"suggestions":"779"},{"ruleId":"727","severity":1,"message":"728","line":109,"column":25,"nodeType":"729","messageId":"730","endLine":109,"endColumn":27},{"ruleId":"715","severity":1,"message":"764","line":215,"column":6,"nodeType":"717","endLine":215,"endColumn":8,"suggestions":"780"},{"ruleId":"727","severity":1,"message":"728","line":90,"column":25,"nodeType":"729","messageId":"730","endLine":90,"endColumn":27},{"ruleId":"715","severity":1,"message":"781","line":187,"column":6,"nodeType":"717","endLine":187,"endColumn":8,"suggestions":"782"},{"ruleId":"715","severity":1,"message":"764","line":107,"column":6,"nodeType":"717","endLine":107,"endColumn":8,"suggestions":"783"},{"ruleId":"715","severity":1,"message":"784","line":90,"column":6,"nodeType":"717","endLine":90,"endColumn":16,"suggestions":"785"},{"ruleId":"705","severity":1,"message":"741","line":12,"column":8,"nodeType":"707","messageId":"708","endLine":12,"endColumn":12},{"ruleId":"715","severity":1,"message":"716","line":136,"column":6,"nodeType":"717","endLine":136,"endColumn":45,"suggestions":"786"},{"ruleId":"705","severity":1,"message":"787","line":6,"column":3,"nodeType":"707","messageId":"708","endLine":6,"endColumn":9},{"ruleId":"705","severity":1,"message":"788","line":7,"column":3,"nodeType":"707","messageId":"708","endLine":7,"endColumn":16},{"ruleId":"705","severity":1,"message":"789","line":8,"column":3,"nodeType":"707","messageId":"708","endLine":8,"endColumn":11},{"ruleId":"705","severity":1,"message":"790","line":13,"column":3,"nodeType":"707","messageId":"708","endLine":13,"endColumn":16},{"ruleId":"705","severity":1,"message":"791","line":17,"column":3,"nodeType":"707","messageId":"708","endLine":17,"endColumn":9},{"ruleId":"705","severity":1,"message":"792","line":43,"column":3,"nodeType":"707","messageId":"708","endLine":43,"endColumn":17},{"ruleId":"705","severity":1,"message":"793","line":49,"column":7,"nodeType":"707","messageId":"708","endLine":49,"endColumn":20},{"ruleId":"705","severity":1,"message":"794","line":54,"column":7,"nodeType":"707","messageId":"708","endLine":54,"endColumn":13},{"ruleId":"727","severity":1,"message":"728","line":227,"column":27,"nodeType":"729","messageId":"730","endLine":227,"endColumn":29},{"ruleId":"715","severity":1,"message":"795","line":236,"column":6,"nodeType":"717","endLine":236,"endColumn":8,"suggestions":"796"},{"ruleId":"705","severity":1,"message":"797","line":723,"column":10,"nodeType":"707","messageId":"708","endLine":723,"endColumn":26},{"ruleId":"715","severity":1,"message":"716","line":158,"column":6,"nodeType":"717","endLine":158,"endColumn":37,"suggestions":"798"},{"ruleId":"715","severity":1,"message":"716","line":138,"column":6,"nodeType":"717","endLine":138,"endColumn":37,"suggestions":"799"},{"ruleId":"715","severity":1,"message":"716","line":194,"column":6,"nodeType":"717","endLine":194,"endColumn":37,"suggestions":"800"},{"ruleId":"715","severity":1,"message":"716","line":159,"column":6,"nodeType":"717","endLine":159,"endColumn":51,"suggestions":"801"},{"ruleId":"715","severity":1,"message":"716","line":209,"column":6,"nodeType":"717","endLine":209,"endColumn":50,"suggestions":"802"},{"ruleId":"715","severity":1,"message":"803","line":104,"column":6,"nodeType":"717","endLine":104,"endColumn":8,"suggestions":"804"},{"ruleId":"715","severity":1,"message":"756","line":48,"column":6,"nodeType":"717","endLine":48,"endColumn":8,"suggestions":"805"},{"ruleId":"715","severity":1,"message":"756","line":48,"column":6,"nodeType":"717","endLine":48,"endColumn":8,"suggestions":"806"},{"ruleId":"705","severity":1,"message":"807","line":10,"column":42,"nodeType":"707","messageId":"708","endLine":10,"endColumn":47},{"ruleId":"715","severity":1,"message":"808","line":36,"column":6,"nodeType":"717","endLine":36,"endColumn":8,"suggestions":"809"},{"ruleId":"715","severity":1,"message":"810","line":38,"column":6,"nodeType":"717","endLine":38,"endColumn":8,"suggestions":"811"},{"ruleId":"705","severity":1,"message":"812","line":5,"column":3,"nodeType":"707","messageId":"708","endLine":5,"endColumn":8},{"ruleId":"715","severity":1,"message":"813","line":37,"column":6,"nodeType":"717","endLine":37,"endColumn":8,"suggestions":"814"},{"ruleId":"705","severity":1,"message":"815","line":23,"column":26,"nodeType":"707","messageId":"708","endLine":23,"endColumn":43},{"ruleId":"715","severity":1,"message":"816","line":116,"column":6,"nodeType":"717","endLine":116,"endColumn":8,"suggestions":"817"},{"ruleId":"705","severity":1,"message":"789","line":2,"column":27,"nodeType":"707","messageId":"708","endLine":2,"endColumn":35},{"ruleId":"715","severity":1,"message":"818","line":58,"column":6,"nodeType":"717","endLine":58,"endColumn":8,"suggestions":"819"},{"ruleId":"705","severity":1,"message":"812","line":5,"column":3,"nodeType":"707","messageId":"708","endLine":5,"endColumn":8},{"ruleId":"705","severity":1,"message":"812","line":3,"column":16,"nodeType":"707","messageId":"708","endLine":3,"endColumn":21},{"ruleId":"715","severity":1,"message":"820","line":71,"column":6,"nodeType":"717","endLine":71,"endColumn":8,"suggestions":"821"},{"ruleId":"705","severity":1,"message":"740","line":9,"column":3,"nodeType":"707","messageId":"708","endLine":9,"endColumn":7},{"ruleId":"705","severity":1,"message":"741","line":13,"column":8,"nodeType":"707","messageId":"708","endLine":13,"endColumn":12},{"ruleId":"715","severity":1,"message":"716","line":90,"column":6,"nodeType":"717","endLine":90,"endColumn":37,"suggestions":"822"},{"ruleId":"715","severity":1,"message":"716","line":163,"column":6,"nodeType":"717","endLine":163,"endColumn":51,"suggestions":"823"},{"ruleId":"715","severity":1,"message":"716","line":133,"column":6,"nodeType":"717","endLine":133,"endColumn":45,"suggestions":"824"},{"ruleId":"715","severity":1,"message":"716","line":136,"column":6,"nodeType":"717","endLine":136,"endColumn":45,"suggestions":"825"},{"ruleId":"715","severity":1,"message":"716","line":124,"column":6,"nodeType":"717","endLine":124,"endColumn":37,"suggestions":"826"},{"ruleId":"705","severity":1,"message":"789","line":2,"column":27,"nodeType":"707","messageId":"708","endLine":2,"endColumn":35},{"ruleId":"715","severity":1,"message":"818","line":57,"column":6,"nodeType":"717","endLine":57,"endColumn":8,"suggestions":"827"},{"ruleId":"715","severity":1,"message":"716","line":208,"column":6,"nodeType":"717","endLine":208,"endColumn":52,"suggestions":"828"},{"ruleId":"715","severity":1,"message":"775","line":212,"column":6,"nodeType":"717","endLine":212,"endColumn":8,"suggestions":"829"},"no-native-reassign",["830"],"no-negated-in-lhs",["831"],"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["832"],"'TableRowMenu' is defined but never used.",["833"],"'id' is assigned a value but never used.",["834"],"'setPrice' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'setDetail' is assigned a value but never used.",["835"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'getDetail', 'getDriverCategory', and 'id'. Either include them or remove the dependency array.",["836"],"Unexpected default export of anonymous function","React Hook useEffect has missing dependencies: 'getCustomerCategory', 'getDepotCategory', 'getDriverCategory', 'getInvoiceCategory', and 'getProductCategory'. Either include them or remove the dependency array.",["837"],"React Hook useEffect has a missing dependency: 'showEditModal'. Either include it or remove the dependency array.",["838"],"'Tabs' is defined but never used.","'Tab' is defined but never used.","'Chip' is defined but never used.","'clsx' is defined but never used.",["839"],"'Detail' is defined but never used.","'onDismissDetail' is assigned a value but never used.",["840"],"'Table' is defined but never used.","'TableBody' is defined but never used.","'TableContainer' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'Typography' is defined but never used.",["841"],"'defaultTheme' is defined but never used.","'cacheAdapterEnhancer' is defined but never used.","'storageService' is defined but never used.","React Hook useEffect has a missing dependency: 'getBanks'. Either include it or remove the dependency array.",["842"],"React Hook useEffect has missing dependencies: 'getBanks', 'getDetail', and 'id'. Either include them or remove the dependency array.",["843"],"React Hook useEffect has missing dependencies: 'getDepotCategory', 'getDetail', and 'id'. Either include them or remove the dependency array.",["844"],"React Hook useEffect has missing dependencies: 'getDetail', 'getProductCategory', and 'id'. Either include them or remove the dependency array.",["845"],"React Hook useEffect has missing dependencies: 'getDetail' and 'id'. Either include them or remove the dependency array.",["846"],["847"],"React Hook useEffect has missing dependencies: 'getDetail', 'getInvoiceCategory', and 'id'. Either include them or remove the dependency array.",["848"],"React Hook useEffect has a missing dependency: 'selectedPerson'. Either include it or remove the dependency array.",["849"],"'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["850"],["851"],"React Hook useEffect has a missing dependency: 'getDepotPicker'. Either include it or remove the dependency array.",["852"],["853"],["854"],["855"],["856"],"React Hook useEffect has missing dependencies: 'getCustomerCategory', 'getDetail', and 'id'. Either include them or remove the dependency array.",["857"],["858"],"React Hook useEffect has a missing dependency: 'getChequeNotify'. Either include it or remove the dependency array.",["859"],["860"],"'Select' is defined but never used.","'OutlinedInput' is defined but never used.","'MenuItem' is defined but never used.","'ComposedChart' is defined but never used.","'Legend' is defined but never used.","'getRandomColor' is defined but never used.","'CashDeskCahrt' is assigned a value but never used.","'COLORS' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPieChartData'. Either include it or remove the dependency array.",["861"],"'getMainChartData' is defined but never used.",["862"],["863"],["864"],["865"],["866"],"React Hook useEffect has missing dependencies: 'getBanks' and 'getCashes'. Either include them or remove the dependency array.",["867"],["868"],["869"],"'reset' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDriverCategory'. Either include it or remove the dependency array.",["870"],"React Hook useEffect has a missing dependency: 'getCashes'. Either include it or remove the dependency array.",["871"],"'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'getAmount'. Either include it or remove the dependency array.",["872"],"'setDriverCategory' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getDepotPicker', 'getDriverCategory', and 'getDrivers'. Either include them or remove the dependency array.",["873"],"React Hook useEffect has a missing dependency: 'getCustomers'. Either include it or remove the dependency array.",["874"],"React Hook useEffect has a missing dependency: 'getPersons'. Either include it or remove the dependency array.",["875"],["876"],["877"],["878"],["879"],["880"],["881"],["882"],["883"],"no-global-assign","no-unsafe-negation",{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"desc":"888","fix":"889"},{"desc":"890","fix":"891"},{"desc":"892","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"898","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},{"desc":"905","fix":"906"},{"desc":"907","fix":"908"},{"desc":"909","fix":"910"},{"desc":"911","fix":"912"},{"desc":"905","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"918","fix":"919"},{"desc":"898","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"921","fix":"925"},{"desc":"898","fix":"926"},{"desc":"911","fix":"927"},{"desc":"928","fix":"929"},{"desc":"911","fix":"930"},{"desc":"931","fix":"932"},{"desc":"933","fix":"934"},{"desc":"935","fix":"936"},{"desc":"898","fix":"937"},{"desc":"938","fix":"939"},{"desc":"938","fix":"940"},{"desc":"941","fix":"942"},{"desc":"943","fix":"944"},{"desc":"945","fix":"946"},{"desc":"903","fix":"947"},{"desc":"903","fix":"948"},{"desc":"949","fix":"950"},{"desc":"951","fix":"952"},{"desc":"953","fix":"954"},{"desc":"955","fix":"956"},{"desc":"957","fix":"958"},{"desc":"959","fix":"960"},{"desc":"898","fix":"961"},{"desc":"941","fix":"962"},{"desc":"933","fix":"963"},{"desc":"933","fix":"964"},{"desc":"898","fix":"965"},{"desc":"957","fix":"966"},{"desc":"923","fix":"967"},{"desc":"921","fix":"968"},"Update the dependencies array to be: [page, order, search, pageSize, type, getData]",{"range":"969","text":"970"},"Update the dependencies array to be: [page, order, search, pageSize, person, getData]",{"range":"971","text":"972"},"Update the dependencies array to be: [getData, search, selectedDate]",{"range":"973","text":"974"},"Update the dependencies array to be: [page, order, pageSize, filter, getData]",{"range":"975","text":"976"},"Update the dependencies array to be: [getDetail, getDriverCategory, id]",{"range":"977","text":"978"},"Update the dependencies array to be: [getCustomerCategory, getDepotCategory, getDriverCategory, getInvoiceCategory, getProductCategory]",{"range":"979","text":"980"},"Update the dependencies array to be: [action, showEditModal]",{"range":"981","text":"982"},"Update the dependencies array to be: [page, order, search, pageSize, getData]",{"range":"983","text":"984"},{"range":"985","text":"984"},"Update the dependencies array to be: [page, order, getData]",{"range":"986","text":"987"},"Update the dependencies array to be: [getBanks]",{"range":"988","text":"989"},"Update the dependencies array to be: [getBanks, getDetail, id]",{"range":"990","text":"991"},"Update the dependencies array to be: [getDepotCategory, getDetail, id]",{"range":"992","text":"993"},"Update the dependencies array to be: [getDetail, getProductCategory, id]",{"range":"994","text":"995"},"Update the dependencies array to be: [getDetail, id]",{"range":"996","text":"997"},{"range":"998","text":"991"},"Update the dependencies array to be: [getDetail, getInvoiceCategory, id]",{"range":"999","text":"1000"},"Update the dependencies array to be: [totalFee, discount, totalPayment, selectedPerson]",{"range":"1001","text":"1002"},"Update the dependencies array to be: [payments, props]",{"range":"1003","text":"1004"},{"range":"1005","text":"984"},"Update the dependencies array to be: [getDepotPicker]",{"range":"1006","text":"1007"},"Update the dependencies array to be: [page, order, search, pageSize, selectedDepot, getData]",{"range":"1008","text":"1009"},{"range":"1010","text":"1007"},{"range":"1011","text":"984"},{"range":"1012","text":"997"},"Update the dependencies array to be: [getCustomerCategory, getDetail, id]",{"range":"1013","text":"1014"},{"range":"1015","text":"997"},"Update the dependencies array to be: [getChequeNotify, location]",{"range":"1016","text":"1017"},"Update the dependencies array to be: [page, order, search, pageSize, filter, getData]",{"range":"1018","text":"1019"},"Update the dependencies array to be: [getPieChartData]",{"range":"1020","text":"1021"},{"range":"1022","text":"984"},"Update the dependencies array to be: [page, order, pageSize, search, getData]",{"range":"1023","text":"1024"},{"range":"1025","text":"1024"},"Update the dependencies array to be: [page, order, search, pageSize, type, filter, getData]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [page, order, search, pageSize, paymentType, getData]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [getBanks, getCashes]",{"range":"1030","text":"1031"},{"range":"1032","text":"989"},{"range":"1033","text":"989"},"Update the dependencies array to be: [getDriverCategory]",{"range":"1034","text":"1035"},"Update the dependencies array to be: [getCashes]",{"range":"1036","text":"1037"},"Update the dependencies array to be: [getAmount]",{"range":"1038","text":"1039"},"Update the dependencies array to be: [getDepotPicker, getDriverCategory, getDrivers]",{"range":"1040","text":"1041"},"Update the dependencies array to be: [getCustomers]",{"range":"1042","text":"1043"},"Update the dependencies array to be: [getPersons]",{"range":"1044","text":"1045"},{"range":"1046","text":"984"},{"range":"1047","text":"1027"},{"range":"1048","text":"1019"},{"range":"1049","text":"1019"},{"range":"1050","text":"984"},{"range":"1051","text":"1043"},{"range":"1052","text":"1009"},{"range":"1053","text":"1007"},[3205,3242],"[page, order, search, pageSize, type, getData]",[3021,3060],"[page, order, search, pageSize, person, getData]",[7466,7488],"[getData, search, selectedDate]",[3608,3639],"[page, order, pageSize, filter, getData]",[4696,4698],"[getDetail, getDriverCategory, id]",[6021,6023],"[getCustomerCategory, getDepotCategory, getDriverCategory, getInvoiceCategory, getProductCategory]",[6105,6113],"[action, showEditModal]",[3539,3570],"[page, order, search, pageSize, getData]",[2937,2968],[3502,3515],"[page, order, getData]",[1323,1325],"[getBanks]",[2725,2727],"[getBanks, getDetail, id]",[2259,2261],"[getDepotCategory, getDetail, id]",[5250,5252],"[getDetail, getProductCategory, id]",[4275,4277],"[getDetail, id]",[2725,2727],[9682,9684],"[getDetail, getInvoiceCategory, id]",[10044,10078],"[totalFee, discount, totalPayment, selectedPerson]",[6816,6826],"[payments, props]",[2229,2260],[1986,1988],"[getDepotPicker]",[5092,5138],"[page, order, search, pageSize, selectedDepot, getData]",[5193,5195],[2486,2517],[5250,5252],[4692,4694],"[getCustomerCategory, getDetail, id]",[2698,2700],[2437,2447],"[getChequeNotify, location]",[3552,3591],"[page, order, search, pageSize, filter, getData]",[4228,4230],"[getPieChartData]",[4051,4082],[3609,3640],"[page, order, pageSize, search, getData]",[5007,5038],[4019,4064],"[page, order, search, pageSize, type, filter, getData]",[5468,5512],"[page, order, search, pageSize, paymentType, getData]",[3054,3056],"[getBanks, getCashes]",[1323,1325],[1323,1325],[1012,1014],"[getDriverCategory]",[987,989],"[getCashes]",[848,850],"[getAmount]",[3153,3155],"[getDepotPicker, getDriverCategory, getDrivers]",[1663,1665],"[getCustomers]",[1788,1790],"[getPersons]",[2217,2248],[4060,4105],[3533,3572],[3569,3608],[3258,3289],[1636,1638],[5092,5138],[5193,5195]]