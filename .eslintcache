[{"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\index.js":"1","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\serviceWorker.js":"2","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\RTL.js":"3","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\App.js":"4","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\LayoutContext.js":"5","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\UserContext.js":"6","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\index.js":"7","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\store\\index.js":"8","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Alert\\index.jsx":"9","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\index.jsx":"10","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\Error.js":"11","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\Login.js":"12","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\default.js":"13","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\Modal.Style.js":"14","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\AlertAction.js":"15","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\dialogAction.jsx":"16","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\index.js":"17","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\detail.js":"18","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\constant.js":"19","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\charts\\Charts.js":"20","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\Dashboard.js":"21","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\dialogReducer.js":"22","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\AlertReducer.js":"23","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\index.js":"24","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\Sidebar.js":"25","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\hooks\\useApi.js":"26","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\charts\\components\\ApexHeatmap.js":"27","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\PageTitle\\PageTitle.js":"28","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\Dot.js":"29","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\components\\Table\\Table.js":"30","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"31","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\list.js":"32","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"33","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\services\\storage.js":"34","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Wrappers\\Wrappers.js":"35","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\Widget.js":"36","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\styles.js":"37","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\mock.js":"38","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\styles.js":"39","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\charts\\components\\ApexLineChart.js":"40","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Paper\\index.js":"41","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\configs\\axios.js":"42","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\PageTitle\\styles.js":"43","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\utils.js":"44","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"45","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableHead.js":"46","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TablePaging.js":"47","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableTop.js":"48","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableRowMenu.js":"49","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"50","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\styles.js":"51","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Avatar\\index.js":"52","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\styles.js":"53","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\Header.js":"54","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\styles.js":"55","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\styles.js":"56","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\styles.js":"57","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\UserAvatar\\UserAvatar.js":"58","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\UserAvatar\\styles.js":"59","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\CircularProgress\\index.js":"60","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\style.js":"61","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\detail.js":"62","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\index.js":"63","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\list.js":"64","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\style.js":"65","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\detail.js":"66","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\index.js":"67","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\list.js":"68","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\style.js":"69","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\detail.js":"70","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\index.js":"71","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\list.js":"72","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\style.js":"73","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\index.js":"74","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\list.js":"75","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\style.js":"76","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\index.js":"77","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\list.js":"78","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\style.js":"79","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\detail.js":"80","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\index.js":"81","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\list.js":"82","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\style.js":"83","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\transaction.js":"84","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\detail.js":"85","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\index.js":"86","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\filter.js":"87","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\index.js":"88","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\style.js":"89"},{"size":1636,"mtime":1620126640979,"results":"90","hashOfConfig":"91"},{"size":5083,"mtime":1619356605618,"results":"92","hashOfConfig":"91"},{"size":339,"mtime":1619868731723,"results":"93","hashOfConfig":"91"},{"size":1752,"mtime":1620122348092,"results":"94","hashOfConfig":"91"},{"size":1444,"mtime":1619356605590,"results":"95","hashOfConfig":"91"},{"size":2553,"mtime":1620122443026,"results":"96","hashOfConfig":"91"},{"size":563,"mtime":1619360880461,"results":"97","hashOfConfig":"91"},{"size":227,"mtime":1619012872884,"results":"98","hashOfConfig":"91"},{"size":780,"mtime":1619705528542,"results":"99","hashOfConfig":"91"},{"size":1523,"mtime":1620052884737,"results":"100","hashOfConfig":"91"},{"size":1626,"mtime":1619356605601,"results":"101","hashOfConfig":"91"},{"size":4252,"mtime":1620124927245,"results":"102","hashOfConfig":"91"},{"size":2645,"mtime":1620221710032,"results":"103","hashOfConfig":"91"},{"size":449,"mtime":1620052920774,"results":"104","hashOfConfig":"91"},{"size":285,"mtime":1619704498679,"results":"105","hashOfConfig":"91"},{"size":287,"mtime":1620576394050,"results":"106","hashOfConfig":"91"},{"size":300,"mtime":1620118914964,"results":"107","hashOfConfig":"91"},{"size":11165,"mtime":1620211988221,"results":"108","hashOfConfig":"91"},{"size":932,"mtime":1620463230552,"results":"109","hashOfConfig":"91"},{"size":5790,"mtime":1619356605593,"results":"110","hashOfConfig":"91"},{"size":19417,"mtime":1620221293578,"results":"111","hashOfConfig":"91"},{"size":610,"mtime":1620052720299,"results":"112","hashOfConfig":"91"},{"size":502,"mtime":1619704498679,"results":"113","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"114","hashOfConfig":"91"},{"size":4873,"mtime":1620576885371,"results":"115","hashOfConfig":"91"},{"size":843,"mtime":1620114835132,"results":"116","hashOfConfig":"91"},{"size":1909,"mtime":1619356605593,"results":"117","hashOfConfig":"91"},{"size":447,"mtime":1619356605577,"results":"118","hashOfConfig":"91"},{"size":902,"mtime":1619356605581,"results":"119","hashOfConfig":"91"},{"size":1323,"mtime":1619356605599,"results":"120","hashOfConfig":"91"},{"size":4160,"mtime":1619356605598,"results":"121","hashOfConfig":"91"},{"size":5531,"mtime":1620301846271,"results":"122","hashOfConfig":"91"},{"size":4915,"mtime":1620480944912,"results":"123","hashOfConfig":"91"},{"size":485,"mtime":1620122159679,"results":"124","hashOfConfig":"91"},{"size":3971,"mtime":1619356605588,"results":"125","hashOfConfig":"91"},{"size":2581,"mtime":1619356605586,"results":"126","hashOfConfig":"91"},{"size":1363,"mtime":1619356605584,"results":"127","hashOfConfig":"91"},{"size":4288,"mtime":1619356605599,"results":"128","hashOfConfig":"91"},{"size":3105,"mtime":1619697742856,"results":"129","hashOfConfig":"91"},{"size":1396,"mtime":1619356605595,"results":"130","hashOfConfig":"91"},{"size":953,"mtime":1619697484028,"results":"131","hashOfConfig":"91"},{"size":1909,"mtime":1620214044621,"results":"132","hashOfConfig":"91"},{"size":482,"mtime":1619356605578,"results":"133","hashOfConfig":"91"},{"size":472,"mtime":1620114206894,"results":"134","hashOfConfig":"91"},{"size":1449,"mtime":1620481061035,"results":"135","hashOfConfig":"91"},{"size":1114,"mtime":1620226271867,"results":"136","hashOfConfig":"91"},{"size":856,"mtime":1620224242202,"results":"137","hashOfConfig":"91"},{"size":3193,"mtime":1620578025792,"results":"138","hashOfConfig":"91"},{"size":1403,"mtime":1619873099294,"results":"139","hashOfConfig":"91"},{"size":1075,"mtime":1619356605598,"results":"140","hashOfConfig":"91"},{"size":1015,"mtime":1619356605588,"results":"141","hashOfConfig":"91"},{"size":529,"mtime":1620114471340,"results":"142","hashOfConfig":"91"},{"size":710,"mtime":1619356605574,"results":"143","hashOfConfig":"91"},{"size":6292,"mtime":1620123158670,"results":"144","hashOfConfig":"91"},{"size":3462,"mtime":1620116901056,"results":"145","hashOfConfig":"91"},{"size":1395,"mtime":1619356605603,"results":"146","hashOfConfig":"91"},{"size":4050,"mtime":1620123034762,"results":"147","hashOfConfig":"91"},{"size":620,"mtime":1619356605585,"results":"148","hashOfConfig":"91"},{"size":291,"mtime":1619356605586,"results":"149","hashOfConfig":"91"},{"size":351,"mtime":1620051446631,"results":"150","hashOfConfig":"91"},{"size":250,"mtime":1620117889110,"results":"151","hashOfConfig":"91"},{"size":11066,"mtime":1620211797842,"results":"152","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"153","hashOfConfig":"91"},{"size":6270,"mtime":1620211797820,"results":"154","hashOfConfig":"91"},{"size":250,"mtime":1620128112503,"results":"155","hashOfConfig":"91"},{"size":11066,"mtime":1620478732393,"results":"156","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"157","hashOfConfig":"91"},{"size":7138,"mtime":1620479257104,"results":"158","hashOfConfig":"91"},{"size":498,"mtime":1620463230553,"results":"159","hashOfConfig":"91"},{"size":4964,"mtime":1620225168777,"results":"160","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"161","hashOfConfig":"91"},{"size":6270,"mtime":1620211797820,"results":"162","hashOfConfig":"91"},{"size":250,"mtime":1620128112503,"results":"163","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"164","hashOfConfig":"91"},{"size":6352,"mtime":1620223387981,"results":"165","hashOfConfig":"91"},{"size":250,"mtime":1620128112503,"results":"166","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"167","hashOfConfig":"91"},{"size":6270,"mtime":1620211797820,"results":"168","hashOfConfig":"91"},{"size":250,"mtime":1620128112503,"results":"169","hashOfConfig":"91"},{"size":11066,"mtime":1620211797842,"results":"170","hashOfConfig":"91"},{"size":35,"mtime":1619699462238,"results":"171","hashOfConfig":"91"},{"size":6273,"mtime":1620213632558,"results":"172","hashOfConfig":"91"},{"size":250,"mtime":1620128112503,"results":"173","hashOfConfig":"91"},{"size":81,"mtime":1620219650260,"results":"174","hashOfConfig":"91"},{"size":11124,"mtime":1620484621669,"results":"175","hashOfConfig":"91"},{"size":3142,"mtime":1620576885371,"results":"176","hashOfConfig":"91"},{"size":1863,"mtime":1620480289263,"results":"177","hashOfConfig":"91"},{"size":9238,"mtime":1620578253537,"results":"178","hashOfConfig":"91"},{"size":565,"mtime":1620578352654,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"64texg",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"182"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"182"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"182"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"182"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"182"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"182"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"182"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"182"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"182"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"182"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"182"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"182"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"182"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"182"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"182"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"182"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"182"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"182"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"182"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"182"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"182"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"182"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\index.js",[],["378","379"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\serviceWorker.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\RTL.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\App.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\LayoutContext.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\context\\UserContext.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\store\\index.js",["380"],"import { createStore, applyMiddleware, compose } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nimport rootReducer from \"../reducers\"\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Alert\\index.jsx",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\index.jsx",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\Error.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\Login.js",["381"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  CircularProgress,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport useStyles from \"./styles\";\r\nimport logo from \"./logo.svg\";\r\nimport { useUserDispatch, loginUser } from \"../../context/UserContext\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\n\r\nfunction Login(props) {\r\n  var classes = useStyles();\r\n  var userDispatch = useUserDispatch();\r\n  const loginRequest = useApi({\r\n    method: \"post\",\r\n    url: \"user/login\",\r\n  });\r\n  var [isLoading, setIsLoading] = useState(false);\r\n  var [error, setError] = useState(null);\r\n\r\n  var [usernameValue, setUsernameValue] = useState(\"ali\");\r\n  var [passwordValue, setPasswordValue] = useState(\"123456\");\r\n\r\n  const onPressEnter = function (event) {\r\n    if (event.which === 13 && passwordValue && usernameValue) {\r\n      loginUser(\r\n        loginRequest,\r\n        userDispatch,\r\n        usernameValue,\r\n        passwordValue,\r\n        props.history,\r\n        setIsLoading,\r\n        setError,\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <div className={classes.logotypeContainer}>\r\n        <img src={logo} alt=\"logo\" className={classes.logotypeImage} />\r\n        <Typography className={classes.logotypeText}>\r\n          سیستم جامع حسابداری\r\n        </Typography>\r\n      </div>\r\n      <div className={classes.formContainer}>\r\n        <div className={classes.form}>\r\n          <React.Fragment>\r\n            <div className={classes.title}>\r\n              <Divider />\r\n              <Typography variant=\"h4\" className={classes.greeting}>\r\n                ورود به سیستم\r\n              </Typography>\r\n              <Divider />\r\n            </div>\r\n\r\n            <TextField\r\n              label=\"نام کاربری\"\r\n              variant=\"outlined\"\r\n              id=\"username\"\r\n              InputProps={{\r\n                classes: {\r\n                  input: classes.textField,\r\n                },\r\n              }}\r\n              value={usernameValue}\r\n              onChange={(e) => setUsernameValue(e.target.value)}\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"رمز عبور \"\r\n              variant=\"outlined\"\r\n              id=\"password\"\r\n              InputProps={{\r\n                classes: {\r\n                  input: classes.textField,\r\n                },\r\n              }}\r\n              value={passwordValue}\r\n              onChange={(e) => setPasswordValue(e.target.value)}\r\n              margin=\"normal\"\r\n              type=\"password\"\r\n              fullWidth\r\n              onKeyPress={onPressEnter}\r\n            />\r\n            <div className={classes.formButtons}>\r\n              {isLoading ? (\r\n                <CircularProgress size={26} className={classes.loginLoader} />\r\n              ) : (\r\n                <Button\r\n                  disabled={\r\n                    usernameValue.length === 0 || passwordValue.length === 0\r\n                  }\r\n                  onClick={() =>\r\n                    loginUser(\r\n                      loginRequest,\r\n                      userDispatch,\r\n                      usernameValue,\r\n                      passwordValue,\r\n                      props.history,\r\n                      setIsLoading,\r\n                      setError,\r\n                    )\r\n                  }\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                >\r\n                  ورود\r\n                </Button>\r\n              )}\r\n              <Button\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                className={classes.forgetButton}\r\n              >\r\n                بازیابی رمز عبور\r\n              </Button>\r\n            </div>\r\n          </React.Fragment>\r\n        </div>\r\n        <Typography color=\"primary\" className={classes.copyright}>\r\n          تمامی حقوق مادی و معنوی این اثر متعلق به شرکت المان می باشد\r\n        </Typography>\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\themes\\default.js",["382","383"],"const primary = \"#536DFE\";\r\nconst secondary = \"#FF5C93\";\r\nconst warning = \"#FFC260\";\r\nconst success = \"#3CD4A0\";\r\nconst info = \"#9013FE\";\r\n\r\nconst lightenRate = 7.5;\r\nconst darkenRate = 15;\r\n\r\nconst defaultTheme = {\r\n  direction: \"rtl\",\r\n\r\n  palette: {\r\n    primary: {\r\n      main: primary,\r\n      light: primary,\r\n      dark: primary,\r\n    },\r\n    secondary: {\r\n      main: secondary,\r\n      light: secondary,\r\n      dark: secondary,\r\n      contrastText: \"#FFFFFF\",\r\n    },\r\n    warning: {\r\n      main: warning,\r\n      light: warning,\r\n      dark: warning,\r\n    },\r\n    success: {\r\n      main: success,\r\n      light: success,\r\n      dark: success,\r\n    },\r\n    info: {\r\n      main: info,\r\n      light: info,\r\n      dark: info,\r\n    },\r\n    text: {\r\n      primary: \"#6E6E6E\",\r\n      secondary: \"#6E6E6E\",\r\n      hint: \"#B9B9B9\",\r\n    },\r\n    background: {\r\n      default: \"#F6F7FF\",\r\n      light: \"#F3F5FF\",\r\n    },\r\n  },\r\n  customShadows: {\r\n    widget:\r\n      \"0px 3px 11px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\r\n    widgetDark:\r\n      \"0px 3px 18px 0px #4558A3B3, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\r\n    widgetWide:\r\n      \"0px 12px 33px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\r\n  },\r\n  overrides: {\r\n    MuiBackdrop: {\r\n      root: {\r\n        backgroundColor: \"#4A4A4A1A\",\r\n      },\r\n    },\r\n    MuiMenu: {\r\n      paper: {\r\n        boxShadow:\r\n          \"0px 3px 11px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\r\n      },\r\n    },\r\n    MuiSelect: {\r\n      icon: {\r\n        color: \"#B9B9B9\",\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      root: {\r\n        \"&$selected\": {\r\n          backgroundColor: \"#F3F5FF !important\",\r\n          \"&:focus\": {\r\n            backgroundColor: \"#F3F5FF\",\r\n          },\r\n        },\r\n      },\r\n      button: {\r\n        \"&:hover, &:focus\": {\r\n          backgroundColor: \"#F3F5FF\",\r\n        },\r\n      },\r\n    },\r\n    MuiTouchRipple: {\r\n      child: {\r\n        backgroundColor: \"white\",\r\n      },\r\n    },\r\n    MuiTableRow: {\r\n      root: {\r\n        height: 56,\r\n      },\r\n    },\r\n    MuiTableCell: {\r\n      root: {\r\n        borderBottom: \"1px solid rgba(224, 224, 224, .5)\",\r\n        paddingLeft: 24,\r\n      },\r\n      head: {\r\n        fontSize: \"0.95rem\",\r\n      },\r\n      body: {\r\n        fontSize: \"0.95rem\",\r\n      },\r\n    },\r\n    PrivateSwitchBase: {\r\n      root: {\r\n        marginLeft: 10,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default defaultTheme;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Modal\\Modal.Style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\AlertAction.js",["384"],"import Constant from \"../../helpers/constant\";\r\nimport store from \"../store\";\r\n\r\nexport default {\r\n  show(option) {\r\n    store.dispatch({ type: Constant.ACTION_TYPES.SHOW_ALERT, option });\r\n  },\r\n\r\n  hide() {\r\n    store.dispatch({ type: Constant.ACTION_TYPES.HIDE_ALERT });\r\n  },\r\n};\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\actions\\dialogAction.jsx",["385"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\detail.js",["386"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [isPassword, setIsPassword] = useState(true);\r\n  const addUserRequest = useApi({\r\n    method: \"post\",\r\n    url: `user`,\r\n  });\r\n  const editUserRequest = useApi({\r\n    method: \"put\",\r\n    url: `user/${id}`,\r\n  });\r\n  const detailUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user/${id}`,\r\n  });\r\n\r\n  const onChangeViewClick = function () {\r\n    setIsPassword(!isPassword);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    if (id) {\r\n      return await editUserRequest.execute(data);\r\n    }\r\n    await addUserRequest.execute(data);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/user-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailUserRequest.execute();\r\n    setDetail(detail.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailUserRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش کاربر\" : \"افزودن کاربر\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.firstName}\r\n                          helperText={\r\n                            errors.firstName ? errors.firstName.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"firstName\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام خانوادگی\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.lastName}\r\n                          helperText={\r\n                            errors.lastName ? errors.lastName.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"lastName\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام کاربری\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.username}\r\n                          helperText={\r\n                            errors.username ? errors.username.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"username\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"رمز عبور\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.password}\r\n                          helperText={\r\n                            errors.password ? errors.password.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                          type={isPassword ? \"password\" : \"text\"}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <i\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  className={clsx(\r\n                                    \"material-icons-round\",\r\n                                    classes.icon,\r\n                                  )}\r\n                                  onClick={onChangeViewClick}\r\n                                >\r\n                                  {isPassword ? \"visibility_off\" : \"visibility\"}\r\n                                </i>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{\r\n                      required: Constant.VALIDATION.REQUIRED,\r\n                      minLength: {\r\n                        value: 5,\r\n                        message: Constant.VALIDATION.PASSWORD,\r\n                      },\r\n                    }}\r\n                    name=\"password\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"موبایل\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.mobile}\r\n                          helperText={\r\n                            errors.mobile ? errors.mobile.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{\r\n                      minLength: {\r\n                        value: 11,\r\n                        message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                      },\r\n                      maxLength: {\r\n                        value: 11,\r\n                        message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                      },\r\n                    }}\r\n                    name=\"mobile\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"تلفن\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.phone}\r\n                          helperText={errors.phone ? errors.phone.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"phone\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"آدرس\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.address}\r\n                          helperText={\r\n                            errors.address ? errors.address.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"address\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\constant.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\charts\\Charts.js",[],["387","388"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\Dashboard.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\dialogReducer.js",["389"],"import Constant from \"../../helpers/constant\";\r\nconst initialState = {\r\n  show: false,\r\n  component: null,\r\n  title: \"\",\r\n  size: \"md\",\r\n  disableCloseButton: false,\r\n  confirm: false,\r\n  onAction: () => {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Constant.ACTION_TYPES.SHOW_DIALOG: {\r\n      return {\r\n        ...state,\r\n        ...action.option,\r\n        show: true,\r\n      };\r\n    }\r\n    case Constant.ACTION_TYPES.HIDE_DIALOG: {\r\n      return {\r\n        ...state,\r\n        show: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\redux\\reducers\\AlertReducer.js",["390"],"import Constant from \"../../helpers/constant\";\r\n\r\nconst initialState = {\r\n  show: false,\r\n  text: \"\",\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Constant.ACTION_TYPES.SHOW_ALERT: {\r\n      return {\r\n        ...state,\r\n        ...action.option,\r\n        show: true,\r\n      };\r\n    }\r\n    case Constant.ACTION_TYPES.HIDE_ALERT: {\r\n      return {\r\n        ...state,\r\n        show: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\Sidebar.js",["391","392","393","394","395","396","397","398"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport {\r\n  Home as HomeIcon,\r\n  Group,\r\n  FormatSize as TypographyIcon,\r\n  FilterNone as UIElementsIcon,\r\n  BorderAll as TableIcon,\r\n  QuestionAnswer as SupportIcon,\r\n  LibraryBooks as LibraryIcon,\r\n  HelpOutline as FAQIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst structure = [\r\n  {\r\n    id: 0,\r\n    label: \"داشبورد\",\r\n    link: \"/app/dashboard\",\r\n    icon: <i className=\"material-icons-round\">home</i>,\r\n  },\r\n  {\r\n    id: 1,\r\n    label: \"کالاها\",\r\n    link: \"/app/product-list\",\r\n    icon: <i className=\"material-icons-round\">inventory_2</i>,\r\n  },\r\n  {\r\n    id: 2,\r\n    label: \"خرید\",\r\n    link: \"/app/sell-list\",\r\n    icon: <i className=\"material-icons-round\">sell</i>,\r\n  },\r\n  {\r\n    id: 3,\r\n    label: \"فروش\",\r\n    link: \"/app/buy-list\",\r\n    icon: <i className=\"material-icons-round\">shopping_basket</i>,\r\n  },\r\n  {\r\n    id: 4,\r\n    label: \"گزارشات مالی\",\r\n    icon: <i className=\"material-icons-round\">monetization_on</i>,\r\n    children: [\r\n      { label: \"گردش صندوق\", link: \"/app/cash-list\" },\r\n      { label: \"لیست دریافتی ها\", link: \"/app/income-list\" },\r\n      { label: \"لیست پرداختی ها\", link: \"/app/outcome-list\" },\r\n      { label: \"لیست چک ها\", link: \"/app/ui/chek-list\" },\r\n    ],\r\n  },\r\n  { id: 5, type: \"divider\" },\r\n  {\r\n    id: 6,\r\n    label: \"کاربران\",\r\n    link: \"/app/user-list\",\r\n    icon: <i className=\"material-icons-round\">manage_accounts</i>,\r\n  },\r\n  {\r\n    id: 7,\r\n    label: \"مشتریان\",\r\n    link: \"/app/customer-list\",\r\n    icon: <i className=\"material-icons-round\">record_voice_over</i>,\r\n  },\r\n  {\r\n    id: 8,\r\n    label: \"پرسنل\",\r\n    link: \"/app/employee-list\",\r\n    icon: <i className=\"material-icons-round\">supervisor_account</i>,\r\n  },\r\n  { id: 9, type: \"divider\" },\r\n  {\r\n    id: 10,\r\n    label: \"تنظیمات \",\r\n    link: \"/app/Settings\",\r\n    icon: <i className=\"material-icons-round\">settings</i>,\r\n  },\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function () {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map((link) => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\hooks\\useApi.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\PageTitle\\PageTitle.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\Dot.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\components\\Table\\Table.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\list.js",["399"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"username\",\r\n    label: \"نام کاربری\",\r\n  },\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"mobile\",\r\n    label: \"موبایل\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nconst MainList = () => {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"username\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(5);\r\n  const [list, setList] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/user-detail\");\r\n  };\r\n\r\n  const getUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `user`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/user-detail?id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const userList = await getUserRequest.execute();\r\n    setList(userList.data);\r\n    setTotal(userList.total);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, pageSize]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableTop title=\"لیست کاربران\" onAdd={onAdd} />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableHeader\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={list.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {list.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    style={{ paddingRight: 10 }}\r\n                  >\r\n                    <TableCell padding=\"none\">{row.username}</TableCell>\r\n                    <TableCell padding=\"none\">{row.firstName}</TableCell>\r\n                    <TableCell padding=\"none\">{row.lastName}</TableCell>\r\n                    <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                    <TableCell padding=\"none\">{row.phone}</TableCell>\r\n\r\n                    <TableCell padding=\"none\">\r\n                      <TableRowMenu\r\n                        options={[\r\n                          { id: \"edit\", title: \"ویرایش\" },\r\n                          { id: \"delete\", title: \"حذف\" },\r\n                        ]}\r\n                        hadleAction={(type) => handleAction(row.id, type)}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              {!list.length && !getUserRequest.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePaging\r\n          count={total}\r\n          handleChangePage={handleChangePage}\r\n          handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n          page={page}\r\n          rowsPerPage={pageSize}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainList;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\services\\storage.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Wrappers\\Wrappers.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\Widget.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\mock.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\charts\\components\\ApexLineChart.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Paper\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\configs\\axios.js",["400","401"],"import axios from \"axios\";\r\nimport { cacheAdapterEnhancer } from \"axios-extensions\";\r\nimport constants from \"../helpers/constant\";\r\nimport storageService from \"../services/storage\";\r\nimport AlertAction from \"../redux/actions/AlertAction\";\r\n\r\nconst http = axios.create({\r\n  baseURL: constants.API_ADDRESS,\r\n  headers: {\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    \"Access-Control-Allow-Credentials\": \"true\",\r\n  },\r\n  // adapter: cacheAdapterEnhancer(axios.defaults.adapter),\r\n});\r\n\r\n// http.interceptors.request.use(\r\n//   async (config) => {\r\n//     // const accessToken = storageService.getItem(constants.ACCESS_TOKEN);\r\n//     // config.headers = {\r\n//     //   Authorization: `Bearer ${accessToken}`,\r\n//     //   \"Cache-Control\": \"no-cache\",\r\n//     //   Accept: \"application/json\",\r\n//     // };\r\n//     // return config;\r\n//   },\r\n//   (error) => {\r\n//     Promise.reject(error);\r\n//   },\r\n// );\r\n\r\nhttp.interceptors.response.use(\r\n  (result) => {\r\n    // Do something before request is sent\r\n    const { method, url } = result.config;\r\n    if (method !== \"get\") {\r\n      if (url !== \"user/login\") {\r\n        AlertAction.show({\r\n          type: \"success\",\r\n          text: \"اطلاعات با موفقیت ثبت شد\",\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n  async (error) => {\r\n    const { code } = error.response.data.error;\r\n    AlertAction.show({\r\n      type: \"error\",\r\n      text: constants.ERROR_MESSAGE[code],\r\n    });\r\n\r\n    // TODO : handle 4xx error here and calling refresh token\r\n    // const originalRequest = error.config;\r\n    // if (error.response.status === 403 && !originalRequest._retry) {\r\n    // const access_token = await refreshAccessToken();\r\n    // axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\r\n    // return axiosApiInstance(originalRequest);\r\n    // }\r\n\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\nexport default http;\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\PageTitle\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\helpers\\utils.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableHead.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TablePaging.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableTop.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Table\\TableRowMenu.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Widget\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Avatar\\index.js",[],["402","403"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\Header.js",["404","405","406"],"import React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Fab,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  MailOutline as MailIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Person as AccountIcon,\r\n  Send as SendIcon,\r\n  ArrowForward as ArrowForwardIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\nimport useStyles from \"./styles\";\r\nimport { Badge, Typography } from \"../Wrappers\";\r\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\nimport { useUserState } from \"../../context/UserContext\";\r\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\r\n\r\nconst messages = [\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"تست\",\r\n    message: \"یادآوری چک\",\r\n    time: \"9:10\",\r\n  },\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"تست\",\r\n    message: \"یادآوری چک\",\r\n    time: \"9:10\",\r\n  },\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"تست\",\r\n    message: \"یادآوری چک\",\r\n    time: \"9:10\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var userDispatch = useUserDispatch();\r\n\r\n  var [mailMenu, setMailMenu] = useState(null);\r\n  var [isMailsUnread, setIsMailsUnread] = useState(true);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var { currentUser } = useUserState();\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n        >\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowForwardIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n          سیستم حسابداری\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={(e) => {\r\n            setMailMenu(e.currentTarget);\r\n            setIsMailsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isMailsUnread ? messages.length : null}\r\n            color=\"secondary\"\r\n          >\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          className={classes.headerMenuButton}\r\n          aria-controls=\"profile-menu\"\r\n          onClick={(e) => setProfileMenu(e.currentTarget)}\r\n        >\r\n          <AccountIcon classes={{ root: classes.headerIcon }} />\r\n        </IconButton>\r\n        <Menu\r\n          id=\"mail-menu\"\r\n          open={Boolean(mailMenu)}\r\n          anchorEl={mailMenu}\r\n          onClose={() => setMailMenu(null)}\r\n          MenuListProps={{ className: classes.headerMenuList }}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h6\" weight=\"medium\">\r\n              یادآوری های جدید\r\n            </Typography>\r\n            <Divider />\r\n          </div>\r\n          {messages.map((message) => (\r\n            <MenuItem key={message.id} className={classes.messageNotification}>\r\n              <div className={classes.messageNotificationSide}>\r\n                <UserAvatar color={message.variant} name={message.name} />\r\n                <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.time}\r\n                </Typography>\r\n              </div>\r\n              <div\r\n                className={classNames(\r\n                  classes.messageNotificationSide,\r\n                  classes.messageNotificationBodySide,\r\n                )}\r\n              >\r\n                <Typography weight=\"medium\" gutterBottom>\r\n                  {message.name}\r\n                </Typography>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.message}\r\n                </Typography>\r\n              </div>\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n        <Menu\r\n          id=\"profile-menu\"\r\n          open={Boolean(profileMenu)}\r\n          anchorEl={profileMenu}\r\n          onClose={() => setProfileMenu(null)}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              {currentUser.username}\r\n            </Typography>\r\n          </div>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> پروفایل\r\n          </MenuItem>\r\n\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={() => signOut(userDispatch, props.history)}\r\n            >\r\n              خروج از سیستم\r\n            </Typography>\r\n          </div>\r\n        </Menu>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\login\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\error\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Header\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\UserAvatar\\UserAvatar.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\UserAvatar\\styles.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\CircularProgress\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\users\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\detail.js",["407"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [isPassword, setIsPassword] = useState(true);\r\n  const addUserRequest = useApi({\r\n    method: \"post\",\r\n    url: `user`,\r\n  });\r\n  const editUserRequest = useApi({\r\n    method: \"put\",\r\n    url: `user/${id}`,\r\n  });\r\n  const detailUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user/${id}`,\r\n  });\r\n\r\n  const onChangeViewClick = function () {\r\n    setIsPassword(!isPassword);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    if (id) {\r\n      return await editUserRequest.execute(data);\r\n    }\r\n    await addUserRequest.execute(data);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/user-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailUserRequest.execute();\r\n    setDetail(detail.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n  const [selectedDate, handleDateChange] = useState(moment());\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailUserRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش کاربر\" : \"افزودن کاربر\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12} className={classes.datePicker}>\r\n                  <DatePicker\r\n                    name=\"date\"\r\n                    label=\"تاریخ ثبت\"\r\n                    inputVariant=\"outlined\"\r\n                    okLabel=\"تأیید\"\r\n                    cancelLabel=\"لغو\"\r\n                    labelFunc={(date) =>\r\n                      date ? date.format(\"jYYYY/jMM/jDD\") : \"\"\r\n                    }\r\n                    value={selectedDate}\r\n                    onChange={handleDateChange}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام خانوادگی\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.lastName}\r\n                          helperText={\r\n                            errors.lastName ? errors.lastName.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"lastName\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام کاربری\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.username}\r\n                          helperText={\r\n                            errors.username ? errors.username.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"username\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"رمز عبور\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.password}\r\n                          helperText={\r\n                            errors.password ? errors.password.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                          type={isPassword ? \"password\" : \"text\"}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <i\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  className={clsx(\r\n                                    \"material-icons-round\",\r\n                                    classes.icon,\r\n                                  )}\r\n                                  onClick={onChangeViewClick}\r\n                                >\r\n                                  {isPassword ? \"visibility_off\" : \"visibility\"}\r\n                                </i>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{\r\n                      required: Constant.VALIDATION.REQUIRED,\r\n                      minLength: {\r\n                        value: 5,\r\n                        message: Constant.VALIDATION.PASSWORD,\r\n                      },\r\n                    }}\r\n                    name=\"password\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"موبایل\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.mobile}\r\n                          helperText={\r\n                            errors.mobile ? errors.mobile.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{\r\n                      minLength: {\r\n                        value: 11,\r\n                        message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                      },\r\n                      maxLength: {\r\n                        value: 11,\r\n                        message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                      },\r\n                    }}\r\n                    name=\"mobile\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"تلفن\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.phone}\r\n                          helperText={errors.phone ? errors.phone.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"phone\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"آدرس\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.address}\r\n                          helperText={\r\n                            errors.address ? errors.address.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    name=\"address\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\list.js",["408"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\nconst headCells = [\r\n  {\r\n    id: \"username\",\r\n    label: \"نام کاربری\",\r\n  },\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"mobile\",\r\n    label: \"موبایل\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList() {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"email\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(5);\r\n  const [list, setList] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/user-detail\");\r\n  };\r\n\r\n  const getUserRequest = useApi({\r\n    method: \"get\",\r\n    url: `user?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `user`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/user-detail?id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    const userList = await getUserRequest.execute();\r\n    setList(userList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableTop title=\"لیست کاربران\" onAdd={onAdd} />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableHeader\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={list.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {stableSort(list, getComparator(order, orderBy))\r\n                .slice(page * pageSize, page * pageSize + pageSize)\r\n                .map((row) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableCell padding=\"none\">{row.username}</TableCell>\r\n                      <TableCell padding=\"none\">{row.firstName}</TableCell>\r\n                      <TableCell padding=\"none\">{row.lastName}</TableCell>\r\n                      <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                      <TableCell padding=\"none\">{row.phone}</TableCell>\r\n\r\n                      <TableCell padding=\"none\">\r\n                        <TableRowMenu\r\n                          options={[\r\n                            { id: \"delete\", title: \"حذف\" },\r\n                            { id: \"edit\", title: \"ویرایش\" },\r\n                          ]}\r\n                          hadleAction={(type) => handleAction(row.id, type)}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {!list.length && !getUserRequest.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePaging\r\n          count={list.length}\r\n          handleChangePage={handleChangePage}\r\n          handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n          page={page}\r\n          rowsPerPage={pageSize}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\sell\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\detail.js",["409"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [category, setCategory] = useState([]);\r\n  const [customerCategory, setCustomerCategory] = useState();\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addCustomerRequest = useApi({\r\n    method: \"post\",\r\n    url: `customer`,\r\n  });\r\n  const editCustomerRequest = useApi({\r\n    method: \"put\",\r\n    url: `customer/${id}`,\r\n  });\r\n  const detailCustomerRequest = useApi({\r\n    method: \"get\",\r\n    url: `customer/${id}`,\r\n  });\r\n\r\n  const customerCategoryRequest = useApi({\r\n    method: \"get\",\r\n    url: `customer/category`,\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    const allData = { ...data, customerCategory };\r\n    if (id) {\r\n      return await editCustomerRequest.execute(allData);\r\n    }\r\n    await addCustomerRequest.execute(allData);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/customer-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailCustomerRequest.execute();\r\n    setDetail(detail.data);\r\n    setCustomerCategory(detail.data.customerCategory);\r\n  };\r\n\r\n  const getCustomerCategory = async () => {\r\n    const detail = await customerCategoryRequest.execute();\r\n    setCategory(detail.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomerCategory();\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {!detailCustomerRequest.pending ? (\r\n          <Grid item lg={6} sm={12} className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n              <Typography\r\n                className={classes.title}\r\n                variant=\"h6\"\r\n                id=\"tableTitle\"\r\n                component=\"div\"\r\n              >\r\n                {id ? \"ویرایش مشتری\" : \"افزودن مشتری\"}\r\n              </Typography>\r\n\r\n              <Grid container spacing={3}>\r\n                <Fragment>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.firstName}\r\n                            helperText={\r\n                              errors.firstName ? errors.firstName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"firstName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"نام خانوادگی\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.lastName}\r\n                            helperText={\r\n                              errors.lastName ? errors.lastName.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                      name=\"lastName\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"تلفن\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.phone}\r\n                            helperText={\r\n                              errors.phone ? errors.phone.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"phone\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"موبایل\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.mobile}\r\n                            helperText={\r\n                              errors.mobile ? errors.mobile.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      rules={{\r\n                        minLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                        maxLength: {\r\n                          value: 11,\r\n                          message: Constant.VALIDATION.MOBILE_NUMBER,\r\n                        },\r\n                      }}\r\n                      name=\"mobile\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={12}>\r\n                    {category.length && customerCategory && (\r\n                      <TextField\r\n                        select\r\n                        label=\"دسته بندی\"\r\n                        value={customerCategory}\r\n                        onChange={setCustomerCategory}\r\n                        variant=\"outlined\"\r\n                        error={!!errors.customerCategory}\r\n                        helperText={\r\n                          errors.customerCategory\r\n                            ? errors.customerCategory.message\r\n                            : \"\"\r\n                        }\r\n                        fullWidth\r\n                        size=\"small\"\r\n                      >\r\n                        {category.map((option) => (\r\n                          <MenuItem key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            label=\"آدرس\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            error={!!errors.address}\r\n                            helperText={\r\n                              errors.address ? errors.address.message : \"\"\r\n                            }\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"address\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      render={({ onChange, value, name }) => {\r\n                        return (\r\n                          <TextField\r\n                            label=\"توضیحات\"\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            fullWidth\r\n                            error={!!errors.description}\r\n                            helperText={\r\n                              errors.description\r\n                                ? errors.description.message\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        );\r\n                      }}\r\n                      name=\"address\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                      تایید\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={onReject}\r\n                    >\r\n                      بازگشت\r\n                    </Button>\r\n                  </Grid>\r\n                </Fragment>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\list.js",["410"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport TableRowMenu from \"../../components/Table/TableRowMenu\";\r\nimport TableTop from \"../../components/Table/TableTop\";\r\nimport TableHeader from \"../../components/Table/TableHead\";\r\nimport TablePaging from \"../../components/Table/TablePaging\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { convertParamsToQueryString } from \"../../helpers/utils\";\r\nimport DialogActions from \"../../redux/actions/dialogAction\";\r\nimport styles from \"./style\";\r\nimport FilterComponent from \"./filter\";\r\nimport Constant from \"../../helpers/constant\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\nconst headCells = [\r\n  {\r\n    id: \"firstName\",\r\n    label: \"نام\",\r\n  },\r\n  { id: \"lastName\", label: \"نام خانوادگی\" },\r\n  {\r\n    id: \"mobile\",\r\n    label: \"موبایل\",\r\n  },\r\n  { id: \"phone\", label: \"تلفن\" },\r\n  { id: \"status\", label: \"وضعیت\" },\r\n  { id: \"action\" },\r\n];\r\n\r\nexport default function MainList() {\r\n  const classes = styles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [search, setSearch] = useState();\r\n  const [orderBy, setOrderBy] = useState(\"firstName\");\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [list, setList] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const onAdd = () => {\r\n    history.push(\"/app/customer-detail\");\r\n  };\r\n\r\n  const getCustomerRequest = useApi({\r\n    method: \"get\",\r\n    url: `customer?${convertParamsToQueryString({\r\n      page,\r\n      order,\r\n      orderBy,\r\n      pageSize,\r\n      search,\r\n    })}`,\r\n  });\r\n\r\n  const deleteUseRequest = useApi({\r\n    method: \"delete\",\r\n    url: `customer`,\r\n  });\r\n\r\n  const handleAction = (id, type) => {\r\n    const types = {\r\n      edit: () => {\r\n        history.push(`/app/customer-detail?id=${id}`);\r\n      },\r\n      delete: () => {\r\n        DialogActions.show({\r\n          confirm: true,\r\n          title: \"ایا از حذف این رکورد مطمئن هستید ؟\",\r\n          onAction: async () => {\r\n            await deleteUseRequest.execute(null, id);\r\n            setList(list.filter((item) => item.id !== id));\r\n            DialogActions.hide();\r\n          },\r\n          size: \"sm\",\r\n          disableCloseButton: false,\r\n        });\r\n      },\r\n      transaction: () => {\r\n        history.push(`/app/customer-transaction?id=${id}`);\r\n      },\r\n    };\r\n    if (types[type]) {\r\n      types[type]();\r\n    }\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const onFilter = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  const getData = async () => {\r\n    const customerList = await getCustomerRequest.execute();\r\n    setList(customerList.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [page, order, search]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableTop\r\n          title=\"لیست مشتریان\"\r\n          onAdd={onAdd}\r\n          FilterComponent={<FilterComponent onFilter={onFilter} />}\r\n          handleSearch={onSearch}\r\n        />\r\n        <TableContainer style={{ padding: \"0 10px\" }}>\r\n          <Table\r\n            className={classes.table}\r\n            size={\"medium\"}\r\n            style={{ paddingRight: 10 }}\r\n          >\r\n            <TableHeader\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={list.length}\r\n              headCells={headCells}\r\n            />\r\n\r\n            <TableBody>\r\n              {stableSort(list, getComparator(order, orderBy))\r\n                .slice(page * pageSize, page * pageSize + pageSize)\r\n                .map((row) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      style={{ paddingRight: 10 }}\r\n                    >\r\n                      <TableCell padding=\"none\">{row.firstName}</TableCell>\r\n                      <TableCell padding=\"none\">{row.lastName}</TableCell>\r\n                      <TableCell padding=\"none\">{row.mobile}</TableCell>\r\n                      <TableCell padding=\"none\">{row.phone}</TableCell>\r\n                      <TableCell padding=\"none\">\r\n                        <Chip\r\n                          label={Constant.PERSON_STATUS[row.status]}\r\n                          className={clsx(classes.status, classes[row.status])}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell padding=\"none\">\r\n                        <TableRowMenu\r\n                          options={[\r\n                            { id: \"transaction\", title: \"تراکنش ها\" },\r\n                            { id: \"edit\", title: \"ویرایش\" },\r\n                            { id: \"delete\", title: \"حذف\" },\r\n                          ]}\r\n                          hadleAction={(type) => handleAction(row.id, type)}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {!list.length && !getCustomerRequest.pending && (\r\n                <TableRow style={{ height: 53 }}>\r\n                  <TableCell colSpan={6} style={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h6\">\r\n                      داده ای برای نمایش وجود ندارد\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePaging\r\n          count={list.length}\r\n          handleChangePage={handleChangePage}\r\n          handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n          page={page}\r\n          rowsPerPage={pageSize}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\detail.js",["411"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport clsx from \"clsx\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  datePicker: {\r\n    \"& input\": {\r\n      padding: \"10px 14px\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n  const [isPassword, setIsPassword] = useState(true);\r\n  const addBuyRequest = useApi({\r\n    method: \"post\",\r\n    url: `buy`,\r\n  });\r\n  const editBuyRequest = useApi({\r\n    method: \"put\",\r\n    url: `buy/${id}`,\r\n  });\r\n  const detailBuyRequest = useApi({\r\n    method: \"get\",\r\n    url: `buy/${id}`,\r\n  });\r\n\r\n  const onChangeViewClick = function () {\r\n    setIsPassword(!isPassword);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    if (id) {\r\n      return await editBuyRequest.execute(data);\r\n    }\r\n    await addBuyRequest.execute(data);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/buy-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailBuyRequest.execute();\r\n    setDetail(detail.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n  const [selectedDate, handleDateChange] = useState(moment());\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailBuyRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش فاکتور فروش\" : \"فاکتور فروش\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3}>\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12} className={classes.datePicker}>\r\n                  <DatePicker\r\n                    name=\"date\"\r\n                    label=\"تاریخ ثبت\"\r\n                    inputVariant=\"outlined\"\r\n                    okLabel=\"تأیید\"\r\n                    cancelLabel=\"لغو\"\r\n                    labelFunc={(date) =>\r\n                      date ? date.format(\"jYYYY/jMM/jDD\") : \"\"\r\n                    }\r\n                    value={selectedDate}\r\n                    onChange={handleDateChange}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام مشتری\"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.customer}\r\n                          helperText={\r\n                            errors.customer ? errors.customer.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"customer\"\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\list.js",["412"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\buy\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\list.js",["413"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\list.js",["414"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\employee\\detail.js",["415"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\list.js",["416"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\setting\\style.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\transaction.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\product\\detail.js",["417"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Tooltip,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport Constant from \"../../helpers/constant\";\r\nimport { getQueryString } from \"../../helpers/utils\";\r\nimport CircularProgress from \"../../components/CircularProgress\";\r\nimport clsx from \"clsx\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst currencies = [\r\n  {\r\n    value: \"USD\",\r\n    label: \"$\",\r\n  },\r\n  {\r\n    value: \"EUR\",\r\n    label: \"€\",\r\n  },\r\n  {\r\n    value: \"BTC\",\r\n    label: \"฿\",\r\n  },\r\n  {\r\n    value: \"JPY\",\r\n    label: \"¥\",\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    paddingBottom: 20,\r\n  },\r\n  deleteIcon: {\r\n    color: theme.palette.error.main,\r\n  },\r\n}));\r\n\r\nexport default function MainDetail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const id = getQueryString(\"id\");\r\n  const [detail, setDetail] = useState({});\r\n  const [amountArray, setAmountArray] = useState([]);\r\n  const { control, handleSubmit, errors, reset } = useForm();\r\n\r\n  const addProductRequest = useApi({\r\n    method: \"post\",\r\n    url: `product`,\r\n  });\r\n  const editProductRequest = useApi({\r\n    method: \"put\",\r\n    url: `product/${id}`,\r\n  });\r\n  const detailProductRequest = useApi({\r\n    method: \"get\",\r\n    url: `product/${id}`,\r\n  });\r\n\r\n  const onAddAmount = function () {\r\n    const randomId = uuidv4();\r\n    const onDelete = (id) => {\r\n      console.log(id, amountArray);\r\n      // setAmountArray(\r\n      //   amountArray.filter((item) => item.id !== randomId),\r\n      // );\r\n    };\r\n    const newAmount = (\r\n      <Fragment>\r\n        <Grid item lg={3} xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"موجودی اول دوره\"\r\n                  name={name}\r\n                  onChange={onChange}\r\n                  value={value}\r\n                  error={!!errors.amount}\r\n                  helperText={errors.amount ? errors.amount.message : \"\"}\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                />\r\n              );\r\n            }}\r\n            rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n            name=\"amount\"\r\n          />\r\n        </Grid>\r\n        <Grid item lg={4} xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  select\r\n                  label=\"واحد\"\r\n                  value={value}\r\n                  onChange={onChange}\r\n                  variant=\"outlined\"\r\n                  name={name}\r\n                  error={!!errors.unit}\r\n                  helperText={errors.unit ? errors.unit.message : \"\"}\r\n                  fullWidth\r\n                  size=\"small\"\r\n                >\r\n                  {currencies.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              );\r\n            }}\r\n            rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n            name=\"unit\"\r\n          />\r\n        </Grid>\r\n        <Grid item lg={4} xs={12}>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, value, name }) => {\r\n              return (\r\n                <TextField\r\n                  select\r\n                  label=\"انبار\"\r\n                  value={value}\r\n                  onChange={onChange}\r\n                  variant=\"outlined\"\r\n                  name={name}\r\n                  error={!!errors.stock}\r\n                  helperText={errors.stock ? errors.stock.message : \"\"}\r\n                  fullWidth\r\n                  size=\"small\"\r\n                >\r\n                  {currencies.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              );\r\n            }}\r\n            rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n            name=\"stock\"\r\n          />\r\n        </Grid>\r\n        <Grid item lg={1} xs={12}>\r\n          <Tooltip title=\"جستجو در جدول\">\r\n            <IconButton\r\n              id={randomId}\r\n              aria-label=\"filter list\"\r\n              onClick={() => onDelete(randomId)}\r\n            >\r\n              <i className={clsx(\"material-icons-round\", classes.deleteIcon)}>\r\n                clear\r\n              </i>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Grid>\r\n      </Fragment>\r\n    );\r\n\r\n    setAmountArray([...amountArray, { element: newAmount, id: randomId }]);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    if (id) {\r\n      return await editProductRequest.execute(data);\r\n    }\r\n    await addProductRequest.execute(data);\r\n  };\r\n\r\n  const onReject = () => {\r\n    history.push(\"/app/product-list\");\r\n  };\r\n\r\n  const getDetail = async () => {\r\n    const detail = await detailProductRequest.execute();\r\n    setDetail(detail.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getDetail();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset(detail);\r\n  }, [reset, detail]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {!detailProductRequest.pending ? (\r\n        <Grid item lg={6} sm={12} className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              {id ? \"ویرایش کالا\" : \"افزودن کالا\"}\r\n            </Typography>\r\n\r\n            <Grid container spacing={3} alignItems=\"center\">\r\n              <Fragment>\r\n                <Grid item lg={6} xs={12} className={classes.datePicker}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          label=\"نام \"\r\n                          name={name}\r\n                          onChange={onChange}\r\n                          value={value}\r\n                          error={!!errors.name}\r\n                          helperText={errors.name ? errors.name.message : \"\"}\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          select\r\n                          label=\"واحد شمارش\"\r\n                          value={value}\r\n                          onChange={onChange}\r\n                          variant=\"outlined\"\r\n                          name={name}\r\n                          error={!!errors.unitBase}\r\n                          helperText={\r\n                            errors.unitBase ? errors.unitBase.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        >\r\n                          {currencies.map((option) => (\r\n                            <MenuItem key={option.value} value={option.value}>\r\n                              {option.label}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"unitBase\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Controller\r\n                    control={control}\r\n                    render={({ onChange, value, name }) => {\r\n                      return (\r\n                        <TextField\r\n                          select\r\n                          label=\"دسته بندی\"\r\n                          value={value}\r\n                          onChange={onChange}\r\n                          variant=\"outlined\"\r\n                          name={name}\r\n                          error={!!errors.category}\r\n                          helperText={\r\n                            errors.category ? errors.category.message : \"\"\r\n                          }\r\n                          fullWidth\r\n                          size=\"small\"\r\n                        >\r\n                          {currencies.map((option) => (\r\n                            <MenuItem key={option.value} value={option.value}>\r\n                              {option.label}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: Constant.VALIDATION.REQUIRED }}\r\n                    name=\"category\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={6} xs={12}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onAddAmount}\r\n                  >\r\n                    افزودن موجودی اول دوره\r\n                  </Button>\r\n                </Grid>\r\n                {amountArray.map((item, index) => {\r\n                  return item.element;\r\n                })}\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    تایید\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onReject}\r\n                  >\r\n                    بازگشت\r\n                  </Button>\r\n                </Grid>\r\n              </Fragment>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\components\\Layout\\index.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\customers\\filter.js",[],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\index.js",["418"],"C:\\Users\\Ali\\Desktop\\tavakoli\\glass_accounting\\src\\pages\\category\\style.js",[],{"ruleId":"419","replacedBy":"420"},{"ruleId":"421","replacedBy":"422"},{"ruleId":"423","severity":1,"message":"424","line":1,"column":40,"nodeType":"425","messageId":"426","endLine":1,"endColumn":47},{"ruleId":"423","severity":1,"message":"427","line":24,"column":8,"nodeType":"425","messageId":"426","endLine":24,"endColumn":13},{"ruleId":"423","severity":1,"message":"428","line":7,"column":7,"nodeType":"425","messageId":"426","endLine":7,"endColumn":18},{"ruleId":"423","severity":1,"message":"429","line":8,"column":7,"nodeType":"425","messageId":"426","endLine":8,"endColumn":17},{"ruleId":"430","severity":1,"message":"431","line":4,"column":1,"nodeType":"432","endLine":12,"endColumn":3},{"ruleId":"430","severity":1,"message":"431","line":4,"column":1,"nodeType":"432","endLine":12,"endColumn":3},{"ruleId":"433","severity":1,"message":"434","line":76,"column":6,"nodeType":"435","endLine":76,"endColumn":8,"suggestions":"436"},{"ruleId":"419","replacedBy":"437"},{"ruleId":"421","replacedBy":"438"},{"ruleId":"430","severity":1,"message":"439","line":12,"column":1,"nodeType":"432","endLine":30,"endColumn":2},{"ruleId":"430","severity":1,"message":"439","line":8,"column":1,"nodeType":"432","endLine":26,"endColumn":2},{"ruleId":"423","severity":1,"message":"440","line":4,"column":11,"nodeType":"425","messageId":"426","endLine":4,"endColumn":19},{"ruleId":"423","severity":1,"message":"441","line":5,"column":3,"nodeType":"425","messageId":"426","endLine":5,"endColumn":8},{"ruleId":"423","severity":1,"message":"442","line":6,"column":17,"nodeType":"425","messageId":"426","endLine":6,"endColumn":31},{"ruleId":"423","severity":1,"message":"443","line":7,"column":17,"nodeType":"425","messageId":"426","endLine":7,"endColumn":31},{"ruleId":"423","severity":1,"message":"444","line":8,"column":16,"nodeType":"425","messageId":"426","endLine":8,"endColumn":25},{"ruleId":"423","severity":1,"message":"445","line":9,"column":21,"nodeType":"425","messageId":"426","endLine":9,"endColumn":32},{"ruleId":"423","severity":1,"message":"446","line":10,"column":19,"nodeType":"425","messageId":"426","endLine":10,"endColumn":30},{"ruleId":"423","severity":1,"message":"447","line":11,"column":18,"nodeType":"425","messageId":"426","endLine":11,"endColumn":25},{"ruleId":"433","severity":1,"message":"448","line":115,"column":6,"nodeType":"435","endLine":115,"endColumn":29,"suggestions":"449"},{"ruleId":"423","severity":1,"message":"450","line":2,"column":10,"nodeType":"425","messageId":"426","endLine":2,"endColumn":30},{"ruleId":"423","severity":1,"message":"451","line":4,"column":8,"nodeType":"425","messageId":"426","endLine":4,"endColumn":22},{"ruleId":"419","replacedBy":"452"},{"ruleId":"421","replacedBy":"453"},{"ruleId":"423","severity":1,"message":"454","line":8,"column":3,"nodeType":"425","messageId":"426","endLine":8,"endColumn":6},{"ruleId":"423","severity":1,"message":"455","line":13,"column":18,"nodeType":"425","messageId":"426","endLine":13,"endColumn":26},{"ruleId":"423","severity":1,"message":"456","line":16,"column":11,"nodeType":"425","messageId":"426","endLine":16,"endColumn":19},{"ruleId":"433","severity":1,"message":"434","line":83,"column":6,"nodeType":"435","endLine":83,"endColumn":8,"suggestions":"457"},{"ruleId":"433","severity":1,"message":"448","line":138,"column":6,"nodeType":"435","endLine":138,"endColumn":19,"suggestions":"458"},{"ruleId":"433","severity":1,"message":"459","line":86,"column":6,"nodeType":"435","endLine":86,"endColumn":8,"suggestions":"460"},{"ruleId":"433","severity":1,"message":"448","line":152,"column":6,"nodeType":"435","endLine":152,"endColumn":27,"suggestions":"461"},{"ruleId":"433","severity":1,"message":"434","line":83,"column":6,"nodeType":"435","endLine":83,"endColumn":8,"suggestions":"462"},{"ruleId":"433","severity":1,"message":"448","line":138,"column":6,"nodeType":"435","endLine":138,"endColumn":19,"suggestions":"463"},{"ruleId":"433","severity":1,"message":"448","line":138,"column":6,"nodeType":"435","endLine":138,"endColumn":19,"suggestions":"464"},{"ruleId":"433","severity":1,"message":"448","line":138,"column":6,"nodeType":"435","endLine":138,"endColumn":19,"suggestions":"465"},{"ruleId":"433","severity":1,"message":"434","line":83,"column":6,"nodeType":"435","endLine":83,"endColumn":8,"suggestions":"466"},{"ruleId":"433","severity":1,"message":"448","line":138,"column":6,"nodeType":"435","endLine":138,"endColumn":19,"suggestions":"467"},{"ruleId":"433","severity":1,"message":"434","line":209,"column":6,"nodeType":"435","endLine":209,"endColumn":8,"suggestions":"468"},{"ruleId":"433","severity":1,"message":"448","line":76,"column":6,"nodeType":"435","endLine":76,"endColumn":8,"suggestions":"469"},"no-native-reassign",["470"],"no-negated-in-lhs",["471"],"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'lightenRate' is assigned a value but never used.","'darkenRate' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getDetail' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["472"],["470"],["471"],"Unexpected default export of anonymous function","'HomeIcon' is defined but never used.","'Group' is defined but never used.","'TypographyIcon' is defined but never used.","'UIElementsIcon' is defined but never used.","'TableIcon' is defined but never used.","'SupportIcon' is defined but never used.","'LibraryIcon' is defined but never used.","'FAQIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["473"],"'cacheAdapterEnhancer' is defined but never used.","'storageService' is defined but never used.",["470"],["471"],"'Fab' is defined but never used.","'MailIcon' is defined but never used.","'SendIcon' is defined but never used.",["474"],["475"],"React Hook useEffect has missing dependencies: 'getCustomerCategory', 'getDetail', and 'id'. Either include them or remove the dependency array.",["476"],["477"],["478"],["479"],["480"],["481"],["482"],["483"],["484"],["485"],"no-global-assign","no-unsafe-negation",{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"486","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"486","fix":"497"},{"desc":"491","fix":"498"},{"desc":"491","fix":"499"},{"desc":"491","fix":"500"},{"desc":"486","fix":"501"},{"desc":"491","fix":"502"},{"desc":"486","fix":"503"},{"desc":"504","fix":"505"},"Update the dependencies array to be: [getDetail, id]",{"range":"506","text":"507"},"Update the dependencies array to be: [page, order, pageSize, getData]",{"range":"508","text":"509"},{"range":"510","text":"507"},"Update the dependencies array to be: [page, order, getData]",{"range":"511","text":"512"},"Update the dependencies array to be: [getCustomerCategory, getDetail, id]",{"range":"513","text":"514"},"Update the dependencies array to be: [page, order, search, getData]",{"range":"515","text":"516"},{"range":"517","text":"507"},{"range":"518","text":"512"},{"range":"519","text":"512"},{"range":"520","text":"512"},{"range":"521","text":"507"},{"range":"522","text":"512"},{"range":"523","text":"507"},"Update the dependencies array to be: [getData]",{"range":"524","text":"525"},[1849,1851],"[getDetail, id]",[2905,2928],"[page, order, pageSize, getData]",[2029,2031],[3499,3512],"[page, order, getData]",[2223,2225],"[getCustomerCategory, getDetail, id]",[3924,3945],"[page, order, search, getData]",[2031,2033],[3499,3512],[3499,3512],[3499,3512],[2031,2033],[3499,3512],[5735,5737],[1855,1857],"[getData]"]